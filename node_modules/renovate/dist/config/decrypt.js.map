{"version":3,"file":"decrypt.js","sourceRoot":"","sources":["../../lib/config/decrypt.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../logger';\nimport { maskToken } from '../util/mask';\nimport { regEx } from '../util/regex';\nimport { addSecretForSanitizing } from '../util/sanitize';\nimport { ensureTrailingSlash } from '../util/url';\nimport { tryDecryptKbPgp } from './decrypt/kbpgp';\nimport {\n  tryDecryptPublicKeyDefault,\n  tryDecryptPublicKeyPKCS1,\n} from './decrypt/legacy';\nimport { tryDecryptOpenPgp } from './decrypt/openpgp';\nimport { GlobalConfig } from './global';\nimport { DecryptedObject } from './schema';\nimport type { RenovateConfig } from './types';\n\nexport async function tryDecrypt(\n  privateKey: string,\n  encryptedStr: string,\n  repository: string,\n  keyName: string,\n): Promise<string | null> {\n  let decryptedStr: string | null = null;\n  if (privateKey?.startsWith('-----BEGIN PGP PRIVATE KEY BLOCK-----')) {\n    const decryptedObjStr =\n      process.env.RENOVATE_X_USE_OPENPGP === 'true'\n        ? await tryDecryptOpenPgp(privateKey, encryptedStr)\n        : await tryDecryptKbPgp(privateKey, encryptedStr);\n    if (decryptedObjStr) {\n      decryptedStr = validateDecryptedValue(decryptedObjStr, repository);\n    }\n  } else {\n    decryptedStr = tryDecryptPublicKeyDefault(privateKey, encryptedStr);\n    if (is.string(decryptedStr)) {\n      logger.warn(\n        { keyName },\n        'Encrypted value is using deprecated default padding, please change to using PGP encryption.',\n      );\n    } else {\n      decryptedStr = tryDecryptPublicKeyPKCS1(privateKey, encryptedStr);\n      // istanbul ignore if\n      if (is.string(decryptedStr)) {\n        logger.warn(\n          { keyName },\n          'Encrypted value is using deprecated PKCS1 padding, please change to using PGP encryption.',\n        );\n      }\n    }\n  }\n  return decryptedStr;\n}\n\nfunction validateDecryptedValue(\n  decryptedObjStr: string,\n  repository: string,\n): string | null {\n  try {\n    const decryptedObj = DecryptedObject.safeParse(decryptedObjStr);\n    // istanbul ignore if\n    if (!decryptedObj.success) {\n      const error = new Error('config-validation');\n      error.validationError = `Could not parse decrypted config.`;\n      throw error;\n    }\n\n    const { o: org, r: repo, v: value } = decryptedObj.data;\n    if (is.nonEmptyString(value)) {\n      if (is.nonEmptyString(org)) {\n        const orgPrefixes = org\n          .split(',')\n          .map((o) => o.trim())\n          .map((o) => o.toUpperCase())\n          .map((o) => ensureTrailingSlash(o));\n        if (is.nonEmptyString(repo)) {\n          const scopedRepos = orgPrefixes.map((orgPrefix) =>\n            `${orgPrefix}${repo}`.toUpperCase(),\n          );\n          if (scopedRepos.some((r) => r === repository.toUpperCase())) {\n            return value;\n          } else {\n            logger.debug(\n              { scopedRepos },\n              'Secret is scoped to a different repository',\n            );\n            const error = new Error('config-validation');\n            error.validationError = `Encrypted secret is scoped to a different repository: \"${scopedRepos.join(\n              ',',\n            )}\".`;\n            throw error;\n          }\n        } else {\n          if (\n            orgPrefixes.some((orgPrefix) =>\n              repository.toUpperCase().startsWith(orgPrefix),\n            )\n          ) {\n            return value;\n          } else {\n            logger.debug(\n              { orgPrefixes },\n              'Secret is scoped to a different org',\n            );\n            const error = new Error('config-validation');\n            error.validationError = `Encrypted secret is scoped to a different org: \"${orgPrefixes.join(\n              ',',\n            )}\".`;\n            throw error;\n          }\n        }\n      } else {\n        const error = new Error('config-validation');\n        error.validationError = `Encrypted value in config is missing a scope.`;\n        throw error;\n      }\n    } else {\n      const error = new Error('config-validation');\n      error.validationError = `Encrypted value in config is missing a value.`;\n      throw error;\n    }\n  } catch (err) {\n    logger.warn({ err }, 'Could not parse decrypted string');\n  }\n  return null;\n}\n\nexport async function decryptConfig(\n  config: RenovateConfig,\n  repository: string,\n): Promise<RenovateConfig> {\n  logger.trace({ config }, 'decryptConfig()');\n  const decryptedConfig = { ...config };\n  const privateKey = GlobalConfig.get('privateKey');\n  const privateKeyOld = GlobalConfig.get('privateKeyOld');\n  for (const [key, val] of Object.entries(config)) {\n    if (key === 'encrypted' && is.object(val)) {\n      logger.debug({ config: val }, 'Found encrypted config');\n\n      const encryptedWarning = GlobalConfig.get('encryptedWarning');\n      if (is.string(encryptedWarning)) {\n        logger.once.warn(encryptedWarning);\n      }\n\n      if (privateKey) {\n        for (const [eKey, eVal] of Object.entries(val)) {\n          logger.debug('Trying to decrypt ' + eKey);\n          let decryptedStr = await tryDecrypt(\n            privateKey,\n            eVal,\n            repository,\n            eKey,\n          );\n          if (privateKeyOld && !is.nonEmptyString(decryptedStr)) {\n            logger.debug(`Trying to decrypt with old private key`);\n            decryptedStr = await tryDecrypt(\n              privateKeyOld,\n              eVal,\n              repository,\n              eKey,\n            );\n          }\n          if (!is.nonEmptyString(decryptedStr)) {\n            const error = new Error('config-validation');\n            error.validationError = `Failed to decrypt field ${eKey}. Please re-encrypt and try again.`;\n            throw error;\n          }\n          logger.debug(`Decrypted ${eKey}`);\n          if (eKey === 'npmToken') {\n            const token = decryptedStr.replace(regEx(/\\n$/), '');\n            addSecretForSanitizing(token);\n            logger.debug(\n              { decryptedToken: maskToken(token) },\n              'Migrating npmToken to npmrc',\n            );\n            if (is.string(decryptedConfig.npmrc)) {\n              /* eslint-disable no-template-curly-in-string */\n              if (decryptedConfig.npmrc.includes('${NPM_TOKEN}')) {\n                logger.debug('Replacing ${NPM_TOKEN} with decrypted token');\n                decryptedConfig.npmrc = decryptedConfig.npmrc.replace(\n                  regEx(/\\${NPM_TOKEN}/g),\n                  token,\n                );\n              } else {\n                logger.debug('Appending _authToken= to end of existing npmrc');\n                decryptedConfig.npmrc = decryptedConfig.npmrc.replace(\n                  regEx(/\\n?$/),\n                  `\\n_authToken=${token}\\n`,\n                );\n              }\n              /* eslint-enable no-template-curly-in-string */\n            } else {\n              logger.debug('Adding npmrc to config');\n              decryptedConfig.npmrc = `//registry.npmjs.org/:_authToken=${token}\\n`;\n            }\n          } else {\n            decryptedConfig[eKey] = decryptedStr;\n            addSecretForSanitizing(decryptedStr);\n          }\n        }\n      } else {\n        logger.error('Found encrypted data but no privateKey');\n      }\n      delete decryptedConfig.encrypted;\n    } else if (is.array(val)) {\n      decryptedConfig[key] = [];\n      for (const item of val) {\n        if (is.object(item) && !is.array(item)) {\n          (decryptedConfig[key] as RenovateConfig[]).push(\n            await decryptConfig(item as RenovateConfig, repository),\n          );\n        } else {\n          (decryptedConfig[key] as unknown[]).push(item);\n        }\n      }\n    } else if (is.object(val) && key !== 'content') {\n      decryptedConfig[key] = await decryptConfig(\n        val as RenovateConfig,\n        repository,\n      );\n    }\n  }\n  delete decryptedConfig.encrypted;\n  logger.trace({ config: decryptedConfig }, 'decryptedConfig');\n  return decryptedConfig;\n}\n"]}