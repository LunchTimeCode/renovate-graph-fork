{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/util.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAChC,wDAA2D;AAC3D,4DAA6D;AAE7D,8DAA+D;AAC/D,+CAA4C;AAErC,KAAK,UAAU,wBAAwB,CAC5C,MAAsB,EACtB,UAAkB;IAElB,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,IAAA,yBAAa,EAAC,MAAM,CAAC,CAAC;IAC7D,IAAI,UAAU,EAAE,CAAC;QACf,eAAM,CAAC,IAAI,CACT,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,EAC1C,GAAG,UAAU,kBAAkB,CAChC,CAAC;IACJ,CAAC;IACD,MAAM,cAAc,GAAG,IAAA,uBAAa,EAAC,cAAc,CAAC,CAAC;IACrD,2BAA2B;IAC3B,IAAI,CAAC,IAAA,eAAM,EAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC;QAC5C,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,EAAE,qBAAqB,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,2BAAc,EAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAE5E,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;QACpB,eAAM,CAAC,IAAI,CACT,EAAE,QAAQ,EAAE,EACZ,uCAAuC,UAAU,EAAE,CACpD,CAAC;IACJ,CAAC;IACD,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAClB,eAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,qCAAqC,UAAU,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED,OAAO,cAAc,CAAC;AACxB,CAAC;AA9BD,4DA8BC","sourcesContent":["import { dequal } from 'dequal';\nimport { massageConfig } from '../../../../config/massage';\nimport { migrateConfig } from '../../../../config/migration';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { validateConfig } from '../../../../config/validation';\nimport { logger } from '../../../../logger';\n\nexport async function migrateAndValidateConfig(\n  config: RenovateConfig,\n  configType: string,\n): Promise<RenovateConfig> {\n  const { isMigrated, migratedConfig } = migrateConfig(config);\n  if (isMigrated) {\n    logger.warn(\n      { originalConfig: config, migratedConfig },\n      `${configType} needs migrating`,\n    );\n  }\n  const massagedConfig = massageConfig(migratedConfig);\n  // log only if it's changed\n  if (!dequal(migratedConfig, massagedConfig)) {\n    logger.trace({ config: massagedConfig }, 'Post-massage config');\n  }\n\n  const { warnings, errors } = await validateConfig('global', massagedConfig);\n\n  if (warnings.length) {\n    logger.warn(\n      { warnings },\n      `Config validation warnings found in ${configType}`,\n    );\n  }\n  if (errors.length) {\n    logger.warn({ errors }, `Config validation errors found in ${configType}`);\n  }\n\n  return massagedConfig;\n}\n"]}