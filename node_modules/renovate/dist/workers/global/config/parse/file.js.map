{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/file.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport fs from 'fs-extra';\nimport JSON5 from 'json5';\nimport upath from 'upath';\nimport type { AllConfig, RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { parseJson } from '../../../../util/common';\nimport { readSystemFile } from '../../../../util/fs';\nimport { parseSingleYaml } from '../../../../util/yaml';\nimport { migrateAndValidateConfig } from './util';\n\nexport async function getParsedContent(file: string): Promise<RenovateConfig> {\n  if (upath.basename(file) === '.renovaterc') {\n    return JSON5.parse(await readSystemFile(file, 'utf8'));\n  }\n  switch (upath.extname(file)) {\n    case '.yaml':\n    case '.yml':\n      return parseSingleYaml(await readSystemFile(file, 'utf8'), {\n        json: true,\n      });\n    case '.json5':\n    case '.json':\n      return parseJson(\n        await readSystemFile(file, 'utf8'),\n        file,\n      ) as RenovateConfig;\n    case '.cjs':\n    case '.js': {\n      const tmpConfig = await import(\n        upath.isAbsolute(file) ? file : `${process.cwd()}/${file}`\n      );\n      let config = tmpConfig.default\n        ? tmpConfig.default\n        : /* istanbul ignore next: hard to test */ tmpConfig;\n      // Allow the config to be a function\n      if (is.function_(config)) {\n        config = config();\n      }\n      return config;\n    }\n    default:\n      throw new Error('Unsupported file type');\n  }\n}\n\nexport async function getConfig(env: NodeJS.ProcessEnv): Promise<AllConfig> {\n  const configFile = env.RENOVATE_CONFIG_FILE ?? 'config.js';\n\n  if (env.RENOVATE_CONFIG_FILE && !(await fs.pathExists(configFile))) {\n    logger.fatal(\n      { configFile },\n      `Custom config file specified in RENOVATE_CONFIG_FILE must exist`,\n    );\n    process.exit(1);\n  }\n\n  logger.debug('Checking for config file in ' + configFile);\n  let config: AllConfig = {};\n  try {\n    config = await getParsedContent(configFile);\n  } catch (err) {\n    if (err instanceof SyntaxError || err instanceof TypeError) {\n      logger.fatal(`Could not parse config file \\n ${err.stack!}`);\n      process.exit(1);\n    } else if (err instanceof ReferenceError) {\n      logger.fatal(\n        `Error parsing config file due to unresolved variable(s): ${err.message}`,\n      );\n      process.exit(1);\n    } else if (err.message === 'Unsupported file type') {\n      logger.fatal(err.message);\n      process.exit(1);\n    } else if (env.RENOVATE_CONFIG_FILE) {\n      logger.fatal('Error parsing config file');\n      process.exit(1);\n    }\n    // istanbul ignore next: we can ignore this\n    logger.debug('No config file found on disk - skipping');\n  }\n\n  await deleteNonDefaultConfig(env); // Try deletion only if RENOVATE_CONFIG_FILE is specified\n\n  return migrateAndValidateConfig(config, configFile);\n}\n\nexport async function deleteNonDefaultConfig(\n  env: NodeJS.ProcessEnv,\n): Promise<void> {\n  const configFile = env.RENOVATE_CONFIG_FILE;\n\n  if (is.undefined(configFile) || is.emptyStringOrWhitespace(configFile)) {\n    return;\n  }\n\n  if (env.RENOVATE_X_DELETE_CONFIG_FILE !== 'true') {\n    return;\n  }\n\n  if (!(await fs.pathExists(configFile))) {\n    return;\n  }\n\n  try {\n    await fs.remove(configFile);\n    logger.trace({ path: configFile }, 'config file successfully deleted');\n  } catch (err) {\n    logger.warn({ err }, 'error deleting config file');\n  }\n}\n"]}