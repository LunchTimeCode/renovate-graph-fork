{"version":3,"file":"execute-post-upgrade-commands.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/execute-post-upgrade-commands.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #22198\nimport is from '@sindresorhus/is';\nimport { mergeChildConfig } from '../../../../config';\nimport { GlobalConfig } from '../../../../config/global';\nimport { addMeta, logger } from '../../../../logger';\nimport type { ArtifactError } from '../../../../modules/manager/types';\nimport { coerceArray } from '../../../../util/array';\nimport { exec } from '../../../../util/exec';\nimport {\n  localPathIsFile,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../../util/fs';\nimport { getRepoStatus } from '../../../../util/git';\nimport type { FileChange } from '../../../../util/git/types';\nimport { minimatch } from '../../../../util/minimatch';\nimport { regEx } from '../../../../util/regex';\nimport { sanitize } from '../../../../util/sanitize';\nimport { compile } from '../../../../util/template';\nimport type { BranchConfig, BranchUpgradeConfig } from '../../../types';\n\nexport interface PostUpgradeCommandsExecutionResult {\n  updatedArtifacts: FileChange[];\n  artifactErrors: ArtifactError[];\n}\n\nexport async function postUpgradeCommandsExecutor(\n  filteredUpgradeCommands: BranchUpgradeConfig[],\n  config: BranchConfig,\n): Promise<PostUpgradeCommandsExecutionResult> {\n  let updatedArtifacts = [...(config.updatedArtifacts ?? [])];\n  const artifactErrors = [...(config.artifactErrors ?? [])];\n  const allowedPostUpgradeCommands = GlobalConfig.get(\n    'allowedPostUpgradeCommands',\n  );\n  const allowPostUpgradeCommandTemplating = GlobalConfig.get(\n    'allowPostUpgradeCommandTemplating',\n  );\n\n  for (const upgrade of filteredUpgradeCommands) {\n    addMeta({ dep: upgrade.depName });\n    logger.trace(\n      {\n        tasks: upgrade.postUpgradeTasks,\n        allowedCommands: allowedPostUpgradeCommands,\n      },\n      `Checking for post-upgrade tasks`,\n    );\n    const commands = upgrade.postUpgradeTasks?.commands;\n    const fileFilters = upgrade.postUpgradeTasks?.fileFilters ?? ['**/*'];\n    if (is.nonEmptyArray(commands)) {\n      // Persist updated files in file system so any executed commands can see them\n      for (const file of config.updatedPackageFiles!.concat(updatedArtifacts)) {\n        const canWriteFile = await localPathIsFile(file.path);\n        if (file.type === 'addition' && !file.isSymlink && canWriteFile) {\n          let contents: Buffer | null;\n          if (typeof file.contents === 'string') {\n            contents = Buffer.from(file.contents);\n          } else {\n            contents = file.contents;\n          }\n          // TODO #22198\n          await writeLocalFile(file.path, contents!);\n        }\n      }\n\n      for (const cmd of commands) {\n        if (\n          allowedPostUpgradeCommands!.some((pattern) =>\n            regEx(pattern).test(cmd),\n          )\n        ) {\n          try {\n            const compiledCmd = allowPostUpgradeCommandTemplating\n              ? compile(cmd, mergeChildConfig(config, upgrade))\n              : cmd;\n\n            logger.trace({ cmd: compiledCmd }, 'Executing post-upgrade task');\n            const execResult = await exec(compiledCmd, {\n              cwd: GlobalConfig.get('localDir'),\n            });\n\n            logger.debug(\n              { cmd: compiledCmd, ...execResult },\n              'Executed post-upgrade task',\n            );\n          } catch (error) {\n            artifactErrors.push({\n              lockFile: upgrade.packageFile,\n              stderr: sanitize(error.message),\n            });\n          }\n        } else {\n          logger.warn(\n            {\n              cmd,\n              allowedPostUpgradeCommands,\n            },\n            'Post-upgrade task did not match any on allowedPostUpgradeCommands list',\n          );\n          artifactErrors.push({\n            lockFile: upgrade.packageFile,\n            stderr: sanitize(\n              `Post-upgrade command '${cmd}' has not been added to the allowed list in allowedPostUpgradeCommands`,\n            ),\n          });\n        }\n      }\n\n      const status = await getRepoStatus();\n\n      for (const relativePath of status.modified.concat(status.not_added)) {\n        for (const pattern of fileFilters) {\n          if (minimatch(pattern, { dot: true }).match(relativePath)) {\n            logger.debug(\n              { file: relativePath, pattern },\n              'Post-upgrade file saved',\n            );\n            const existingContent = await readLocalFile(relativePath);\n            const existingUpdatedArtifacts = updatedArtifacts.find(\n              (ua) => ua.path === relativePath,\n            );\n            if (existingUpdatedArtifacts?.type === 'addition') {\n              existingUpdatedArtifacts.contents = existingContent;\n            } else {\n              updatedArtifacts.push({\n                type: 'addition',\n                path: relativePath,\n                contents: existingContent,\n              });\n            }\n            // If the file is deleted by a previous post-update command, remove the deletion from updatedArtifacts\n            updatedArtifacts = updatedArtifacts.filter(\n              (ua) => !(ua.type === 'deletion' && ua.path === relativePath),\n            );\n          }\n        }\n      }\n\n      for (const relativePath of coerceArray(status.deleted)) {\n        for (const pattern of fileFilters) {\n          if (minimatch(pattern, { dot: true }).match(relativePath)) {\n            logger.debug(\n              { file: relativePath, pattern },\n              'Post-upgrade file removed',\n            );\n            updatedArtifacts.push({\n              type: 'deletion',\n              path: relativePath,\n            });\n            // If the file is created or modified by a previous post-update command, remove the modification from updatedArtifacts\n            updatedArtifacts = updatedArtifacts.filter(\n              (ua) => !(ua.type === 'addition' && ua.path === relativePath),\n            );\n          }\n        }\n      }\n    }\n  }\n  return { updatedArtifacts, artifactErrors };\n}\n\nexport default async function executePostUpgradeCommands(\n  config: BranchConfig,\n): Promise<PostUpgradeCommandsExecutionResult | null> {\n  const hasChangedFiles =\n    (is.array(config.updatedPackageFiles) &&\n      config.updatedPackageFiles.length > 0) ||\n    (is.array(config.updatedArtifacts) && config.updatedArtifacts.length > 0);\n\n  if (!hasChangedFiles) {\n    /* Only run post-upgrade tasks if there are changes to package files... */\n    logger.debug('No changes to package files, skipping post-upgrade tasks');\n    return null;\n  }\n\n  const branchUpgradeCommands: BranchUpgradeConfig[] = [\n    {\n      manager: config.manager,\n      depName: config.upgrades.map(({ depName }) => depName).join(' '),\n      branchName: config.branchName,\n      postUpgradeTasks:\n        config.postUpgradeTasks!.executionMode === 'branch'\n          ? config.postUpgradeTasks\n          : undefined,\n      fileFilters: config.fileFilters,\n    },\n  ];\n\n  const updateUpgradeCommands: BranchUpgradeConfig[] = config.upgrades.filter(\n    ({ postUpgradeTasks }) =>\n      !postUpgradeTasks?.executionMode ||\n      postUpgradeTasks.executionMode === 'update',\n  );\n\n  const { updatedArtifacts, artifactErrors } =\n    await postUpgradeCommandsExecutor(updateUpgradeCommands, config);\n  return postUpgradeCommandsExecutor(branchUpgradeCommands, {\n    ...config,\n    updatedArtifacts,\n    artifactErrors,\n  });\n}\n"]}