{"version":3,"file":"config-description.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/body/config-description.ts"],"names":[],"mappings":";;;AAAA,qDAAoD;AAGpD,SAAgB,sBAAsB,CAAC,MAAoB;IACzD,IAAI,MAAM,GAAG,kCAAkC,CAAC;IAChD,MAAM,IAAI,IAAA,eAAO,EAAC,uBAAuB,CAAC,CAAC;IAC3C,MAAM;QACJ,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC5E,MAAM;QACJ,gBAAgB;YAChB,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,QAAQ,CAAC;YAC3D,GAAG,CAAC;IAEN,MAAM,IAAI,MAAM,CAAC;IACjB,MAAM,IAAI,IAAA,eAAO,EAAC,0CAA0C,CAAC,CAAC;IAC9D,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;QACrB,MAAM,IAAI,UAAU,CAAC;IACvB,CAAC;SAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,CAAC;QACvC,MAAM,IAAI,2DAA2D,CAAC;IACxE,CAAC;SAAM,CAAC;QACN,MAAM;YACJ,wEAAwE,CAAC;IAC7E,CAAC;IACD,MAAM,IAAI,MAAM,CAAC;IACjB,MAAM,IAAI,IAAA,eAAO,EAAC,0BAA0B,CAAC,CAAC;IAC9C,IAAI,MAAM,CAAC,UAAU,KAAK,oBAAoB,EAAE,CAAC;QAC/C,MAAM,IAAI,mCAAmC,CAAC;IAChD,CAAC;SAAM,IAAI,MAAM,CAAC,UAAU,KAAK,OAAO,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC;QAChE,MAAM,IAAI,OAAO,CAAC;IACpB,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,gCAAgC,CAAC;IAC7C,CAAC;IACD,MAAM,IAAI,8CAA8C,CAAC;IACzD,IAAI,MAAM,CAAC,cAAc,EAAE,CAAC;QAC1B,MAAM,IAAI,IAAA,eAAO,EACf,yFAAyF,MAAM,CAAC,YAAY,EAAE,IAAI,4BAA4B,CAC/I,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,IAAA,eAAO,EACf,uEACE,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,eACjD,aAAa,CACd,CAAC;IACJ,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AA1CD,wDA0CC;AAED,SAAS,gBAAgB,CACvB,QAA8B,EAC9B,QAA4B;IAE5B,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,IAAI,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,aAAa,EAAE,CAAC;QAC9C,cAAc,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC1C,IAAI,QAAQ,EAAE,CAAC;YACb,cAAc,IAAI,gBAAgB,QAAQ,EAAE,CAAC;QAC/C,CAAC;aAAM,CAAC;YACN,cAAc,IAAI,QAAQ,CAAC;QAC7B,CAAC;IACH,CAAC;SAAM,CAAC;QACN,cAAc,IAAI,mCAAmC,CAAC;IACxD,CAAC;IACD,OAAO,cAAc,CAAC;AACxB,CAAC","sourcesContent":["import { emojify } from '../../../../../util/emoji';\nimport type { BranchConfig } from '../../../../types';\n\nexport function getPrConfigDescription(config: BranchConfig): string {\n  let prBody = `\\n\\n---\\n\\n### Configuration\\n\\n`;\n  prBody += emojify(`:date: **Schedule**: `);\n  prBody +=\n    'Branch creation - ' + scheduleToString(config.schedule, config.timezone);\n  prBody +=\n    ', Automerge - ' +\n    scheduleToString(config.automergeSchedule, config.timezone) +\n    '.';\n\n  prBody += '\\n\\n';\n  prBody += emojify(':vertical_traffic_light: **Automerge**: ');\n  if (config.automerge) {\n    prBody += 'Enabled.';\n  } else if (config.automergedPreviously) {\n    prBody += 'Disabled because a matching PR was automerged previously.';\n  } else {\n    prBody +=\n      'Disabled by config. Please merge this manually once you are satisfied.';\n  }\n  prBody += '\\n\\n';\n  prBody += emojify(':recycle: **Rebasing**: ');\n  if (config.rebaseWhen === 'behind-base-branch') {\n    prBody += 'Whenever PR is behind base branch';\n  } else if (config.rebaseWhen === 'never' || config.stopUpdating) {\n    prBody += 'Never';\n  } else {\n    prBody += 'Whenever PR becomes conflicted';\n  }\n  prBody += `, or you tick the rebase/retry checkbox.\\n\\n`;\n  if (config.recreateClosed) {\n    prBody += emojify(\n      `:ghost: **Immortal**: This PR will be recreated if closed unmerged. Get [config help](${config.productLinks?.help}) if that's undesired.\\n\\n`,\n    );\n  } else {\n    prBody += emojify(\n      `:no_bell: **Ignore**: Close this PR and you won't be reminded about ${\n        config.upgrades.length === 1 ? 'this update' : 'these updates'\n      } again.\\n\\n`,\n    );\n  }\n  return prBody;\n}\n\nfunction scheduleToString(\n  schedule: string[] | undefined,\n  timezone: string | undefined,\n): string {\n  let scheduleString = '';\n  if (schedule && schedule[0] !== 'at any time') {\n    scheduleString += `\"${String(schedule)}\"`;\n    if (timezone) {\n      scheduleString += ` in timezone ${timezone}`;\n    } else {\n      scheduleString += ` (UTC)`;\n    }\n  } else {\n    scheduleString += 'At any time (no schedule defined)';\n  }\n  return scheduleString;\n}\n"]}