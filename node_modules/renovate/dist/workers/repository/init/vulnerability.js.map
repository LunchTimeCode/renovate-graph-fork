{"version":3,"file":"vulnerability.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/vulnerability.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PackageRule, RenovateConfig } from '../../../config/types';\nimport { NO_VULNERABILITY_ALERTS } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { CrateDatasource } from '../../../modules/datasource/crate';\nimport { GithubTagsDatasource } from '../../../modules/datasource/github-tags';\nimport { GoDatasource } from '../../../modules/datasource/go';\nimport { MavenDatasource } from '../../../modules/datasource/maven';\nimport { NpmDatasource } from '../../../modules/datasource/npm';\nimport { NugetDatasource } from '../../../modules/datasource/nuget';\nimport { PackagistDatasource } from '../../../modules/datasource/packagist';\nimport { PypiDatasource } from '../../../modules/datasource/pypi';\nimport { normalizePythonDepName } from '../../../modules/datasource/pypi/common';\nimport { RubyGemsDatasource } from '../../../modules/datasource/rubygems';\nimport { platform } from '../../../modules/platform';\nimport * as allVersioning from '../../../modules/versioning';\nimport * as composerVersioning from '../../../modules/versioning/composer';\nimport * as mavenVersioning from '../../../modules/versioning/maven';\nimport * as npmVersioning from '../../../modules/versioning/npm';\nimport * as pep440Versioning from '../../../modules/versioning/pep440';\nimport * as rubyVersioning from '../../../modules/versioning/ruby';\nimport * as semverVersioning from '../../../modules/versioning/semver';\nimport type { SecurityAdvisory } from '../../../types';\nimport { sanitizeMarkdown } from '../../../util/markdown';\nimport { regEx } from '../../../util/regex';\n\ntype Datasource = string;\ntype DependencyName = string;\ntype FileName = string;\ntype VulnerableRequirements = string;\n\ntype CombinedAlert = Record<\n  FileName,\n  Record<\n    Datasource,\n    Record<\n      DependencyName,\n      Record<\n        VulnerableRequirements,\n        {\n          advisories: SecurityAdvisory[];\n          fileType?: string;\n          firstPatchedVersion?: string;\n        }\n      >\n    >\n  >\n>;\n\nexport function getFixedVersionByDatasource(\n  fixedVersion: string,\n  datasource: string,\n): string {\n  if (datasource === MavenDatasource.id) {\n    return `[${fixedVersion},)`;\n  } else if (datasource === NugetDatasource.id) {\n    // TODO: add support for nuget version ranges when #26150 is merged\n    return fixedVersion;\n  }\n\n  // crates.io, Go, Hex, npm, RubyGems, PyPI\n  return `>= ${fixedVersion}`;\n}\n\n// TODO can return `null` and `undefined` (#22198)\nexport async function detectVulnerabilityAlerts(\n  input: RenovateConfig,\n): Promise<RenovateConfig> {\n  if (!input?.vulnerabilityAlerts) {\n    return input;\n  }\n  if (input.vulnerabilityAlerts.enabled === false) {\n    logger.debug('Vulnerability alerts are disabled');\n    return input;\n  }\n  const alerts = await platform.getVulnerabilityAlerts?.();\n  if (!alerts?.length) {\n    logger.debug('No vulnerability alerts found');\n    if (input.vulnerabilityAlertsOnly) {\n      throw new Error(NO_VULNERABILITY_ALERTS);\n    }\n    return input;\n  }\n  const config = { ...input };\n  const versionings: Record<string, string> = {\n    'github-tags': semverVersioning.id,\n    go: semverVersioning.id,\n    packagist: composerVersioning.id,\n    maven: mavenVersioning.id,\n    npm: npmVersioning.id,\n    nuget: semverVersioning.id,\n    pypi: pep440Versioning.id,\n    rubygems: rubyVersioning.id,\n  };\n  const combinedAlerts: CombinedAlert = {};\n  for (const alert of alerts) {\n    if (\n      alert.securityVulnerability?.package?.name === 'yargs-parser' &&\n      (alert.vulnerableRequirements === '= 5.0.0-security.0' ||\n        alert.vulnerableRequirements === '= 5.0.1')\n    ) {\n      continue;\n    }\n    try {\n      if (alert.dismissReason) {\n        continue;\n      }\n      if (!alert.securityVulnerability.firstPatchedVersion) {\n        logger.debug(\n          { alert },\n          'Vulnerability alert has no firstPatchedVersion - skipping',\n        );\n        continue;\n      }\n      const datasourceMapping: Record<string, string> = {\n        ACTIONS: GithubTagsDatasource.id,\n        COMPOSER: PackagistDatasource.id,\n        GO: GoDatasource.id,\n        MAVEN: MavenDatasource.id,\n        NPM: NpmDatasource.id,\n        NUGET: NugetDatasource.id,\n        PIP: PypiDatasource.id,\n        RUBYGEMS: RubyGemsDatasource.id,\n        RUST: CrateDatasource.id,\n      };\n      const datasource =\n        datasourceMapping[alert.securityVulnerability.package.ecosystem];\n      const depName = alert.securityVulnerability.package.name;\n      const fileName = alert.vulnerableManifestPath;\n      const fileType = alert.vulnerableManifestFilename;\n      const firstPatchedVersion =\n        alert.securityVulnerability.firstPatchedVersion.identifier;\n      const advisory = alert.securityAdvisory;\n      // TODO #22198\n      let vulnerableRequirements = alert.vulnerableRequirements!;\n      // istanbul ignore if\n      if (!vulnerableRequirements.length) {\n        if (datasource === MavenDatasource.id) {\n          vulnerableRequirements = `(,${firstPatchedVersion})`;\n        } else {\n          vulnerableRequirements = `< ${firstPatchedVersion}`;\n        }\n      }\n      if (datasource === PypiDatasource.id) {\n        vulnerableRequirements = vulnerableRequirements.replace(\n          regEx(/^= /),\n          '== ',\n        );\n      }\n      if (\n        datasource === GithubTagsDatasource.id ||\n        datasource === MavenDatasource.id ||\n        datasource === NugetDatasource.id\n      ) {\n        // GitHub Actions uses docker versioning, which doesn't support `= 1.2.3` matching, so we strip the equals\n        vulnerableRequirements = vulnerableRequirements.replace(/^=\\s*/, '');\n      }\n      combinedAlerts[fileName] ||= {};\n      combinedAlerts[fileName][datasource] ||= {};\n      combinedAlerts[fileName][datasource][depName] ||= {};\n      combinedAlerts[fileName][datasource][depName][vulnerableRequirements] ||=\n        {\n          advisories: [],\n        };\n      const alertDetails =\n        combinedAlerts[fileName][datasource][depName][vulnerableRequirements];\n      alertDetails.advisories.push(advisory);\n      const version = allVersioning.get(versionings[datasource]);\n      if (version.isVersion(firstPatchedVersion)) {\n        if (\n          !alertDetails.firstPatchedVersion ||\n          version.isGreaterThan(\n            firstPatchedVersion,\n            alertDetails.firstPatchedVersion,\n          )\n        ) {\n          alertDetails.firstPatchedVersion = firstPatchedVersion;\n        }\n      } else {\n        logger.debug('Invalid firstPatchedVersion: ' + firstPatchedVersion);\n      }\n      alertDetails.fileType = fileType;\n    } catch (err) {\n      logger.warn({ err }, 'Error parsing vulnerability alert');\n    }\n  }\n  const alertPackageRules: PackageRule[] = [];\n  config.remediations = {} as never;\n  for (const [fileName, files] of Object.entries(combinedAlerts)) {\n    for (const [datasource, dependencies] of Object.entries(files)) {\n      for (const [depName, currentValues] of Object.entries(dependencies)) {\n        for (const [matchCurrentVersion, val] of Object.entries(\n          currentValues,\n        )) {\n          let prBodyNotes: string[] = [];\n          try {\n            prBodyNotes = ['### GitHub Vulnerability Alerts'].concat(\n              val.advisories.map((advisory) => {\n                const identifiers = advisory.identifiers!;\n                const description = advisory.description!;\n                let content = '#### ';\n                let heading: string;\n                if (identifiers.some((id) => id.type === 'CVE')) {\n                  heading = identifiers\n                    .filter((id) => id.type === 'CVE')\n                    .map((id) => id.value)\n                    .join(' / ');\n                } else {\n                  heading = identifiers.map((id) => id.value).join(' / ');\n                }\n                if (advisory.references.length) {\n                  heading = `[${heading}](${advisory.references[0].url})`;\n                }\n                content += heading;\n                content += '\\n\\n';\n\n                content += sanitizeMarkdown(description);\n                return content;\n              }),\n            );\n          } catch (err) /* istanbul ignore next */ {\n            logger.warn({ err }, 'Error generating vulnerability PR notes');\n          }\n          // TODO: types (#22198)\n          const allowedVersions = val.firstPatchedVersion\n            ? getFixedVersionByDatasource(val.firstPatchedVersion, datasource)\n            : /* istanbul ignore next: cannot happen */ undefined;\n          const matchFileNames =\n            datasource === GoDatasource.id\n              ? [fileName.replace('go.sum', 'go.mod')]\n              : [fileName];\n          let matchRule: PackageRule = {\n            matchDatasources: [datasource],\n            matchPackageNames: [depName],\n            matchCurrentVersion,\n            matchFileNames,\n          };\n          if (\n            datasource === PypiDatasource.id &&\n            normalizePythonDepName(depName) !== depName\n          ) {\n            matchRule.matchPackageNames?.push(normalizePythonDepName(depName));\n          }\n          const supportedRemediationFileTypes = ['package-lock.json'];\n          if (\n            config.transitiveRemediation &&\n            supportedRemediationFileTypes.includes(val.fileType!)\n          ) {\n            const remediations = config.remediations as Record<\n              string,\n              unknown[]\n            >;\n            remediations[fileName] ??= [];\n            const currentVersion = matchCurrentVersion.replace('=', '').trim();\n            const newVersion = allowedVersions;\n            const remediation = {\n              datasource,\n              depName,\n              currentVersion,\n              newVersion,\n              prBodyNotes,\n            };\n            remediations[fileName].push(remediation);\n          } else {\n            // Remediate only direct dependencies\n            matchRule = {\n              ...matchRule,\n              allowedVersions,\n              prBodyNotes,\n              isVulnerabilityAlert: true,\n              force: {\n                ...config.vulnerabilityAlerts,\n              },\n            };\n            // istanbul ignore if\n            if (\n              config.transitiveRemediation &&\n              matchRule.matchFileNames?.[0] === 'package.json'\n            ) {\n              matchRule.force!.rangeStrategy = 'replace';\n            }\n          }\n          alertPackageRules.push(matchRule);\n        }\n      }\n    }\n  }\n  logger.debug({ alertPackageRules }, 'alert package rules');\n  config.packageRules = (config.packageRules ?? []).concat(alertPackageRules);\n  return config;\n}\n"]}