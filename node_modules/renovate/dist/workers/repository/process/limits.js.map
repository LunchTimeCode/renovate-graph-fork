{"version":3,"file":"limits.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/limits.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AAEjC,4CAAyC;AACzC,wDAAyD;AACzD,uDAAoD;AACpD,mFAA8E;AAGvE,KAAK,UAAU,oBAAoB,CACxC,MAAsB;IAEtB,IAAI,MAAM,CAAC,aAAa,EAAE,CAAC;QACzB,IAAI,CAAC;YACH,eAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,MAAM,mBAAQ,CAAC,SAAS,EAAE,CAAC;YAC1C,MAAM,gBAAgB,GAAG,gBAAQ,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1D,eAAM,CAAC,KAAK,CAAC,oBAAoB,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;YAC7D,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CACjC,CAAC,EAAE,EAAE,EAAE,CACL,EAAE,CAAC,YAAY,KAAK,MAAM,CAAC,gBAAgB;gBAC3C,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,YAAa,CAAC;gBAChD,gBAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,SAAU,CAAC,GAAG,gBAAgB,CACrD,CAAC;YACF,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAC3B,CAAC,EACD,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC,MAAM,CAC5C,CAAC;YACF,eAAM,CAAC,KAAK,CAAC,8BAA8B,YAAY,EAAE,CAAC,CAAC;YAC3D,OAAO,YAAY,CAAC;QACtB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,qBAAqB;YACrB,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;gBACrC,MAAM,GAAG,CAAC;YACZ,CAAC;YACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,qCAAqC,CAAC,CAAC;YAC7D,OAAO,MAAM,CAAC,aAAa,CAAC;QAC9B,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC,gBAAgB,CAAC;AACjC,CAAC;AA/BD,oDA+BC;AAEM,KAAK,UAAU,yBAAyB,CAC7C,MAAsB,EACtB,QAAwB;IAExB,IAAI,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,eAAM,CAAC,KAAK,CAAC,kCAAkC,MAAM,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC5E,IAAI,CAAC;YACH,MAAM,OAAO,GAAS,EAAE,CAAC;YACzB,KAAK,MAAM,EAAE,UAAU,EAAE,IAAI,QAAQ,EAAE,CAAC;gBACtC,IAAI,CAAC;oBACH,MAAM,EAAE,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;oBACrE,IACE,EAAE;wBACF,EAAE,CAAC,YAAY,KAAK,MAAM,CAAC,gBAAgB;wBAC3C,EAAE,CAAC,KAAK,KAAK,MAAM,EACnB,CAAC;wBACD,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACnB,CAAC;gBACH,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACb,qBAAqB;oBACrB,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;wBACrC,MAAM,GAAG,CAAC;oBACZ,CAAC;yBAAM,CAAC;wBACN,QAAQ;oBACV,CAAC;gBACH,CAAC;YACH,CAAC;YACD,eAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,MAAM,yBAAyB,CAAC,CAAC;YACzD,MAAM,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAClC,CAAC,EACD,MAAM,CAAC,iBAAiB,GAAG,OAAO,CAAC,MAAM,CAC1C,CAAC;YACF,eAAM,CAAC,KAAK,CAAC,kCAAkC,mBAAmB,EAAE,CAAC,CAAC;YACtE,OAAO,mBAAmB,CAAC;QAC7B,CAAC;QAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC,CAAC;YACxC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,+BAA+B,CAAC,CAAC;YACvD,OAAO,MAAM,CAAC,iBAAiB,CAAC;QAClC,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC,gBAAgB,CAAC;AACjC,CAAC;AAxCD,8DAwCC;AAEM,KAAK,UAAU,eAAe,CACnC,MAAsB,EACtB,QAAwB;IAExB,MAAM,eAAe,GAAG,MAAM,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC3D,MAAM,mBAAmB,GAAG,MAAM,yBAAyB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC9E,OAAO,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC;AACxD,CAAC;AAPD,0CAOC;AAEM,KAAK,UAAU,8BAA8B,CAClD,MAAsB,EACtB,QAAwB;IAExB,MAAM,EAAE,qBAAqB,EAAE,iBAAiB,EAAE,GAAG,MAAM,CAAC;IAC5D,MAAM,KAAK,GACT,OAAO,qBAAqB,KAAK,QAAQ;QACvC,CAAC,CAAC,qBAAqB;QACvB,CAAC,CAAC,iBAAiB,CAAC;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,EAAE,CAAC;QACvC,eAAM,CAAC,KAAK,CAAC,sCAAsC,KAAK,GAAG,CAAC,CAAC;QAC7D,IAAI,CAAC;YACH,MAAM,gBAAgB,GAAa,EAAE,CAAC;YACtC,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE,CAAC;gBAC9B,IAAI,MAAM,SAAG,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;oBAC9C,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC3C,CAAC;YACH,CAAC;YAED,MAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC;YAC9C,eAAM,CAAC,KAAK,CACV,GAAG,aAAa,qCAAqC,gBAAgB,CAAC,IAAI,EAAE,EAAE,CAC/E,CAAC;YAEF,MAAM,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,aAAa,CAAC,CAAC;YAC/D,eAAM,CAAC,KAAK,CAAC,sCAAsC,mBAAmB,EAAE,CAAC,CAAC;YAE1E,OAAO,mBAAmB,CAAC;QAC7B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,kCAAkC;YAClC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,oCAAoC,CAAC,CAAC;YAC5D,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC,gBAAgB,CAAC;AACjC,CAAC;AAnCD,wEAmCC;AAEM,KAAK,UAAU,oBAAoB,CACxC,MAAsB,EACtB,QAAwB;IAExB,MAAM,eAAe,GAAG,MAAM,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC3D,MAAM,mBAAmB,GAAG,MAAM,8BAA8B,CAC9D,MAAM,EACN,QAAQ,CACT,CAAC;IACF,OAAO,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC;AACxD,CAAC;AAVD,oDAUC","sourcesContent":["import { DateTime } from 'luxon';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { Pr, platform } from '../../../modules/platform';\nimport { scm } from '../../../modules/platform/scm';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport type { BranchConfig } from '../../types';\n\nexport async function getPrHourlyRemaining(\n  config: RenovateConfig,\n): Promise<number> {\n  if (config.prHourlyLimit) {\n    try {\n      logger.debug('Calculating hourly PRs remaining');\n      const prList = await platform.getPrList();\n      const currentHourStart = DateTime.local().startOf('hour');\n      logger.debug(`currentHourStart=${String(currentHourStart)}`);\n      const soFarThisHour = prList.filter(\n        (pr) =>\n          pr.sourceBranch !== config.onboardingBranch &&\n          pr.sourceBranch.startsWith(config.branchPrefix!) &&\n          DateTime.fromISO(pr.createdAt!) > currentHourStart,\n      );\n      const prsRemaining = Math.max(\n        0,\n        config.prHourlyLimit - soFarThisHour.length,\n      );\n      logger.debug(`PR hourly limit remaining: ${prsRemaining}`);\n      return prsRemaining;\n    } catch (err) {\n      // istanbul ignore if\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      logger.error({ err }, 'Error checking PRs created per hour');\n      return config.prHourlyLimit;\n    }\n  }\n  return Number.MAX_SAFE_INTEGER;\n}\n\nexport async function getConcurrentPrsRemaining(\n  config: RenovateConfig,\n  branches: BranchConfig[],\n): Promise<number> {\n  if (config.prConcurrentLimit) {\n    logger.debug(`Calculating prConcurrentLimit (${config.prConcurrentLimit})`);\n    try {\n      const openPrs: Pr[] = [];\n      for (const { branchName } of branches) {\n        try {\n          const pr = await platform.getBranchPr(branchName, config.baseBranch);\n          if (\n            pr &&\n            pr.sourceBranch !== config.onboardingBranch &&\n            pr.state === 'open'\n          ) {\n            openPrs.push(pr);\n          }\n        } catch (err) {\n          // istanbul ignore if\n          if (err instanceof ExternalHostError) {\n            throw err;\n          } else {\n            // no-op\n          }\n        }\n      }\n      logger.debug(`${openPrs.length} PRs are currently open`);\n      const concurrentRemaining = Math.max(\n        0,\n        config.prConcurrentLimit - openPrs.length,\n      );\n      logger.debug(`PR concurrent limit remaining: ${concurrentRemaining}`);\n      return concurrentRemaining;\n    } catch (err) /* istanbul ignore next */ {\n      logger.error({ err }, 'Error checking concurrent PRs');\n      return config.prConcurrentLimit;\n    }\n  }\n  return Number.MAX_SAFE_INTEGER;\n}\n\nexport async function getPrsRemaining(\n  config: RenovateConfig,\n  branches: BranchConfig[],\n): Promise<number> {\n  const hourlyRemaining = await getPrHourlyRemaining(config);\n  const concurrentRemaining = await getConcurrentPrsRemaining(config, branches);\n  return Math.min(hourlyRemaining, concurrentRemaining);\n}\n\nexport async function getConcurrentBranchesRemaining(\n  config: RenovateConfig,\n  branches: BranchConfig[],\n): Promise<number> {\n  const { branchConcurrentLimit, prConcurrentLimit } = config;\n  const limit =\n    typeof branchConcurrentLimit === 'number'\n      ? branchConcurrentLimit\n      : prConcurrentLimit;\n  if (typeof limit === 'number' && limit) {\n    logger.debug(`Calculating branchConcurrentLimit (${limit})`);\n    try {\n      const existingBranches: string[] = [];\n      for (const branch of branches) {\n        if (await scm.branchExists(branch.branchName)) {\n          existingBranches.push(branch.branchName);\n        }\n      }\n\n      const existingCount = existingBranches.length;\n      logger.debug(\n        `${existingCount} already existing branches found: ${existingBranches.join()}`,\n      );\n\n      const concurrentRemaining = Math.max(0, limit - existingCount);\n      logger.debug(`Branch concurrent limit remaining: ${concurrentRemaining}`);\n\n      return concurrentRemaining;\n    } catch (err) {\n      // TODO: #22198 should never throw\n      logger.error({ err }, 'Error checking concurrent branches');\n      return limit;\n    }\n  }\n  return Number.MAX_SAFE_INTEGER;\n}\n\nexport async function getBranchesRemaining(\n  config: RenovateConfig,\n  branches: BranchConfig[],\n): Promise<number> {\n  const hourlyRemaining = await getPrHourlyRemaining(config);\n  const concurrentRemaining = await getConcurrentBranchesRemaining(\n    config,\n    branches,\n  );\n  return Math.min(hourlyRemaining, concurrentRemaining);\n}\n"]}