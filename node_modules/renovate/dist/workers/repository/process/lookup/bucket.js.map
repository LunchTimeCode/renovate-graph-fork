{"version":3,"file":"bucket.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/bucket.ts"],"names":[],"mappings":";;;AASA,SAAgB,SAAS,CACvB,MAAoB,EACpB,cAAsB,EACtB,UAAkB,EAClB,UAAyB;IAEzB,MAAM,EACJ,kBAAkB,EAClB,qBAAqB,EACrB,qBAAqB,EACrB,kBAAkB,GACnB,GAAG,MAAM,CAAC;IACX,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxB,OAAO,QAAQ,CAAC;IAClB,CAAC;IACD,MAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IACtD,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAEhD,iCAAiC;IACjC,IAAI,OAAO,KAAK,IAAI,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oCAAoC;IACpC,IAAI,SAAS,KAAK,OAAO,EAAE,CAAC;QAC1B,IAAI,qBAAqB,EAAE,CAAC;YAC1B,OAAO,IAAI,OAAO,EAAE,CAAC;QACvB,CAAC;QACD,yDAAyD;QACzD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,+CAA+C;IAE/C,MAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IACtD,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAEhD,iCAAiC;IACjC,IAAI,SAAS,KAAK,IAAI,IAAI,OAAO,KAAK,IAAI,EAAE,CAAC;QAC3C,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,oCAAoC;IACpC,IAAI,SAAS,KAAK,OAAO,EAAE,CAAC;QAC1B,IAAI,qBAAqB,EAAE,CAAC;YAC1B,OAAO,IAAI,OAAO,IAAI,OAAO,EAAE,CAAC;QAClC,CAAC;QAED,IAAI,kBAAkB,EAAE,CAAC;YACvB,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,oEAAoE;QACpE,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,qDAAqD;IAErD;;;;;;;MAOE;IAEF,IAAI,kBAAkB,EAAE,CAAC;QACvB,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,oEAAoE;IACpE,OAAO,WAAW,CAAC;AACrB,CAAC;AAvED,8BAuEC","sourcesContent":["import type { VersioningApi } from '../../../../modules/versioning/types';\n\nexport interface BucketConfig {\n  separateMajorMinor?: boolean;\n  separateMultipleMajor?: boolean;\n  separateMultipleMinor?: boolean;\n  separateMinorPatch?: boolean;\n}\n\nexport function getBucket(\n  config: BucketConfig,\n  currentVersion: string,\n  newVersion: string,\n  versioning: VersioningApi,\n): string | null {\n  const {\n    separateMajorMinor,\n    separateMultipleMajor,\n    separateMultipleMinor,\n    separateMinorPatch,\n  } = config;\n  if (!separateMajorMinor) {\n    return 'latest';\n  }\n  const fromMajor = versioning.getMajor(currentVersion);\n  const toMajor = versioning.getMajor(newVersion);\n\n  // istanbul ignore if: error case\n  if (toMajor === null) {\n    return null;\n  }\n\n  // Check for major update type first\n  if (fromMajor !== toMajor) {\n    if (separateMultipleMajor) {\n      return `v${toMajor}`;\n    }\n    // default path for major updates is not to separate them\n    return 'major';\n  }\n\n  // If we reach here then we know it's non-major\n\n  const fromMinor = versioning.getMinor(currentVersion);\n  const toMinor = versioning.getMinor(newVersion);\n\n  // istanbul ignore if: error case\n  if (fromMinor === null || toMinor === null) {\n    return 'non-major';\n  }\n\n  // Check the minor update type first\n  if (fromMinor !== toMinor) {\n    if (separateMultipleMinor) {\n      return `v${toMajor}.${toMinor}`;\n    }\n\n    if (separateMinorPatch) {\n      return 'minor';\n    }\n    // default path for minor updates is not to separate them from patch\n    return 'non-major';\n  }\n\n  // If we reach here then we know it's a patch release\n\n  /* future option\n  if (separateMultiplePatch) {\n    const toPatch = versioning.getPatch(newVersion);\n    if (toPatch !== null && separateMultiplePatch) {\n      return `v${toMajor}.${toMinor}.${toPatch}`;\n    }\n  }\n  */\n\n  if (separateMinorPatch) {\n    return 'patch';\n  }\n  // default path for patch updates is not to separate them from minor\n  return 'non-major';\n}\n"]}