{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport { CONFIG_VALIDATION } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport type { Release } from '../../../../modules/datasource/types';\nimport type { VersioningApi } from '../../../../modules/versioning';\nimport * as npmVersioning from '../../../../modules/versioning/npm';\nimport * as pep440 from '../../../../modules/versioning/pep440';\nimport * as poetryVersioning from '../../../../modules/versioning/poetry';\nimport { getRegexPredicate } from '../../../../util/string-match';\nimport type { FilterConfig } from './types';\n\nexport function filterVersions(\n  config: FilterConfig,\n  currentVersion: string,\n  latestVersion: string,\n  releases: Release[],\n  versioning: VersioningApi,\n): Release[] {\n  const { ignoreUnstable, ignoreDeprecated, respectLatest, allowedVersions } =\n    config;\n  function isVersionStable(version: string): boolean {\n    if (!versioning.isStable(version)) {\n      return false;\n    }\n    // Check if the datasource returned isStable = false\n    const release = releases.find((r) => r.version === version);\n    if (release?.isStable === false) {\n      return false;\n    }\n    return true;\n  }\n  // istanbul ignore if: shouldn't happen\n  if (!currentVersion) {\n    return [];\n  }\n\n  // Leave only versions greater than current\n  let filteredVersions = releases.filter(\n    (v) =>\n      versioning.isVersion(v.version) &&\n      versioning.isGreaterThan(v.version, currentVersion),\n  );\n\n  // Don't upgrade from non-deprecated to deprecated\n  const fromRelease = releases.find(\n    (release) => release.version === currentVersion,\n  );\n  if (ignoreDeprecated && fromRelease && !fromRelease.isDeprecated) {\n    filteredVersions = filteredVersions.filter((v) => {\n      const versionRelease = releases.find(\n        (release) => release.version === v.version,\n      );\n      // TODO: types (#22198)\n      if (versionRelease!.isDeprecated) {\n        logger.trace(\n          `Skipping ${config.depName!}@${v.version} because it is deprecated`,\n        );\n        return false;\n      }\n      return true;\n    });\n  }\n\n  if (allowedVersions) {\n    const isAllowedPred = getRegexPredicate(allowedVersions);\n    if (isAllowedPred) {\n      filteredVersions = filteredVersions.filter(({ version }) =>\n        isAllowedPred(version),\n      );\n    } else if (versioning.isValid(allowedVersions)) {\n      filteredVersions = filteredVersions.filter((v) =>\n        versioning.matches(v.version, allowedVersions),\n      );\n    } else if (\n      config.versioning !== npmVersioning.id &&\n      semver.validRange(allowedVersions)\n    ) {\n      logger.debug(\n        { depName: config.depName },\n        'Falling back to npm semver syntax for allowedVersions',\n      );\n      filteredVersions = filteredVersions.filter((v) =>\n        semver.satisfies(\n          semver.valid(v.version) ? v.version : semver.coerce(v.version)!,\n          allowedVersions,\n        ),\n      );\n    } else if (\n      config.versioning === poetryVersioning.id &&\n      pep440.isValid(allowedVersions)\n    ) {\n      logger.debug(\n        { depName: config.depName },\n        'Falling back to pypi syntax for allowedVersions',\n      );\n      filteredVersions = filteredVersions.filter((v) =>\n        pep440.matches(v.version, allowedVersions),\n      );\n    } else {\n      const error = new Error(CONFIG_VALIDATION);\n      error.validationSource = 'config';\n      error.validationError = 'Invalid `allowedVersions`';\n      error.validationMessage =\n        'The following allowedVersions does not parse as a valid version or range: ' +\n        JSON.stringify(allowedVersions);\n      throw error;\n    }\n  }\n\n  if (config.followTag) {\n    return filteredVersions;\n  }\n\n  if (\n    respectLatest &&\n    latestVersion &&\n    !versioning.isGreaterThan(currentVersion, latestVersion)\n  ) {\n    filteredVersions = filteredVersions.filter(\n      (v) => !versioning.isGreaterThan(v.version, latestVersion),\n    );\n  }\n\n  if (!ignoreUnstable) {\n    return filteredVersions;\n  }\n\n  if (isVersionStable(currentVersion)) {\n    return filteredVersions.filter((v) => isVersionStable(v.version));\n  }\n\n  // if current is unstable then allow unstable in the current major only\n  // Allow unstable only in current major\n  return filteredVersions.filter((v) => {\n    if (isVersionStable(v.version)) {\n      return true;\n    }\n    if (\n      versioning.getMajor(v.version) !== versioning.getMajor(currentVersion)\n    ) {\n      return false;\n    }\n    // istanbul ignore if: test passes without touching this\n    if (versioning.allowUnstableMajorUpgrades) {\n      return true;\n    }\n    return (\n      versioning.getMinor(v.version) === versioning.getMinor(currentVersion) &&\n      versioning.getPatch(v.version) === versioning.getPatch(currentVersion)\n    );\n  });\n}\n"]}