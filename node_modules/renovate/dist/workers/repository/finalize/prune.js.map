{"version":3,"file":"prune.js","sourceRoot":"","sources":["../../../../lib/workers/repository/finalize/prune.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalConfig } from '../../../config/global';\nimport type { RenovateConfig } from '../../../config/types';\nimport { REPOSITORY_CHANGED } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../modules/platform';\nimport { ensureComment } from '../../../modules/platform/comment';\nimport { scm } from '../../../modules/platform/scm';\nimport { getBranchList, setUserRepoConfig } from '../../../util/git';\nimport { getReconfigureBranchName } from '../reconfigure';\n\nasync function cleanUpBranches(\n  config: RenovateConfig,\n  remainingBranches: string[],\n): Promise<void> {\n  if (!config.pruneStaleBranches) {\n    logger.debug('Branch/PR pruning is disabled - skipping');\n    return;\n  }\n  // set Git author in case the repository is not initialized yet\n  setUserRepoConfig(config);\n  for (const branchName of remainingBranches) {\n    try {\n      const pr = await platform.findPr({\n        branchName,\n        state: 'open',\n        targetBranch: config.baseBranch,\n      });\n      const branchIsModified = await scm.isBranchModified(branchName);\n      if (pr) {\n        if (branchIsModified) {\n          logger.debug(\n            { prNo: pr.number, prTitle: pr.title },\n            'Branch is modified - skipping PR autoclosing',\n          );\n          if (GlobalConfig.get('dryRun')) {\n            logger.info(`DRY-RUN: Would update PR title and ensure comment.`);\n          } else {\n            if (!pr.title.endsWith('- abandoned')) {\n              const newPrTitle = pr.title + ' - abandoned';\n              await platform.updatePr({\n                number: pr.number,\n                prTitle: newPrTitle,\n                state: 'open',\n              });\n            }\n\n            await ensureComment({\n              number: pr.number,\n              topic: 'Autoclosing Skipped',\n              content:\n                'This PR has been flagged for autoclosing. However, it is being skipped due to the branch being already modified. Please close/delete it manually or report a bug if you think this is in error.',\n            });\n          }\n        } else if (GlobalConfig.get('dryRun')) {\n          logger.info(\n            { prNo: pr.number, prTitle: pr.title },\n            `DRY-RUN: Would autoclose PR`,\n          );\n        } else {\n          logger.info(\n            { branchName, prNo: pr.number, prTitle: pr.title },\n            'Autoclosing PR',\n          );\n          let newPrTitle = pr.title;\n          if (!pr.title.endsWith('- autoclosed')) {\n            newPrTitle += ' - autoclosed';\n          }\n          await platform.updatePr({\n            number: pr.number,\n            prTitle: newPrTitle,\n            state: 'closed',\n          });\n          await scm.deleteBranch(branchName);\n        }\n      } else if (branchIsModified) {\n        logger.debug('Orphan Branch is modified - skipping branch deletion');\n      } else if (GlobalConfig.get('dryRun')) {\n        logger.info(`DRY-RUN: Would delete orphan branch ${branchName}`);\n      } else {\n        logger.info({ branch: branchName }, `Deleting orphan branch`);\n        await scm.deleteBranch(branchName);\n      }\n    } catch (err) /* istanbul ignore next */ {\n      if (err.message === 'config-validation') {\n        logger.debug(\n          'Cannot prune branch due to collision between tags and branch names',\n        );\n      } else if (err.message?.includes(\"bad revision 'origin/\")) {\n        logger.debug(\n          { branchName },\n          'Branch not found on origin when attempting to prune',\n        );\n      } else if (err.message !== REPOSITORY_CHANGED) {\n        logger.warn({ err, branch: branchName }, 'Error pruning branch');\n      }\n    }\n  }\n}\n\nexport async function pruneStaleBranches(\n  config: RenovateConfig,\n  branchList: string[] | null | undefined,\n): Promise<void> {\n  logger.debug('Removing any stale branches');\n  logger.trace({ config }, `pruneStaleBranches`);\n  // TODO: types (#22198)\n  logger.debug(`config.repoIsOnboarded=${config.repoIsOnboarded!}`);\n  if (!branchList) {\n    logger.debug('No branchList');\n    return;\n  }\n  // TODO: types (#22198)\n  let renovateBranches = getBranchList().filter(\n    (branchName) =>\n      branchName.startsWith(config.branchPrefix!) &&\n      branchName !== getReconfigureBranchName(config.branchPrefix!),\n  );\n  if (!renovateBranches?.length) {\n    logger.debug('No renovate branches found');\n    return;\n  }\n  logger.debug(\n    {\n      branchList: branchList?.sort(),\n      renovateBranches: renovateBranches?.sort(),\n    },\n    'Branch lists',\n  );\n  // TODO: types (#22198)\n  const lockFileBranch = `${config.branchPrefix!}lock-file-maintenance`;\n  renovateBranches = renovateBranches.filter(\n    (branch) => branch !== lockFileBranch,\n  );\n  const remainingBranches = renovateBranches.filter(\n    (branch) => !branchList.includes(branch),\n  );\n  logger.debug(`remainingBranches=${String(remainingBranches)}`);\n  if (remainingBranches.length === 0) {\n    logger.debug('No branches to clean up');\n    return;\n  }\n\n  await cleanUpBranches(config, remainingBranches);\n}\n"]}