{"version":3,"file":"remap.js","sourceRoot":"","sources":["../../lib/logger/remap.ts"],"names":[],"mappings":";;;AACA,uDAG8B;AAG9B,IAAI,YAAyC,CAAC;AAC9C,IAAI,gBAA6C,CAAC;AAElD,IAAI,YAAY,GAAG,IAAI,OAAO,EAAuC,CAAC;AAEtE,SAAS,KAAK,CAAC,KAAoB,EAAE,KAAa;IAChD,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IACxC,IAAI,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACtC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,GAAG,IAAA,sCAAuB,EAAC,OAAO,CAAC,CAAC;QAC3C,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACnC,CAAC;IAED,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;AACxB,CAAC;AAED,SAAgB,gBAAgB,CAAC,GAAW;IAC1C,IAAI,gBAAgB,EAAE,CAAC;QACrB,KAAK,MAAM,KAAK,IAAI,gBAAgB,EAAE,CAAC;YACrC,IAAI,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC;gBACtB,OAAO,KAAK,CAAC,WAAW,CAAC;YAC3B,CAAC;QACH,CAAC;IACH,CAAC;IAED,IAAI,YAAY,EAAE,CAAC;QACjB,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE,CAAC;YACjC,IAAI,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC;gBACtB,OAAO,KAAK,CAAC,WAAW,CAAC;YAC3B,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAlBD,4CAkBC;AAED,SAAS,iBAAiB;IACxB,YAAY,GAAG,IAAI,OAAO,EAAE,CAAC;AAC/B,CAAC;AAED,SAAgB,uBAAuB,CACrC,MAAmC;IAEnC,YAAY,GAAG,MAAM,CAAC;AACxB,CAAC;AAJD,0DAIC;AAED,SAAgB,yBAAyB;IACvC,YAAY,GAAG,SAAS,CAAC;IACzB,iBAAiB,EAAE,CAAC;AACtB,CAAC;AAHD,8DAGC;AAED,SAAgB,2BAA2B,CACzC,MAAmC;IAEnC,gBAAgB,GAAG,MAAM,CAAC;AAC5B,CAAC;AAJD,kEAIC;AAED,SAAgB,6BAA6B;IAC3C,gBAAgB,GAAG,SAAS,CAAC;IAC7B,iBAAiB,EAAE,CAAC;AACtB,CAAC;AAHD,sEAGC","sourcesContent":["import type { LogLevelString } from 'bunyan';\nimport {\n  StringMatchPredicate,\n  getRegexOrGlobPredicate,\n} from '../util/string-match';\nimport type { LogLevelRemap } from './types';\n\nlet globalRemaps: LogLevelRemap[] | undefined;\nlet repositoryRemaps: LogLevelRemap[] | undefined;\n\nlet matcherCache = new WeakMap<LogLevelRemap, StringMatchPredicate>();\n\nfunction match(remap: LogLevelRemap, input: string): boolean {\n  const { matchMessage: pattern } = remap;\n  let matchFn = matcherCache.get(remap);\n  if (!matchFn) {\n    matchFn = getRegexOrGlobPredicate(pattern);\n    matcherCache.set(remap, matchFn);\n  }\n\n  return matchFn(input);\n}\n\nexport function getRemappedLevel(msg: string): LogLevelString | null {\n  if (repositoryRemaps) {\n    for (const remap of repositoryRemaps) {\n      if (match(remap, msg)) {\n        return remap.newLogLevel;\n      }\n    }\n  }\n\n  if (globalRemaps) {\n    for (const remap of globalRemaps) {\n      if (match(remap, msg)) {\n        return remap.newLogLevel;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction resetMatcherCache(): void {\n  matcherCache = new WeakMap();\n}\n\nexport function setGlobalLogLevelRemaps(\n  remaps: LogLevelRemap[] | undefined,\n): void {\n  globalRemaps = remaps;\n}\n\nexport function resetGlobalLogLevelRemaps(): void {\n  globalRemaps = undefined;\n  resetMatcherCache();\n}\n\nexport function setRepositoryLogLevelRemaps(\n  remaps: LogLevelRemap[] | undefined,\n): void {\n  repositoryRemaps = remaps;\n}\n\nexport function resetRepositoryLogLevelRemaps(): void {\n  repositoryRemaps = undefined;\n  resetMatcherCache();\n}\n"]}