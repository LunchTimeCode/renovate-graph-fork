{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bundler/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { RubyVersionDatasource } from '../../datasource/ruby-version';\nimport { RubyGemsDatasource } from '../../datasource/rubygems';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { delimiters, extractRubyVersion, getLockFilePath } from './common';\nimport { extractLockFileEntries } from './locked-version';\n\nfunction formatContent(input: string): string {\n  return input.replace(regEx(/^ {2}/), '') + '\\n'; //remove leading witespace and add a new line at the end\n}\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile?: string,\n): Promise<PackageFileContent | null> {\n  let lineNumber: number;\n  async function processGroupBlock(\n    line: string,\n    repositoryUrl?: string,\n    trimGroupLine: boolean = false,\n  ): Promise<void> {\n    const groupMatch = regEx(/^group\\s+(.*?)\\s+do/).exec(line);\n    if (groupMatch) {\n      const depTypes = groupMatch[1]\n        .split(',')\n        .map((group) => group.trim())\n        .map((group) => group.replace(regEx(/^:/), ''));\n\n      const groupLineNumber = lineNumber;\n      let groupContent = '';\n      let groupLine = '';\n\n      while (\n        lineNumber < lines.length &&\n        (trimGroupLine ? groupLine.trim() !== 'end' : groupLine !== 'end')\n      ) {\n        lineNumber += 1;\n        groupLine = lines[lineNumber];\n\n        // istanbul ignore if\n        if (!is.string(groupLine)) {\n          logger.debug(\n            { content, packageFile, type: 'groupLine' },\n            'Bundler parsing error',\n          );\n          groupLine = 'end';\n        }\n        if (trimGroupLine ? groupLine.trim() !== 'end' : groupLine !== 'end') {\n          groupContent += formatContent(groupLine);\n        }\n      }\n\n      const groupRes = await extractPackageFile(groupContent);\n      if (groupRes) {\n        res.deps = res.deps.concat(\n          groupRes.deps.map((dep) => {\n            const depObject = {\n              ...dep,\n              depTypes,\n              managerData: {\n                lineNumber:\n                  Number(dep.managerData?.lineNumber) + groupLineNumber + 1,\n              },\n            };\n            if (repositoryUrl) {\n              depObject.registryUrls = [repositoryUrl];\n            }\n            return depObject;\n          }),\n        );\n      }\n    }\n  }\n  const res: PackageFileContent = {\n    registryUrls: [],\n    deps: [],\n  };\n  const lines = content.split(newlineRegex);\n  for (lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    const line = lines[lineNumber];\n    let sourceMatch: RegExpMatchArray | null = null;\n    for (const delimiter of delimiters) {\n      sourceMatch =\n        sourceMatch ??\n        regEx(`^source ${delimiter}([^${delimiter}]+)${delimiter}\\\\s*$`).exec(\n          line,\n        );\n    }\n    if (sourceMatch) {\n      res.registryUrls?.push(sourceMatch[1]);\n    }\n\n    const rubyMatch = extractRubyVersion(line);\n    if (rubyMatch) {\n      res.deps.push({\n        depName: 'ruby',\n        currentValue: rubyMatch,\n        datasource: RubyVersionDatasource.id,\n        registryUrls: null,\n      });\n    }\n\n    const gemMatchRegex = regEx(\n      `^\\\\s*gem\\\\s+(['\"])(?<depName>[^'\"]+)(['\"])(\\\\s*,\\\\s*(?<currentValue>(['\"])[^'\"]+['\"](\\\\s*,\\\\s*['\"][^'\"]+['\"])?))?`,\n    );\n    const gemMatch = gemMatchRegex.exec(line);\n    if (gemMatch) {\n      const dep: PackageDependency = {\n        depName: gemMatch.groups?.depName,\n        managerData: { lineNumber },\n      };\n      if (gemMatch.groups?.currentValue) {\n        const currentValue = gemMatch.groups.currentValue;\n        dep.currentValue = currentValue;\n      }\n      dep.datasource = RubyGemsDatasource.id;\n      res.deps.push(dep);\n    }\n\n    await processGroupBlock(line);\n\n    for (const delimiter of delimiters) {\n      const sourceBlockMatch = regEx(\n        `^source\\\\s+${delimiter}(.*?)${delimiter}\\\\s+do`,\n      ).exec(line);\n      if (sourceBlockMatch) {\n        const repositoryUrl = sourceBlockMatch[1];\n        const sourceLineNumber = lineNumber;\n        let sourceContent = '';\n        let sourceLine = '';\n\n        while (lineNumber < lines.length && sourceLine.trim() !== 'end') {\n          lineNumber += 1;\n          sourceLine = lines[lineNumber];\n          // istanbul ignore if\n          if (!is.string(sourceLine)) {\n            logger.debug(\n              { content, packageFile, type: 'sourceLine' },\n              'Bundler parsing error',\n            );\n            sourceLine = 'end';\n          }\n\n          await processGroupBlock(sourceLine.trim(), repositoryUrl, true);\n\n          if (sourceLine.trim() !== 'end') {\n            sourceContent += formatContent(sourceLine);\n          }\n        }\n\n        const sourceRes = await extractPackageFile(sourceContent);\n\n        if (sourceRes) {\n          res.deps = res.deps.concat(\n            sourceRes.deps.map((dep) => ({\n              ...dep,\n              registryUrls: [repositoryUrl],\n              managerData: {\n                lineNumber:\n                  Number(dep.managerData?.lineNumber) + sourceLineNumber + 1,\n              },\n            })),\n          );\n        }\n      }\n    }\n    const platformsMatch = regEx(/^platforms\\s+(.*?)\\s+do/).test(line);\n    if (platformsMatch) {\n      const platformsLineNumber = lineNumber;\n      let platformsContent = '';\n      let platformsLine = '';\n      while (lineNumber < lines.length && platformsLine !== 'end') {\n        lineNumber += 1;\n        platformsLine = lines[lineNumber];\n        // istanbul ignore if\n        if (!is.string(platformsLine)) {\n          logger.debug(\n            { content, packageFile, type: 'platformsLine' },\n            'Bundler parsing error',\n          );\n          platformsLine = 'end';\n        }\n        if (platformsLine !== 'end') {\n          platformsContent += formatContent(platformsLine);\n        }\n      }\n      const platformsRes = await extractPackageFile(platformsContent);\n      if (platformsRes) {\n        res.deps = res.deps.concat(\n          platformsRes.deps.map((dep) => ({\n            ...dep,\n            managerData: {\n              lineNumber:\n                Number(dep.managerData?.lineNumber) + platformsLineNumber + 1,\n            },\n          })),\n        );\n      }\n    }\n    const ifMatch = regEx(/^if\\s+(.*?)/).test(line);\n    if (ifMatch) {\n      const ifLineNumber = lineNumber;\n      let ifContent = '';\n      let ifLine = '';\n      while (lineNumber < lines.length && ifLine !== 'end') {\n        lineNumber += 1;\n        ifLine = lines[lineNumber];\n        // istanbul ignore if\n        if (!is.string(ifLine)) {\n          logger.debug(\n            { content, packageFile, type: 'ifLine' },\n            'Bundler parsing error',\n          );\n          ifLine = 'end';\n        }\n        if (ifLine !== 'end') {\n          ifContent += formatContent(ifLine);\n        }\n      }\n      const ifRes = await extractPackageFile(ifContent);\n      if (ifRes) {\n        res.deps = res.deps.concat(\n          ifRes.deps.map((dep) => ({\n            ...dep,\n            managerData: {\n              lineNumber:\n                Number(dep.managerData?.lineNumber) + ifLineNumber + 1,\n            },\n          })),\n        );\n      }\n    }\n  }\n  if (!res.deps.length && !res.registryUrls?.length) {\n    return null;\n  }\n\n  if (packageFile) {\n    const gemfileLockPath = await getLockFilePath(packageFile);\n    const lockContent = await readLocalFile(gemfileLockPath, 'utf8');\n    if (lockContent) {\n      logger.debug(\n        `Found lock file ${gemfileLockPath} for packageFile: ${packageFile}`,\n      );\n      res.lockFiles = [gemfileLockPath];\n      const lockedEntries = extractLockFileEntries(lockContent);\n      for (const dep of res.deps) {\n        // TODO: types (#22198)\n        const lockedDepValue = lockedEntries.get(`${dep.depName!}`);\n        if (lockedDepValue) {\n          dep.lockedVersion = lockedDepValue;\n        }\n      }\n    }\n  }\n  return res;\n}\n"]}