{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bundler/common.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport {\n  getSiblingFileName,\n  localPathExists,\n  readLocalFile,\n} from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport type { UpdateArtifact } from '../types';\n\nexport const delimiters = ['\"', \"'\"];\n\nexport function extractRubyVersion(txt: string): string | null {\n  const rubyMatch = regEx(/^ruby\\s+(\"[^\"]+\"|'[^']+')\\s*$/gm).exec(txt);\n  if (rubyMatch?.length !== 2) {\n    return null;\n  }\n  const quotedVersion = rubyMatch[1];\n  return quotedVersion.substring(1, quotedVersion.length - 1);\n}\n\nexport async function getRubyConstraint(\n  updateArtifact: UpdateArtifact,\n): Promise<string | null> {\n  const { packageFileName, config, newPackageFileContent } = updateArtifact;\n  const { constraints = {} } = config;\n  const { ruby } = constraints;\n\n  if (ruby) {\n    logger.debug('Using ruby constraint from config');\n    return ruby;\n  } else {\n    const rubyMatch = extractRubyVersion(newPackageFileContent);\n    if (rubyMatch) {\n      logger.debug('Using ruby version from gemfile');\n      return rubyMatch;\n    }\n    const rubyVersionFile = getSiblingFileName(\n      packageFileName,\n      '.ruby-version',\n    );\n    const rubyVersionFileContent = await readLocalFile(rubyVersionFile, 'utf8');\n    if (rubyVersionFileContent) {\n      logger.debug('Using ruby version specified in .ruby-version');\n      return rubyVersionFileContent\n        .replace(regEx(/^ruby-/), '')\n        .replace(regEx(/\\n/g), '')\n        .trim();\n    }\n  }\n  return null;\n}\n\nexport function getBundlerConstraint(\n  updateArtifact: Pick<UpdateArtifact, 'config'>,\n  existingLockFileContent: string,\n): string | null {\n  const { config } = updateArtifact;\n  const { constraints = {} } = config;\n  const { bundler } = constraints;\n\n  if (bundler) {\n    logger.debug('Using bundler constraint from config');\n    return bundler;\n  } else {\n    const bundledWith = regEx(/\\nBUNDLED WITH\\n\\s+(.*?)(\\n|$)/).exec(\n      existingLockFileContent,\n    );\n    if (bundledWith) {\n      logger.debug('Using bundler version specified in lockfile');\n      return bundledWith[1];\n    }\n  }\n  return null;\n}\n\nexport async function getLockFilePath(\n  packageFilePath: string,\n): Promise<string> {\n  const lockFilePath = (await localPathExists(`${packageFilePath}.lock`))\n    ? `${packageFilePath}.lock`\n    : `Gemfile.lock`;\n  logger.debug(`Lockfile for ${packageFilePath} found in ${lockFilePath}`);\n  return lockFilePath;\n}\n"]}