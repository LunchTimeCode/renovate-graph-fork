{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bun/extract.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,yCAAqE;AAErE,qEAAwE;AAKxE,SAAS,eAAe,CAAC,gBAAwB,EAAE,QAAgB;IACjE,OAAO,CACL,gBAAgB,KAAK,QAAQ,IAAI,gBAAgB,CAAC,QAAQ,CAAC,IAAI,QAAQ,EAAE,CAAC,CAC3E,CAAC;AACJ,CAAC;AAEM,KAAK,UAAU,sBAAsB,CAC1C,MAAqB,EACrB,YAAsB;IAEtB,MAAM,YAAY,GAAkC,EAAE,CAAC;IACvD,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;QACvC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE,CAAC;YAC/C,eAAM,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,EAAE,4BAA4B,CAAC,CAAC;YAC3D,SAAS;QACX,CAAC;QACD,MAAM,WAAW,GAAG,IAAA,uBAAkB,EAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACpE,MAAM,kBAAkB,GAAG,MAAM,IAAA,kBAAa,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QACpE,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACxB,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACvD,SAAS;QACX,CAAC;QAED,IAAI,WAAuB,CAAC;QAC5B,IAAI,CAAC;YACH,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAC/C,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,4BAA4B,CAAC,CAAC;YACpD,SAAS;QACX,CAAC;QAED,MAAM,SAAS,GAAG,IAAA,iCAAkB,EAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAC/D,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,uBAAuB,CAAC,CAAC;YACvD,SAAS;QACX,CAAC;QAED,MAAM,GAAG,GAAgB;YACvB,GAAG,SAAS;YACZ,WAAW;YACX,SAAS,EAAE,CAAC,WAAW,CAAC;SACzB,CAAC;QACF,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAxCD,wDAwCC","sourcesContent":["import { logger } from '../../../logger';\nimport { getSiblingFileName, readLocalFile } from '../../../util/fs';\n\nimport { extractPackageJson } from '../npm/extract/common/package-file';\nimport type { NpmPackage } from '../npm/extract/types';\nimport type { NpmManagerData } from '../npm/types';\nimport type { ExtractConfig, PackageFile } from '../types';\n\nfunction matchesFileName(fileNameWithPath: string, fileName: string): boolean {\n  return (\n    fileNameWithPath === fileName || fileNameWithPath.endsWith(`/${fileName}`)\n  );\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  matchedFiles: string[],\n): Promise<PackageFile[]> {\n  const packageFiles: PackageFile<NpmManagerData>[] = [];\n  for (const matchedFile of matchedFiles) {\n    if (!matchesFileName(matchedFile, 'bun.lockb')) {\n      logger.warn({ matchedFile }, 'Invalid bun lockfile match');\n      continue;\n    }\n    const packageFile = getSiblingFileName(matchedFile, 'package.json');\n    const packageFileContent = await readLocalFile(packageFile, 'utf8');\n    if (!packageFileContent) {\n      logger.debug({ packageFile }, 'No package.json found');\n      continue;\n    }\n\n    let packageJson: NpmPackage;\n    try {\n      packageJson = JSON.parse(packageFileContent);\n    } catch (err) {\n      logger.debug({ err }, 'Error parsing package.json');\n      continue;\n    }\n\n    const extracted = extractPackageJson(packageJson, packageFile);\n    if (!extracted) {\n      logger.debug({ packageFile }, 'No dependencies found');\n      continue;\n    }\n\n    const res: PackageFile = {\n      ...extracted,\n      packageFile,\n      lockFiles: [matchedFile],\n    };\n    packageFiles.push(res);\n  }\n\n  return packageFiles;\n}\n"]}