"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateArtifacts = void 0;
const tslib_1 = require("tslib");
const is_1 = tslib_1.__importDefault(require("@sindresorhus/is"));
const error_messages_1 = require("../../../constants/error-messages");
const logger_1 = require("../../../logger");
const exec_1 = require("../../../util/exec");
const fs_1 = require("../../../util/fs");
async function updateArtifacts(updateArtifact) {
    const { packageFileName, updatedDeps, newPackageFileContent, config } = updateArtifact;
    logger_1.logger.debug(`bun.updateArtifacts(${packageFileName})`);
    const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';
    if (is_1.default.emptyArray(updatedDeps) && !isLockFileMaintenance) {
        logger_1.logger.debug('No updated bun deps - returning null');
        return null;
    }
    // Find the first bun dependency in order to handle mixed manager updates
    const lockFileName = updatedDeps.find((dep) => dep.manager === 'bun')
        ?.lockFiles?.[0];
    if (!lockFileName) {
        logger_1.logger.debug(`No ${lockFileName} found`);
        return null;
    }
    const oldLockFileContent = await (0, fs_1.readLocalFile)(lockFileName);
    if (!oldLockFileContent) {
        logger_1.logger.debug(`No ${lockFileName} found`);
        return null;
    }
    try {
        await (0, fs_1.writeLocalFile)(packageFileName, newPackageFileContent);
        if (isLockFileMaintenance) {
            await (0, fs_1.deleteLocalFile)(lockFileName);
        }
        const execOptions = {
            userConfiguredEnv: config.env,
            cwdFile: packageFileName,
            docker: {},
            toolConstraints: [
                {
                    toolName: 'bun',
                    constraint: updateArtifact?.config?.constraints?.bun,
                },
            ],
        };
        await (0, exec_1.exec)('bun install', execOptions);
        const newLockFileContent = await (0, fs_1.readLocalFile)(lockFileName);
        if (!newLockFileContent ||
            Buffer.compare(oldLockFileContent, newLockFileContent) === 0) {
            return null;
        }
        return [
            {
                file: {
                    type: 'addition',
                    path: lockFileName,
                    contents: newLockFileContent,
                },
            },
        ];
    }
    catch (err) {
        if (err.message === error_messages_1.TEMPORARY_ERROR) {
            throw err;
        }
        logger_1.logger.warn({ lockfile: lockFileName, err }, `Failed to update lock file`);
        return [
            {
                artifactError: {
                    lockFile: lockFileName,
                    stderr: err.message,
                },
            },
        ];
    }
}
exports.updateArtifacts = updateArtifacts;
//# sourceMappingURL=artifacts.js.map