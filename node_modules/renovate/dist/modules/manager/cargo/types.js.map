{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cargo/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { DEFAULT_REGISTRY_URL } from './utils';\n\nexport interface CargoPackage {\n  /** Semver version */\n  version: string;\n}\n\nexport interface CargoDep {\n  /** Path on disk to the crate sources */\n  path?: string;\n  /** Git URL for the dependency */\n  git?: string;\n  /** Semver version */\n  version?: string;\n  /** Name of a registry whose URL is configured in `.cargo/config.toml` */\n  registry?: string;\n  /** Name of a package to look up */\n  package?: string;\n  /** Whether the dependency is inherited from the workspace*/\n  workspace?: boolean;\n}\n\nexport type CargoDeps = Record<string, CargoDep | string>;\n\nexport interface CargoSection {\n  dependencies?: CargoDeps;\n  'dev-dependencies'?: CargoDeps;\n  'build-dependencies'?: CargoDeps;\n}\n\nexport interface CargoManifest extends CargoSection {\n  target?: Record<string, CargoSection>;\n  workspace?: CargoSection;\n  package?: CargoPackage;\n}\n\nexport interface CargoConfig {\n  registries?: Record<string, CargoRegistry>;\n  source?: Record<string, CargoSource>;\n}\n\nexport interface CargoRegistry {\n  index?: string;\n}\n\nexport interface CargoSource {\n  'replace-with'?: string;\n  registry?: string;\n}\n\n/**\n * null means a registry was defined, but we couldn't find a valid URL\n */\nexport type CargoRegistryUrl = string | typeof DEFAULT_REGISTRY_URL | null;\nexport interface CargoRegistries {\n  [key: string]: CargoRegistryUrl;\n}\n"]}