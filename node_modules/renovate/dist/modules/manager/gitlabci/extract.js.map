{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gitlabci/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport { trimLeadingSlash } from '../../../util/url';\nimport { parseYaml } from '../../../util/yaml';\nimport { GitlabTagsDatasource } from '../../datasource/gitlab-tags';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFile,\n  PackageFileContent,\n} from '../types';\nimport {\n  filterIncludeFromGitlabPipeline,\n  isGitlabIncludeComponent,\n  isGitlabIncludeLocal,\n  isNonEmptyObject,\n} from './common';\nimport type {\n  GitlabInclude,\n  GitlabIncludeComponent,\n  GitlabPipeline,\n  Image,\n  Job,\n  Services,\n} from './types';\nimport { getGitlabDep, replaceReferenceTags } from './utils';\n\n// See https://docs.gitlab.com/ee/ci/components/index.html#use-a-component\nconst componentReferenceRegex = regEx(\n  /(?<fqdn>[^/]+)\\/(?<projectPath>.+)\\/(?:.+)@(?<specificVersion>.+)/,\n);\nconst componentReferenceLatestVersion = '~latest';\n\nexport function extractFromImage(\n  image: Image | undefined,\n  registryAliases?: Record<string, string>,\n): PackageDependency | null {\n  if (is.undefined(image)) {\n    return null;\n  }\n  let dep: PackageDependency | null = null;\n  if (is.string(image)) {\n    dep = getGitlabDep(image, registryAliases);\n    dep.depType = 'image';\n  } else if (is.string(image?.name)) {\n    dep = getGitlabDep(image.name, registryAliases);\n    dep.depType = 'image-name';\n  }\n  return dep;\n}\n\nexport function extractFromServices(\n  services: Services | undefined,\n  registryAliases?: Record<string, string>,\n): PackageDependency[] {\n  if (is.undefined(services)) {\n    return [];\n  }\n  const deps: PackageDependency[] = [];\n  for (const service of services) {\n    if (is.string(service)) {\n      const dep = getGitlabDep(service, registryAliases);\n      dep.depType = 'service-image';\n      deps.push(dep);\n    } else if (is.string(service?.name)) {\n      const dep = getGitlabDep(service.name, registryAliases);\n      dep.depType = 'service-image';\n      deps.push(dep);\n    }\n  }\n  return deps;\n}\n\nexport function extractFromJob(\n  job: Job | undefined,\n  registryAliases?: Record<string, string>,\n): PackageDependency[] {\n  if (is.undefined(job)) {\n    return [];\n  }\n  const deps: PackageDependency[] = [];\n  if (is.object(job)) {\n    const { image, services } = { ...job };\n    if (is.object(image) || is.string(image)) {\n      const dep = extractFromImage(image, registryAliases);\n      if (dep) {\n        deps.push(dep);\n      }\n    }\n    if (is.array(services)) {\n      deps.push(...extractFromServices(services, registryAliases));\n    }\n  }\n  return deps;\n}\n\nfunction getIncludeComponentsFromInclude(\n  includeValue: GitlabInclude[] | GitlabInclude,\n): GitlabIncludeComponent[] {\n  const includes = is.array(includeValue) ? includeValue : [includeValue];\n  return includes.filter(isGitlabIncludeComponent);\n}\n\nfunction getAllIncludeComponents(\n  data: GitlabPipeline,\n): GitlabIncludeComponent[] {\n  const childrenData = Object.values(filterIncludeFromGitlabPipeline(data))\n    .filter(isNonEmptyObject)\n    .map(getAllIncludeComponents)\n    .flat();\n\n  // Process include key.\n  if (data.include) {\n    childrenData.push(...getIncludeComponentsFromInclude(data.include));\n  }\n  return childrenData;\n}\n\nfunction extractDepFromIncludeComponent(\n  includeComponent: GitlabIncludeComponent,\n  registryAliases?: Record<string, string>,\n): PackageDependency | null {\n  const componentReference = componentReferenceRegex.exec(\n    includeComponent.component,\n  )?.groups;\n  if (!componentReference) {\n    logger.debug(\n      { componentReference: includeComponent.component },\n      'Ignoring malformed component reference',\n    );\n    return null;\n  }\n  const projectPathParts = componentReference.projectPath.split('/');\n  if (projectPathParts.length < 2) {\n    logger.debug(\n      { componentReference: includeComponent.component },\n      'Ignoring component reference with incomplete project path',\n    );\n    return null;\n  }\n  const aliasValue = registryAliases?.[componentReference.fqdn];\n  if (aliasValue) {\n    componentReference.fqdn = aliasValue;\n  }\n\n  const dep: PackageDependency = {\n    datasource: GitlabTagsDatasource.id,\n    depName: componentReference.projectPath,\n    depType: 'repository',\n    currentValue: componentReference.specificVersion,\n    registryUrls: [`https://${componentReference.fqdn}`],\n  };\n  if (dep.currentValue === componentReferenceLatestVersion) {\n    logger.debug(\n      { componentVersion: dep.currentValue },\n      'Ignoring component version',\n    );\n    dep.skipReason = 'unsupported-version';\n  }\n  return dep;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): PackageFileContent | null {\n  let deps: PackageDependency[] = [];\n  try {\n    // TODO: use schema (#9610)\n    const docs = parseYaml<GitlabPipeline>(\n      replaceReferenceTags(content),\n      null,\n      {\n        json: true,\n      },\n    );\n    for (const doc of docs) {\n      if (is.object(doc)) {\n        for (const [property, value] of Object.entries(doc)) {\n          switch (property) {\n            case 'image':\n              {\n                const dep = extractFromImage(\n                  value as Image,\n                  config.registryAliases,\n                );\n                if (dep) {\n                  deps.push(dep);\n                }\n              }\n              break;\n\n            case 'services':\n              deps.push(\n                ...extractFromServices(\n                  value as Services,\n                  config.registryAliases,\n                ),\n              );\n              break;\n\n            default:\n              deps.push(\n                ...extractFromJob(value as Job, config.registryAliases),\n              );\n              break;\n          }\n        }\n        deps = deps.filter(is.truthy);\n      }\n\n      const includedComponents = getAllIncludeComponents(doc);\n      for (const includedComponent of includedComponents) {\n        const dep = extractDepFromIncludeComponent(\n          includedComponent,\n          config.registryAliases,\n        );\n        if (dep) {\n          deps.push(dep);\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.stack?.startsWith('YAMLException:')) {\n      logger.debug(\n        { err, packageFile },\n        'YAML exception extracting GitLab CI includes',\n      );\n    } else {\n      logger.debug(\n        { err, packageFile },\n        'Error extracting GitLab CI dependencies',\n      );\n    }\n  }\n\n  return deps.length ? { deps } : null;\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[],\n): Promise<PackageFile[] | null> {\n  const filesToExamine = [...packageFiles];\n  const seen = new Set<string>(packageFiles);\n  const results: PackageFile[] = [];\n\n  // extract all includes from the files\n  while (filesToExamine.length > 0) {\n    const file = filesToExamine.pop()!;\n\n    const content = await readLocalFile(file, 'utf8');\n    if (!content) {\n      logger.debug(\n        { packageFile: file },\n        `Empty or non existent gitlabci file`,\n      );\n      continue;\n    }\n    let docs: GitlabPipeline[];\n    try {\n      // TODO: use schema (#9610)\n      docs = parseYaml(replaceReferenceTags(content), null, {\n        json: true,\n      });\n    } catch (err) {\n      logger.debug(\n        { err, packageFile: file },\n        'Error extracting GitLab CI dependencies',\n      );\n      continue;\n    }\n\n    for (const doc of docs) {\n      if (is.array(doc?.include)) {\n        for (const includeObj of doc.include.filter(isGitlabIncludeLocal)) {\n          const fileObj = trimLeadingSlash(includeObj.local);\n          if (!seen.has(fileObj)) {\n            seen.add(fileObj);\n            filesToExamine.push(fileObj);\n          }\n        }\n      } else if (is.string(doc?.include)) {\n        const fileObj = trimLeadingSlash(doc.include);\n        if (!seen.has(fileObj)) {\n          seen.add(fileObj);\n          filesToExamine.push(fileObj);\n        }\n      }\n    }\n\n    const result = extractPackageFile(content, file, config);\n    if (result !== null) {\n      results.push({\n        packageFile: file,\n        deps: result.deps,\n      });\n    }\n  }\n\n  logger.trace(\n    { packageFiles, files: filesToExamine.entries() },\n    'extracted all GitLab CI files',\n  );\n\n  if (!results.length) {\n    return null;\n  }\n\n  return results;\n}\n"]}