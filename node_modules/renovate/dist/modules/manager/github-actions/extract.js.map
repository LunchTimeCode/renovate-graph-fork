{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/github-actions/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { isNotNullOrUndefined } from '../../../util/array';\nimport { detectPlatform } from '../../../util/common';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { GiteaTagsDatasource } from '../../datasource/gitea-tags';\nimport { GithubRunnersDatasource } from '../../datasource/github-runners';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport * as dockerVersioning from '../../versioning/docker';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport type { Workflow } from './types';\n\nconst dockerActionRe = regEx(/^\\s+uses\\s*: ['\"]?docker:\\/\\/([^'\"]+)\\s*$/);\nconst actionRe = regEx(\n  /^\\s+-?\\s+?uses\\s*: (?<replaceString>['\"]?(?<registryUrl>https:\\/\\/[.\\w-]+\\/)?(?<depName>[\\w-]+\\/[.\\w-]+)(?<path>\\/.*)?@(?<currentValue>[^\\s'\"]+)['\"]?(?:\\s+#\\s*(((?:renovate\\s*:\\s*)?(?:pin\\s+|tag\\s*=\\s*)?|(?:ratchet:[\\w-]+\\/[.\\w-]+)?)@?(?<tag>([\\w-]*-)?v?\\d+(?:\\.\\d+(?:\\.\\d+)?)?)|(?:ratchet:exclude)))?)/,\n);\n\n// SHA1 or SHA256, see https://github.blog/2020-10-19-git-2-29-released/\nconst shaRe = regEx(/^(?:[a-f0-9]{40}|[a-f0-9]{64})$/);\nconst shaShortRe = regEx(/^[a-f0-9]{6,7}$/);\n\n// detects if we run against a Github Enterprise Server and adds the URL to the beginning of the registryURLs for looking up Actions\n// This reflects the behavior of how GitHub looks up Actions\n// First on the Enterprise Server, then on GitHub.com\nfunction detectCustomGitHubRegistryUrlsForActions(): PackageDependency {\n  const endpoint = GlobalConfig.get('endpoint');\n  const registryUrls = ['https://github.com'];\n  if (endpoint && GlobalConfig.get('platform') === 'github') {\n    const parsedEndpoint = new URL(endpoint);\n\n    if (\n      parsedEndpoint.host !== 'github.com' &&\n      parsedEndpoint.host !== 'api.github.com'\n    ) {\n      registryUrls.unshift(\n        `${parsedEndpoint.protocol}//${parsedEndpoint.host}`,\n      );\n      return { registryUrls };\n    }\n  }\n  return {};\n}\n\nfunction extractWithRegex(content: string): PackageDependency[] {\n  const customRegistryUrlsPackageDependency =\n    detectCustomGitHubRegistryUrlsForActions();\n  logger.trace('github-actions.extractWithRegex()');\n  const deps: PackageDependency[] = [];\n  for (const line of content.split(newlineRegex)) {\n    if (line.trim().startsWith('#')) {\n      continue;\n    }\n\n    const dockerMatch = dockerActionRe.exec(line);\n    if (dockerMatch) {\n      const [, currentFrom] = dockerMatch;\n      const dep = getDep(currentFrom);\n      dep.depType = 'docker';\n      deps.push(dep);\n      continue;\n    }\n\n    const tagMatch = actionRe.exec(line);\n    if (tagMatch?.groups) {\n      const {\n        depName,\n        currentValue,\n        path = '',\n        tag,\n        replaceString,\n        registryUrl = '',\n      } = tagMatch.groups;\n      let quotes = '';\n      if (replaceString.indexOf(\"'\") >= 0) {\n        quotes = \"'\";\n      }\n      if (replaceString.indexOf('\"') >= 0) {\n        quotes = '\"';\n      }\n      const dep: PackageDependency = {\n        depName,\n        commitMessageTopic: '{{{depName}}} action',\n        datasource: GithubTagsDatasource.id,\n        versioning: dockerVersioning.id,\n        depType: 'action',\n        replaceString,\n        autoReplaceStringTemplate: `${quotes}${registryUrl}{{depName}}${path}@{{#if newDigest}}{{newDigest}}${quotes}{{#if newValue}} # {{newValue}}{{/if}}{{/if}}{{#unless newDigest}}{{newValue}}${quotes}{{/unless}}`,\n        ...(registryUrl\n          ? detectDatasource(registryUrl)\n          : customRegistryUrlsPackageDependency),\n      };\n      if (shaRe.test(currentValue)) {\n        dep.currentValue = tag;\n        dep.currentDigest = currentValue;\n      } else if (shaShortRe.test(currentValue)) {\n        dep.currentValue = tag;\n        dep.currentDigestShort = currentValue;\n      } else {\n        dep.currentValue = currentValue;\n      }\n      deps.push(dep);\n    }\n  }\n  return deps;\n}\n\nfunction detectDatasource(registryUrl: string): PackageDependency {\n  const platform = detectPlatform(registryUrl);\n\n  switch (platform) {\n    case 'github':\n      return { registryUrls: [registryUrl] };\n    case 'gitea':\n      return {\n        registryUrls: [registryUrl],\n        datasource: GiteaTagsDatasource.id,\n      };\n  }\n\n  return {\n    skipReason: 'unsupported-url',\n  };\n}\n\nfunction extractContainer(container: unknown): PackageDependency | undefined {\n  if (is.string(container)) {\n    return getDep(container);\n  } else if (is.plainObject(container) && is.string(container.image)) {\n    return getDep(container.image);\n  }\n  return undefined;\n}\n\nconst runnerVersionRegex = regEx(\n  /^\\s*(?<depName>[a-zA-Z]+)-(?<currentValue>[^\\s]+)/,\n);\n\nfunction extractRunner(runner: string): PackageDependency | null {\n  const runnerVersionGroups = runnerVersionRegex.exec(runner)?.groups;\n  if (!runnerVersionGroups) {\n    return null;\n  }\n\n  const { depName, currentValue } = runnerVersionGroups;\n\n  if (!GithubRunnersDatasource.isValidRunner(depName, currentValue)) {\n    return null;\n  }\n\n  const dependency: PackageDependency = {\n    depName,\n    currentValue,\n    replaceString: `${depName}-${currentValue}`,\n    depType: 'github-runner',\n    datasource: GithubRunnersDatasource.id,\n    autoReplaceStringTemplate: '{{depName}}-{{newValue}}',\n  };\n\n  if (!dockerVersioning.api.isValid(currentValue)) {\n    dependency.skipReason = 'invalid-version';\n  }\n\n  return dependency;\n}\n\nfunction extractRunners(runner: unknown): PackageDependency[] {\n  const runners: string[] = [];\n  if (is.string(runner)) {\n    runners.push(runner);\n  } else if (is.array(runner, is.string)) {\n    runners.push(...runner);\n  }\n\n  return runners.map(extractRunner).filter(isNotNullOrUndefined);\n}\n\nfunction extractWithYAMLParser(\n  content: string,\n  packageFile: string,\n): PackageDependency[] {\n  logger.trace('github-actions.extractWithYAMLParser()');\n  const deps: PackageDependency[] = [];\n\n  let pkg: Workflow;\n  try {\n    // TODO: use schema (#9610)\n    pkg = parseSingleYaml(content, { json: true });\n  } catch (err) {\n    logger.debug(\n      { packageFile, err },\n      'Failed to parse GitHub Actions Workflow YAML',\n    );\n    return [];\n  }\n\n  for (const job of Object.values(pkg?.jobs ?? {})) {\n    const dep = extractContainer(job?.container);\n    if (dep) {\n      dep.depType = 'container';\n      deps.push(dep);\n    }\n\n    for (const service of Object.values(job?.services ?? {})) {\n      const dep = extractContainer(service);\n      if (dep) {\n        dep.depType = 'service';\n        deps.push(dep);\n      }\n    }\n\n    deps.push(...extractRunners(job?.['runs-on']));\n  }\n\n  return deps;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): PackageFileContent | null {\n  logger.trace(`github-actions.extractPackageFile(${packageFile})`);\n  const deps = [\n    ...extractWithRegex(content),\n    ...extractWithYAMLParser(content, packageFile),\n  ];\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}