{"version":3,"file":"rules.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/post-update/rules.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,+EAAyD;AACzD,kDAA+C;AAC/C,oDAAmD;AACnD,8CAAiD;AAOjD,SAAgB,gBAAgB;IAC9B,IAAI,mBAAwB,CAAC;IAE7B,oEAAoE;IACpE,MAAM,sBAAsB,GAAG,EAAE,CAAC;IAClC,MAAM,YAAY,GAAG,SAAS,CAAC,OAAO,CAAC;QACrC,QAAQ,EAAE,KAAK;KAChB,CAAC,CAAC;IACH,KAAK,MAAM,QAAQ,IAAI,YAAY,EAAE,CAAC;QACpC,IAAI,QAAQ,CAAC,YAAY,EAAE,CAAC;YAC1B,IAAI,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC;YAC7B,GAAG;gBACD,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAA,eAAS,EAAC,GAAG,CAAC;oBAC9B,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,UAAU,CAAC,EAAE,EAAE,CAAC;oBACpC,CAAC,CAAC,uBAAuB;wBACvB,KAAK,GAAG,GAAG,CAAC;YAClB,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACnB,MAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC;gBACnE,sBAAsB,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC/D,mBAAmB,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC;gBAC9C,IAAI,QAAQ,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;oBAClC,mBAAmB,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG;wBACvC,YAAY,EAAE,QAAQ,CAAC,KAAK;qBAC7B,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,mBAAmB,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG;wBACvC,YAAY,EAAE,QAAQ,CAAC,KAAK;qBAC7B,CAAC;gBACJ,CAAC;YACH,CAAC;iBAAM,IAAI,YAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,YAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACxE,MAAM,QAAQ,GAAG,IAAA,iBAAQ,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAC7C,sBAAsB,CAAC,IAAI,CAAC,GAAG,GAAG,aAAa,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACpE,sBAAsB,CAAC,IAAI,CAAC,GAAG,GAAG,cAAc,QAAQ,EAAE,CAAC,CAAC;gBAC5D,mBAAmB,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC;gBAC9C,mBAAmB,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG;oBACvC,YAAY,EAAE,GAAG,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE;iBAC1D,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,CAAC;AACzD,CAAC;AAzCD,4CAyCC","sourcesContent":["import is from '@sindresorhus/is';\nimport * as hostRules from '../../../../util/host-rules';\nimport { regEx } from '../../../../util/regex';\nimport { toBase64 } from '../../../../util/string';\nimport { isHttpUrl } from '../../../../util/url';\n\nexport interface HostRulesResult {\n  additionalNpmrcContent: string[];\n  additionalYarnRcYml?: any;\n}\n\nexport function processHostRules(): HostRulesResult {\n  let additionalYarnRcYml: any;\n\n  // Determine the additional npmrc content to add based on host rules\n  const additionalNpmrcContent = [];\n  const npmHostRules = hostRules.findAll({\n    hostType: 'npm',\n  });\n  for (const hostRule of npmHostRules) {\n    if (hostRule.resolvedHost) {\n      let uri = hostRule.matchHost;\n      uri =\n        is.string(uri) && isHttpUrl(uri)\n          ? uri.replace(regEx(/^https?:/), '')\n          : // TODO: types (#22198)\n            `//${uri}/`;\n      if (hostRule.token) {\n        const key = hostRule.authType === 'Basic' ? '_auth' : '_authToken';\n        additionalNpmrcContent.push(`${uri}:${key}=${hostRule.token}`);\n        additionalYarnRcYml ||= { npmRegistries: {} };\n        if (hostRule.authType === 'Basic') {\n          additionalYarnRcYml.npmRegistries[uri] = {\n            npmAuthIdent: hostRule.token,\n          };\n        } else {\n          additionalYarnRcYml.npmRegistries[uri] = {\n            npmAuthToken: hostRule.token,\n          };\n        }\n      } else if (is.string(hostRule.username) && is.string(hostRule.password)) {\n        const password = toBase64(hostRule.password);\n        additionalNpmrcContent.push(`${uri}:username=${hostRule.username}`);\n        additionalNpmrcContent.push(`${uri}:_password=${password}`);\n        additionalYarnRcYml ||= { npmRegistries: {} };\n        additionalYarnRcYml.npmRegistries[uri] = {\n          npmAuthIdent: `${hostRule.username}:${hostRule.password}`,\n        };\n      }\n    }\n  }\n  return { additionalNpmrcContent, additionalYarnRcYml };\n}\n"]}