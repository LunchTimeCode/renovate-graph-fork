{"version":3,"file":"global-manifest.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/nuget/extract/global-manifest.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAC5C,uEAA6E;AAC7E,qDAA4D;AAO5D,kCAA0C;AAE1C,SAAgB,4BAA4B,CAC1C,OAAe,EACf,WAAmB,EACnB,UAAkC;IAElC,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI,QAA+B,CAAC;IACpC,IAAI,oBAAwD,CAAC;IAC7D,IAAI,CAAC;QACH,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,cAAc,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC;QACxD,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,sCAAsC,CAAC,CAAC;QACtE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC;YACR,OAAO,EAAE,YAAY;YACrB,OAAO,EAAE,YAAY;YACrB,YAAY,EAAE,QAAQ,CAAC,GAAG,EAAE,OAAO;YACnC,UAAU,EAAE,wCAAuB,CAAC,EAAE;SACvC,CAAC,CAAC;QAEH,oBAAoB,GAAG,EAAE,YAAY,EAAE,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC;IACjE,CAAC;IAED,IAAI,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;QAC7B,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC;YAC5D,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC;YACvD,MAAM,GAAG,GAA2B;gBAClC,OAAO,EAAE,aAAa;gBACtB,OAAO;gBACP,YAAY;gBACZ,UAAU,EAAE,uBAAe,CAAC,EAAE;aAC/B,CAAC;YAEF,IAAA,sBAAe,EAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAEjC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,GAAG,CAAC,oBAAoB,IAAI,EAAE,oBAAoB,EAAE,CAAC,EAAE,CAAC;AACzE,CAAC;AAhDD,oEAgDC","sourcesContent":["import { logger } from '../../../../logger';\nimport { DotnetVersionDatasource } from '../../../datasource/dotnet-version';\nimport { NugetDatasource } from '../../../datasource/nuget';\nimport type { PackageDependency, PackageFileContent } from '../../types';\nimport type {\n  MsbuildGlobalManifest,\n  NugetPackageDependency,\n  Registry,\n} from '../types';\nimport { applyRegistries } from '../util';\n\nexport function extractMsbuildGlobalManifest(\n  content: string,\n  packageFile: string,\n  registries: Registry[] | undefined,\n): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n  let manifest: MsbuildGlobalManifest;\n  let extractedConstraints: Record<string, string> | undefined;\n  try {\n    manifest = JSON.parse(content);\n  } catch (err) {\n    logger.debug({ packageFile }, `Invalid JSON`);\n    return null;\n  }\n\n  if (!manifest['msbuild-sdks'] && !manifest.sdk?.version) {\n    logger.debug({ packageFile }, 'This global.json is not a Nuget file');\n    return null;\n  }\n\n  if (manifest.sdk?.version) {\n    deps.push({\n      depType: 'dotnet-sdk',\n      depName: 'dotnet-sdk',\n      currentValue: manifest.sdk?.version,\n      datasource: DotnetVersionDatasource.id,\n    });\n\n    extractedConstraints = { 'dotnet-sdk': manifest.sdk?.version };\n  }\n\n  if (manifest['msbuild-sdks']) {\n    for (const depName of Object.keys(manifest['msbuild-sdks'])) {\n      const currentValue = manifest['msbuild-sdks'][depName];\n      const dep: NugetPackageDependency = {\n        depType: 'msbuild-sdk',\n        depName,\n        currentValue,\n        datasource: NugetDatasource.id,\n      };\n\n      applyRegistries(dep, registries);\n\n      deps.push(dep);\n    }\n  }\n\n  return { deps, ...(extractedConstraints && { extractedConstraints }) };\n}\n"]}