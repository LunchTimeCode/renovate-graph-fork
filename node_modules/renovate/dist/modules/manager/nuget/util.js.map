{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nuget/util.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,mCAAiD;AACjD,4CAAyC;AACzC,yCAA8D;AAC9D,uDAAoD;AACpD,+CAA4C;AAC5C,kDAAkD;AAG3C,KAAK,UAAU,qBAAqB,CACzC,IAAY;IAEZ,IAAI,CAAC;QACH,cAAc;QACd,MAAM,GAAG,GAAG,IAAI,oBAAW,CAAC,CAAC,MAAM,IAAA,kBAAa,EAAC,IAAI,EAAE,MAAM,CAAC,CAAE,CAAC,CAAC;QAClE,+BAA+B;QAC/B,OAAO,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;IAC3C,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,sCAAsC,CAAC,CAAC;QACpE,OAAO,SAAS,CAAC;IACnB,CAAC;AACH,CAAC;AAZD,sDAYC;AAED;;;GAGG;AACH,SAAgB,oBAAoB;IAClC,OAAO,CAAC,EAAE,GAAG,EAAE,gBAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;AAChD,CAAC;AAFD,oDAEC;AAEM,KAAK,UAAU,uBAAuB,CAC3C,WAAmB;IAEnB,8KAA8K;IAC9K,MAAM,oBAAoB,GAAG,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;IAC9E,qFAAqF;IACrF,MAAM,eAAe,GAAG,MAAM,IAAA,gBAAW,EACvC,oBAAoB,EACpB,eAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAC3B,CAAC;IACF,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,eAAM,CAAC,KAAK,CAAC,yBAAyB,eAAe,EAAE,CAAC,CAAC;IACzD,MAAM,WAAW,GAAG,MAAM,qBAAqB,CAAC,eAAe,CAAC,CAAC;IAEjE,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,cAAc,GAAG,WAAW,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAChE,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,oBAAoB,GAAG,WAAW,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;IAE5E,MAAM,UAAU,GAAG,oBAAoB,EAAE,CAAC;IAE1C,oEAAoE;IACpE,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;QAClC,MAAM,2BAA2B,GAAG,oBAAoB;YACtD,EAAE,kBAAkB,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC;YAC1C,EAAE,aAAa,CAAC,SAAS,CAAC;aACzB,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAE3D,QAAQ,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;IACrE,CAAC;IAED,KAAK,MAAM,KAAK,IAAI,cAAc,CAAC,QAAQ,EAAE,CAAC;QAC5C,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;gBAC3B,eAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;gBACvC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;YACxB,CAAC;iBAAM,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;gBAChC,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,eAAe,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChE,IAAI,SAAS,EAAE,CAAC;oBACd,IAAI,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;oBACnC,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;wBAC/B,WAAW,IAAI,oBAAoB,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;oBAClE,CAAC;oBACD,MAAM,2BAA2B,GAAG,oBAAoB;wBACtD,EAAE,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3C,EAAE,aAAa,CAAC,SAAS,CAAC;yBACzB,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBAE3D,eAAM,CAAC,KAAK,CACV;wBACE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG;wBACpB,WAAW;wBACX,2BAA2B;qBAC5B,EACD,uBAAuB,WAAW,EAAE,CACrC,CAAC;oBAEF,UAAU,CAAC,IAAI,CAAC;wBACd,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG;wBACpB,GAAG,EAAE,WAAW;wBAChB,2BAA2B;qBAC5B,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EACjC,6BAA6B,CAC9B,CAAC;gBACJ,CAAC;YACH,CAAC;YACD,wCAAwC;QAC1C,CAAC;IACH,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAlFD,0DAkFC;AAED,SAAgB,WAAW,CAAC,SAAsB;IAChD,KAAK,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,EAAE,CAAC;QAC/C,KAAK,MAAM,MAAM,IAAI,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,CAAC;YAC9D,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC/C,OAAO,MAAM,CAAC;YAChB,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AATD,kCASC;AAED,SAAgB,eAAe,CAC7B,GAA2B,EAC3B,UAAkC;IAElC,IAAI,UAAU,EAAE,CAAC;QACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,2BAA2B,CAAC,EAAE,CAAC;YAC/D,GAAG,CAAC,YAAY,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACpD,OAAO,GAAG,CAAC;QACb,CAAC;QAED,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC;QACrE,MAAM,GAAG,GAAG,IAAI,GAAG,CACjB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CACxE,CAAC;QACF,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAE5B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,KAAK,MAAM,OAAO,IAAI,GAAG,CAAC,2BAA4B,EAAE,CAAC;gBACvD,GAAG,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;QAED,MAAM,IAAI,GAAa,EAAE,CAAC;QAE1B,KAAK,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YAC1D,IAAI,IAAA,qBAAS,EAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;gBACxD,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACrC,MAAM;YACR,CAAC;QACH,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC;QAC1B,CAAC;IACH,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AApCD,0CAoCC;AAED;;;;GAIG;AACH,SAAS,YAAY,CACnB,CAAuB,EACvB,CAAuB;IAEvB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QAC9C,OAAO,CAAC,CAAC;IACX,CAAC;IAED,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QAC9C,OAAO,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import upath from 'upath';\nimport { XmlDocument, XmlElement } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport { findUpLocal, readLocalFile } from '../../../util/fs';\nimport { minimatch } from '../../../util/minimatch';\nimport { regEx } from '../../../util/regex';\nimport { nugetOrg } from '../../datasource/nuget';\nimport type { NugetPackageDependency, Registry } from './types';\n\nexport async function readFileAsXmlDocument(\n  file: string,\n): Promise<XmlDocument | undefined> {\n  try {\n    // TODO #22198\n    const doc = new XmlDocument((await readLocalFile(file, 'utf8'))!);\n    // don't return empty documents\n    return doc?.firstChild ? doc : undefined;\n  } catch (err) {\n    logger.debug({ err, file }, `failed to parse file as XML document`);\n    return undefined;\n  }\n}\n\n/**\n * The default `nuget.org` named registry.\n * @returns the default registry for NuGet\n */\nexport function getDefaultRegistries(): Registry[] {\n  return [{ url: nugetOrg, name: 'nuget.org' }];\n}\n\nexport async function getConfiguredRegistries(\n  packageFile: string,\n): Promise<Registry[] | undefined> {\n  // Valid file names taken from https://github.com/NuGet/NuGet.Client/blob/f64621487c0b454eda4b98af853bf4a528bef72a/src/NuGet.Core/NuGet.Configuration/Settings/Settings.cs#L34\n  const nuGetConfigFileNames = ['nuget.config', 'NuGet.config', 'NuGet.Config'];\n  // normalize paths, otherwise startsWith can fail because of path delimitter mismatch\n  const nuGetConfigPath = await findUpLocal(\n    nuGetConfigFileNames,\n    upath.dirname(packageFile),\n  );\n  if (!nuGetConfigPath) {\n    return undefined;\n  }\n\n  logger.debug(`Found NuGet.config at ${nuGetConfigPath}`);\n  const nuGetConfig = await readFileAsXmlDocument(nuGetConfigPath);\n\n  if (!nuGetConfig) {\n    return undefined;\n  }\n\n  const packageSources = nuGetConfig.childNamed('packageSources');\n  if (!packageSources) {\n    return undefined;\n  }\n\n  const packageSourceMapping = nuGetConfig.childNamed('packageSourceMapping');\n\n  const registries = getDefaultRegistries();\n\n  // Map optional source mapped package patterns to default registries\n  for (const registry of registries) {\n    const sourceMappedPackagePatterns = packageSourceMapping\n      ?.childWithAttribute('key', registry.name)\n      ?.childrenNamed('package')\n      .map((packagePattern) => packagePattern.attr['pattern']);\n\n    registry.sourceMappedPackagePatterns = sourceMappedPackagePatterns;\n  }\n\n  for (const child of packageSources.children) {\n    if (child.type === 'element') {\n      if (child.name === 'clear') {\n        logger.debug(`clearing registry URLs`);\n        registries.length = 0;\n      } else if (child.name === 'add') {\n        const isHttpUrl = regEx(/^https?:\\/\\//i).test(child.attr.value);\n        if (isHttpUrl) {\n          let registryUrl = child.attr.value;\n          if (child.attr.protocolVersion) {\n            registryUrl += `#protocolVersion=${child.attr.protocolVersion}`;\n          }\n          const sourceMappedPackagePatterns = packageSourceMapping\n            ?.childWithAttribute('key', child.attr.key)\n            ?.childrenNamed('package')\n            .map((packagePattern) => packagePattern.attr['pattern']);\n\n          logger.debug(\n            {\n              name: child.attr.key,\n              registryUrl,\n              sourceMappedPackagePatterns,\n            },\n            `Adding registry URL ${registryUrl}`,\n          );\n\n          registries.push({\n            name: child.attr.key,\n            url: registryUrl,\n            sourceMappedPackagePatterns,\n          });\n        } else {\n          logger.debug(\n            { registryUrl: child.attr.value },\n            'ignoring local registry URL',\n          );\n        }\n      }\n      // child.name === 'remove' not supported\n    }\n  }\n  return registries;\n}\n\nexport function findVersion(parsedXml: XmlDocument): XmlElement | null {\n  for (const tag of ['Version', 'VersionPrefix']) {\n    for (const l1Elem of parsedXml.childrenNamed('PropertyGroup')) {\n      for (const l2Elem of l1Elem.childrenNamed(tag)) {\n        return l2Elem;\n      }\n    }\n  }\n  return null;\n}\n\nexport function applyRegistries(\n  dep: NugetPackageDependency,\n  registries: Registry[] | undefined,\n): NugetPackageDependency {\n  if (registries) {\n    if (!registries.some((reg) => reg.sourceMappedPackagePatterns)) {\n      dep.registryUrls = registries.map((reg) => reg.url);\n      return dep;\n    }\n\n    const regs = registries.filter((r) => r.sourceMappedPackagePatterns);\n    const map = new Map<string, Registry[]>(\n      regs.flatMap((r) => r.sourceMappedPackagePatterns!.map((p) => [p, []])),\n    );\n    const depName = dep.depName;\n\n    for (const reg of regs) {\n      for (const pattern of reg.sourceMappedPackagePatterns!) {\n        map.get(pattern)!.push(reg);\n      }\n    }\n\n    const urls: string[] = [];\n\n    for (const [pattern, regs] of [...map].sort(sortPatterns)) {\n      if (minimatch(pattern, { nocase: true }).match(depName)) {\n        urls.push(...regs.map((r) => r.url));\n        break;\n      }\n    }\n\n    if (urls.length) {\n      dep.registryUrls = urls;\n    }\n  }\n  return dep;\n}\n\n/*\n * Sorts patterns by specificity:\n * 1. Exact match patterns\n * 2. Wildcard match patterns\n */\nfunction sortPatterns(\n  a: [string, Registry[]],\n  b: [string, Registry[]],\n): number {\n  if (a[0].endsWith('*') && !b[0].endsWith('*')) {\n    return 1;\n  }\n\n  if (!a[0].endsWith('*') && b[0].endsWith('*')) {\n    return -1;\n  }\n\n  return a[0].localeCompare(b[0]) * -1;\n}\n"]}