{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gomod/update.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: types (#22198)\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { UpdateDependencyConfig } from '../types';\n\nfunction getDepNameWithNoVersion(depName: string): string {\n  let depNameNoVersion = depName.split('/').slice(0, 3).join('/');\n  if (depNameNoVersion.startsWith('gopkg.in')) {\n    depNameNoVersion = depNameNoVersion.replace(regEx(/\\.v\\d+$/), '');\n  }\n  return depNameNoVersion;\n}\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string | null {\n  try {\n    logger.debug(`gomod.updateDependency: ${upgrade.newValue}`);\n    const { depName, depType, updateType } = upgrade;\n    if (updateType === 'replacement') {\n      logger.warn('gomod manager does not support replacement updates yet');\n      return null;\n    }\n    // istanbul ignore if: should never happen\n    if (!depName || !upgrade.managerData) {\n      return null;\n    }\n    const depNameNoVersion = getDepNameWithNoVersion(depName);\n    const lines = fileContent.split(newlineRegex);\n    // istanbul ignore if: hard to test\n    if (lines.length <= upgrade.managerData.lineNumber) {\n      logger.warn('go.mod current line no longer exists after update');\n      return null;\n    }\n    const lineToChange = lines[upgrade.managerData.lineNumber];\n    logger.trace({ upgrade, lineToChange }, 'go.mod current line');\n    if (\n      !lineToChange.includes(depNameNoVersion) &&\n      !lineToChange.includes('rethinkdb/rethinkdb-go.v5')\n    ) {\n      logger.debug(\n        { lineToChange, depName },\n        \"go.mod current line doesn't contain dependency\",\n      );\n      return null;\n    }\n    let updateLineExp: RegExp | undefined;\n\n    if (depType === 'golang' || depType === 'toolchain') {\n      updateLineExp = regEx(\n        /(?<depPart>(?:toolchain )?go)(?<divider>\\s*)([^\\s]+|[\\w]+)/,\n      );\n    }\n    if (depType === 'replace') {\n      if (upgrade.managerData.multiLine) {\n        updateLineExp = regEx(\n          /^(?<depPart>\\s+[^\\s]+[\\s]+[=][>]+\\s+)(?<divider>[^\\s]+\\s+)[^\\s]+/,\n        );\n      } else {\n        updateLineExp = regEx(\n          /^(?<depPart>replace\\s+[^\\s]+[\\s]+[=][>]+\\s+)(?<divider>[^\\s]+\\s+)[^\\s]+/,\n        );\n      }\n    } else if (depType === 'require' || depType === 'indirect') {\n      if (upgrade.managerData.multiLine) {\n        updateLineExp = regEx(/^(?<depPart>\\s+[^\\s]+)(?<divider>\\s+)[^\\s]+/);\n      } else {\n        updateLineExp = regEx(\n          /^(?<depPart>require\\s+[^\\s]+)(?<divider>\\s+)[^\\s]+/,\n        );\n      }\n    }\n    if (updateLineExp && !updateLineExp.test(lineToChange)) {\n      logger.debug('No line found to update');\n      return null;\n    }\n    let newLine: string;\n    if (upgrade.updateType === 'digest') {\n      const newDigestRightSized = upgrade.newDigest!.substring(\n        0,\n        upgrade.currentDigest!.length,\n      );\n      if (lineToChange.includes(newDigestRightSized)) {\n        return fileContent;\n      }\n      logger.debug(\n        { depName, lineToChange, newDigestRightSized },\n        'gomod: need to update digest',\n      );\n      newLine = lineToChange.replace(\n        // TODO: can be undefined? (#22198)\n        updateLineExp!,\n        `$<depPart>$<divider>${newDigestRightSized}`,\n      );\n    } else {\n      newLine = lineToChange.replace(\n        // TODO: can be undefined? (#22198)\n        updateLineExp!,\n        `$<depPart>$<divider>${upgrade.newValue}`,\n      );\n    }\n    if (upgrade.updateType === 'major') {\n      logger.debug(`gomod: major update for ${depName}`);\n      if (depName.startsWith('gopkg.in/')) {\n        const oldV = depName.split('.').pop();\n        newLine = newLine.replace(`.${oldV}`, `.v${upgrade.newMajor}`);\n        // Package renames - I couldn't think of a better place to do this\n        newLine = newLine.replace(\n          'gorethink/gorethink.v5',\n          'rethinkdb/rethinkdb-go.v5',\n        );\n      } else if (\n        upgrade.newMajor! > 1 &&\n        !newLine.includes(`/v${upgrade.newMajor}`) &&\n        !upgrade.newValue!.endsWith('+incompatible')\n      ) {\n        if (depName === depNameNoVersion) {\n          // If package currently has no version, pin to latest one.\n          newLine = newLine.replace(depName, `${depName}/v${upgrade.newMajor}`);\n        } else {\n          // Replace version\n          const [oldV] = upgrade.currentValue!.split('.');\n          newLine = newLine.replace(\n            regEx(`/${oldV}(\\\\s+)`, undefined, false),\n            `/v${upgrade.newMajor}$1`,\n          );\n        }\n      }\n    }\n    if (\n      lineToChange.endsWith('+incompatible') &&\n      !upgrade.newValue?.endsWith('+incompatible')\n    ) {\n      let toAdd = '+incompatible';\n\n      if (upgrade.updateType === 'major' && upgrade.newMajor! >= 2) {\n        toAdd = '';\n      }\n      newLine += toAdd;\n    }\n    if (newLine === lineToChange) {\n      logger.debug('No changes necessary');\n      return fileContent;\n    }\n\n    if (depType === 'indirect') {\n      newLine = newLine.replace(\n        regEx(/\\s*(?:\\/\\/\\s*indirect(?:\\s*;)?\\s*)*$/),\n        ' // indirect',\n      );\n    }\n\n    lines[upgrade.managerData.lineNumber] = newLine;\n    return lines.join('\\n');\n  } catch (err) {\n    logger.debug({ err }, 'Error setting new go.mod version');\n    return null;\n  }\n}\n"]}