{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/crossplane/extract.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,6CAA+C;AAC/C,mDAA+C;AAM/C,qCAAiD;AAEjD,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,aAA6B;IAE7B,kGAAkG;IAClG,IAAI,CAAC,kDAAkD,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;QACtE,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,sCAAsC,CAAC,CAAC;QACtE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,IAAI,GAAW,EAAE,CAAC;IACtB,IAAI,CAAC;QACH,IAAI,GAAG,IAAA,gBAAS,EAAC,OAAO,EAAE,IAAI,EAAE;YAC9B,YAAY,EAAE,mBAAU;YACxB,gBAAgB,EAAE,QAAQ;SAC3B,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,WAAW,EAAE,EACpB,0CAA0C,CAC3C,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE,CAAC;QACxB,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;QAC5E,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC;AAjCD,gDAiCC","sourcesContent":["import { logger } from '../../../logger';\nimport { parseYaml } from '../../../util/yaml';\nimport { getDep } from '../dockerfile/extract';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { type XPKG, XPKGSchema } from './schema';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  extractConfig?: ExtractConfig,\n): PackageFileContent | null {\n  // avoid parsing the whole file if it doesn't contain any resource having any pkg.crossplane.io/v*\n  if (!/apiVersion:\\s+[\"']?pkg\\.crossplane\\.io\\/v.+[\"']?/.test(content)) {\n    logger.trace({ packageFile }, 'No Crossplane package found in file.');\n    return null;\n  }\n\n  let list: XPKG[] = [];\n  try {\n    list = parseYaml(content, null, {\n      customSchema: XPKGSchema,\n      failureBehaviour: 'filter',\n    });\n  } catch (err) {\n    logger.debug(\n      { err, packageFile },\n      'Failed to parse Crossplane package file.',\n    );\n    return null;\n  }\n\n  const deps: PackageDependency[] = [];\n  for (const xpkg of list) {\n    const dep = getDep(xpkg.spec.package, true, extractConfig?.registryAliases);\n    dep.depType = xpkg.kind.toLowerCase();\n    deps.push(dep);\n  }\n\n  return deps.length ? { deps } : null;\n}\n"]}