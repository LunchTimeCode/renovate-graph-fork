{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pep621/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAA8D;AAI9D,MAAM,oBAAoB,GAAG,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC5D,MAAM,sBAAsB,GAAG,OAAC;KAC7B,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC;KACvC,QAAQ,EAAE,CAAC;AAED,QAAA,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IACtC,OAAO,EAAE,OAAC;SACP,MAAM,CAAC;QACN,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC;QAC/C,iBAAiB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QACxC,YAAY,EAAE,oBAAoB;QAClC,uBAAuB,EAAE,sBAAsB;KAChD,CAAC;SACD,QAAQ,EAAE;IACb,cAAc,EAAE,OAAC;SACd,MAAM,CAAC;QACN,QAAQ,EAAE,oBAAoB;QAC9B,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KACvC,CAAC;SACD,QAAQ,EAAE;IACb,IAAI,EAAE,OAAC;SACJ,MAAM,CAAC;QACN,GAAG,EAAE,OAAC;aACH,MAAM,CAAC;YACN,kBAAkB,EAAE,sBAAsB;YAC1C,MAAM,EAAE,OAAC;iBACN,KAAK,CACJ,OAAC,CAAC,MAAM,CAAC;gBACP,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;gBACf,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;gBAChB,UAAU,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;aACnC,CAAC,CACH;iBACA,QAAQ,EAAE;SACd,CAAC;aACD,QAAQ,EAAE;QACb,KAAK,EAAE,OAAC;aACL,MAAM,CAAC;YACN,IAAI,EAAE,OAAC;iBACJ,MAAM,CACL,OAAC,CAAC,MAAM,EAAE,EACV,OAAC;iBACE,MAAM,CAAC;gBACN,YAAY,EAAE,oBAAoB;gBAClC,oBAAoB,EAAE,oBAAoB;aAC3C,CAAC;iBACD,QAAQ,EAAE,CACd;iBACA,QAAQ,EAAE;SACd,CAAC;aACD,QAAQ,EAAE;KACd,CAAC;SACD,QAAQ,EAAE;CACd,CAAC,CAAC;AAEU,QAAA,iBAAiB,GAAG,mBAAI,CAAC,IAAI,CACxC,OAAC,CAAC,MAAM,CAAC;IACP,OAAO,EAAE,IAAA,yBAAU,EACjB,OAAC,CAAC,MAAM,CAAC;QACP,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;QAChB,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;KACpB,CAAC,CACH;CACF,CAAC,CACH;KACE,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,CAC9B,MAAM,CAAC,WAAW,CAChB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAoB,EAAE,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAClE,CACF;KACA,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { LooseArray, Toml } from '../../../util/schema-utils';\n\nexport type PyProject = z.infer<typeof PyProjectSchema>;\n\nconst DependencyListSchema = z.array(z.string()).optional();\nconst DependencyRecordSchema = z\n  .record(z.string(), z.array(z.string()))\n  .optional();\n\nexport const PyProjectSchema = z.object({\n  project: z\n    .object({\n      version: z.string().optional().catch(undefined),\n      'requires-python': z.string().optional(),\n      dependencies: DependencyListSchema,\n      'optional-dependencies': DependencyRecordSchema,\n    })\n    .optional(),\n  'build-system': z\n    .object({\n      requires: DependencyListSchema,\n      'build-backend': z.string().optional(),\n    })\n    .optional(),\n  tool: z\n    .object({\n      pdm: z\n        .object({\n          'dev-dependencies': DependencyRecordSchema,\n          source: z\n            .array(\n              z.object({\n                url: z.string(),\n                name: z.string(),\n                verify_ssl: z.boolean().optional(),\n              }),\n            )\n            .optional(),\n        })\n        .optional(),\n      hatch: z\n        .object({\n          envs: z\n            .record(\n              z.string(),\n              z\n                .object({\n                  dependencies: DependencyListSchema,\n                  'extra-dependencies': DependencyListSchema,\n                })\n                .optional(),\n            )\n            .optional(),\n        })\n        .optional(),\n    })\n    .optional(),\n});\n\nexport const PdmLockfileSchema = Toml.pipe(\n  z.object({\n    package: LooseArray(\n      z.object({\n        name: z.string(),\n        version: z.string(),\n      }),\n    ),\n  }),\n)\n  .transform(({ package: pkg }) =>\n    Object.fromEntries(\n      pkg.map(({ name, version }): [string, string] => [name, version]),\n    ),\n  )\n  .transform((lock) => ({ lock }));\n"]}