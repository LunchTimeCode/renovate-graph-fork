{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pep621/extract.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AAMzC,6CAA0C;AAC1C,mCAKiB;AAEV,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,WAAmB,EACnB,OAAuB;IAEvB,eAAM,CAAC,KAAK,CAAC,6BAA6B,WAAW,GAAG,CAAC,CAAC;IAE1D,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,MAAM,GAAG,GAAG,IAAA,sBAAc,EAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACjD,IAAI,YAAE,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,kBAAkB,GAAG,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;IAChD,MAAM,gBAAgB,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAAC,CAAC;IAC1D,MAAM,oBAAoB,GAAG,YAAE,CAAC,cAAc,CAAC,gBAAgB,CAAC;QAC9D,CAAC,CAAC,EAAE,oBAAoB,EAAE,EAAE,MAAM,EAAE,gBAAgB,EAAE,EAAE;QACxD,CAAC,CAAC,EAAE,CAAC;IAEP,iCAAiC;IACjC,IAAI,CAAC,IAAI,CACP,GAAG,IAAA,2BAAmB,EAAC,gBAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,CACzE,CAAC;IACF,IAAI,CAAC,IAAI,CACP,GAAG,IAAA,kCAA0B,EAC3B,gBAAQ,CAAC,oBAAoB,EAC7B,GAAG,CAAC,OAAO,EAAE,CAAC,uBAAuB,CAAC,CACvC,CACF,CAAC;IACF,IAAI,CAAC,IAAI,CACP,GAAG,IAAA,2BAAmB,EACpB,gBAAQ,CAAC,mBAAmB,EAC5B,GAAG,CAAC,cAAc,CAAC,EAAE,QAAQ,CAC9B,CACF,CAAC;IAEF,6BAA6B;IAC7B,IAAI,aAAa,GAAG,IAAI,CAAC;IACzB,KAAK,MAAM,SAAS,IAAI,uBAAU,EAAE,CAAC;QACnC,aAAa,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACtD,aAAa,GAAG,MAAM,SAAS,CAAC,qBAAqB,CACnD,GAAG,EACH,aAAa,EACb,WAAW,CACZ,CAAC;IACJ,CAAC;IAED,OAAO,aAAa,CAAC,MAAM;QACzB,CAAC,CAAC,EAAE,GAAG,oBAAoB,EAAE,IAAI,EAAE,aAAa,EAAE,kBAAkB,EAAE;QACtE,CAAC,CAAC,IAAI,CAAC;AACX,CAAC;AAnDD,gDAmDC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { processors } from './processors';\nimport {\n  depTypes,\n  parseDependencyGroupRecord,\n  parseDependencyList,\n  parsePyProject,\n} from './utils';\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  _config?: ExtractConfig,\n): Promise<PackageFileContent | null> {\n  logger.trace(`pep621.extractPackageFile(${packageFile})`);\n\n  const deps: PackageDependency[] = [];\n\n  const def = parsePyProject(packageFile, content);\n  if (is.nullOrUndefined(def)) {\n    return null;\n  }\n\n  const packageFileVersion = def.project?.version;\n  const pythonConstraint = def.project?.['requires-python'];\n  const extractedConstraints = is.nonEmptyString(pythonConstraint)\n    ? { extractedConstraints: { python: pythonConstraint } }\n    : {};\n\n  // pyProject standard definitions\n  deps.push(\n    ...parseDependencyList(depTypes.dependencies, def.project?.dependencies),\n  );\n  deps.push(\n    ...parseDependencyGroupRecord(\n      depTypes.optionalDependencies,\n      def.project?.['optional-dependencies'],\n    ),\n  );\n  deps.push(\n    ...parseDependencyList(\n      depTypes.buildSystemRequires,\n      def['build-system']?.requires,\n    ),\n  );\n\n  // process specific tool sets\n  let processedDeps = deps;\n  for (const processor of processors) {\n    processedDeps = processor.process(def, processedDeps);\n    processedDeps = await processor.extractLockedVersions(\n      def,\n      processedDeps,\n      packageFile,\n    );\n  }\n\n  return processedDeps.length\n    ? { ...extractedConstraints, deps: processedDeps, packageFileVersion }\n    : null;\n}\n"]}