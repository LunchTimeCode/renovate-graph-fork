{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../lib/modules/manager/maven/update.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport semver, { ReleaseType } from 'semver';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport { replaceAt } from '../../../util/string';\nimport type {\n  BumpPackageVersionResult,\n  UpdateDependencyConfig,\n  Upgrade,\n} from '../types';\n\nexport function updateAtPosition(\n  fileContent: string,\n  upgrade: Upgrade,\n  endingAnchor: string,\n): string | null {\n  const { depName, currentValue, newValue, fileReplacePosition } = upgrade;\n  const leftPart = fileContent.slice(0, fileReplacePosition);\n  const rightPart = fileContent.slice(fileReplacePosition);\n  const versionClosePosition = rightPart.indexOf(endingAnchor);\n  const restPart = rightPart.slice(versionClosePosition);\n  const versionPart = rightPart.slice(0, versionClosePosition);\n  const version = versionPart.trim();\n  if (version === newValue) {\n    return fileContent;\n  }\n  if (version === currentValue || upgrade.groupName) {\n    // TODO: validate newValue (#22198)\n    const replacedPart = versionPart.replace(version, newValue!);\n    return leftPart + replacedPart + restPart;\n  }\n  logger.debug({ depName, version, currentValue, newValue }, 'Unknown value');\n  return null;\n}\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string | null {\n  if (upgrade.updateType === 'replacement') {\n    logger.warn('maven manager does not support replacement updates yet');\n    return null;\n  }\n  const offset = fileContent.indexOf('<');\n  const spaces = fileContent.slice(0, offset);\n  const restContent = fileContent.slice(offset);\n  const updatedContent = updateAtPosition(restContent, upgrade, '</');\n  if (!updatedContent) {\n    return null;\n  }\n  if (updatedContent === restContent) {\n    return fileContent;\n  }\n  return `${spaces}${updatedContent}`;\n}\n\nexport function bumpPackageVersion(\n  content: string,\n  currentValue: string,\n  bumpVersion: ReleaseType,\n): BumpPackageVersionResult {\n  logger.debug(\n    { bumpVersion, currentValue },\n    'Checking if we should bump pom.xml version',\n  );\n  let bumpedContent = content;\n\n  if (!semver.valid(currentValue)) {\n    logger.warn(\n      { currentValue },\n      'Unable to bump pom.xml version, not a valid semver',\n    );\n    return { bumpedContent };\n  }\n\n  try {\n    const project = new XmlDocument(content);\n    const versionNode = project.childNamed('version')!;\n    const startTagPosition = versionNode.startTagPosition;\n    const versionPosition = content.indexOf(versionNode.val, startTagPosition);\n\n    let newPomVersion: string | null = null;\n    const currentPrereleaseValue = semver.prerelease(currentValue);\n    if (isSnapshot(currentPrereleaseValue)) {\n      // It is already a SNAPSHOT version.\n      // Therefore the same qualifier (prerelease) will be used as before.\n      let releaseType = bumpVersion;\n      if (!bumpVersion.startsWith('pre')) {\n        releaseType = `pre${bumpVersion}` as ReleaseType;\n      }\n      newPomVersion = semver.inc(\n        currentValue,\n        releaseType,\n        currentPrereleaseValue!.join('.'),\n        false,\n      );\n    } else if (currentPrereleaseValue) {\n      // Some qualifier which is not a SNAPSHOT is present.\n      // The expected behaviour in this case is unclear and the standard increase will be used.\n      newPomVersion = semver.inc(currentValue, bumpVersion);\n    } else {\n      // A release version without any qualifier is present.\n      // Therefore the SNAPSHOT qualifier will be added if a prerelease is requested.\n      // This will do a normal increment, ignoring SNAPSHOT, if a non-prerelease bumpVersion is configured\n      newPomVersion = semver.inc(currentValue, bumpVersion, 'SNAPSHOT', false);\n    }\n    if (!newPomVersion) {\n      throw new Error('semver inc failed');\n    }\n\n    logger.debug({ newPomVersion });\n    bumpedContent = replaceAt(\n      content,\n      versionPosition,\n      currentValue,\n      newPomVersion,\n    );\n\n    if (bumpedContent === content) {\n      logger.debug('Version was already bumped');\n    } else {\n      logger.debug('pom.xml version bumped');\n    }\n  } catch (err) {\n    logger.warn(\n      {\n        content,\n        currentValue,\n        bumpVersion,\n      },\n      'Failed to bumpVersion',\n    );\n  }\n  return { bumpedContent };\n}\n\nfunction isSnapshot(\n  prerelease: ReadonlyArray<string | number> | null,\n): boolean {\n  const lastPart = prerelease?.at(-1);\n  return is.string(lastPart) && lastPart.endsWith('SNAPSHOT');\n}\n"]}