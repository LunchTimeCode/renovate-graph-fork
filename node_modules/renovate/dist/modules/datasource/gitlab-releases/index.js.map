{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/gitlab-releases/index.ts"],"names":[],"mappings":";;;;AAAA,qEAA8D;AAC9D,sDAAuD;AACvD,8CAA2C;AAI3C,MAAa,wBAAyB,SAAQ,uBAAU;IACtD,MAAM,CAAU,EAAE,GAAG,iBAAiB,CAAC;IAErB,mBAAmB,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAE/D,MAAM,CAAU,gBAAgB,GAAG,OAAO,CAAC;IAEzB,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,kFAAkF,CAAC;IACnE,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,4EAA4E,CAAC;IAE/E;QACE,KAAK,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,mBAAU,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;IAC1D,CAAC;IAQK,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,qBAAqB;QACrB,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,cAAc,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACvD,MAAM,MAAM,GAAG,GAAG,WAAW,oBAAoB,cAAc,WAAW,CAAC;QAE3E,IAAI,CAAC;YACH,MAAM,sBAAsB,GAAG,CAC7B,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAkB,MAAM,CAAC,CACjD,CAAC,IAAI,CAAC;YAEP,OAAO;gBACL,SAAS,EAAE,GAAG,WAAW,IAAI,WAAW,EAAE;gBAC1C,QAAQ,EAAE,sBAAsB,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,EAAE,EAAE;oBACjE,MAAM,OAAO,GAAY;wBACvB,WAAW;wBACX,MAAM,EAAE,QAAQ;wBAChB,OAAO,EAAE,QAAQ;wBACjB,gBAAgB,EAAE,WAAW;qBAC9B,CAAC;oBACF,OAAO,OAAO,CAAC;gBACjB,CAAC,CAAC;aACH,CAAC;QACJ,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC;QACD,0BAA0B;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;;AA3DH,4DA4DC;AAnCO;IANL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,wBAAwB,CAAC,EAAE,EAAE;QACtD,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE;QACvD,uBAAuB;QACvB,GAAG,WAAW,IAAI,WAAW,EAAE;KAClC,CAAC;2DAmCD","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport type { GitlabRelease } from './types';\n\nexport class GitlabReleasesDatasource extends Datasource {\n  static readonly id = 'gitlab-releases';\n\n  override readonly defaultRegistryUrls = ['https://gitlab.com'];\n\n  static readonly registryStrategy = 'first';\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `released_at` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  constructor() {\n    super(GitlabReleasesDatasource.id);\n    this.http = new GitlabHttp(GitlabReleasesDatasource.id);\n  }\n\n  @cache({\n    namespace: `datasource-${GitlabReleasesDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `${registryUrl}/${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    const urlEncodedRepo = encodeURIComponent(packageName);\n    const apiUrl = `${registryUrl}/api/v4/projects/${urlEncodedRepo}/releases`;\n\n    try {\n      const gitlabReleasesResponse = (\n        await this.http.getJson<GitlabRelease[]>(apiUrl)\n      ).body;\n\n      return {\n        sourceUrl: `${registryUrl}/${packageName}`,\n        releases: gitlabReleasesResponse.map(({ tag_name, released_at }) => {\n          const release: Release = {\n            registryUrl,\n            gitRef: tag_name,\n            version: tag_name,\n            releaseTimestamp: released_at,\n          };\n          return release;\n        }),\n      };\n    } catch (e) {\n      this.handleGenericErrors(e);\n    }\n    /* istanbul ignore next */\n    return null;\n  }\n}\n"]}