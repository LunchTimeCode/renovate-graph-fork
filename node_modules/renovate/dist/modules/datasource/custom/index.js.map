{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/custom/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,8DAA8B;AAC9B,4CAAyC;AACzC,8CAA2C;AAE3C,uCAAqC;AACrC,qCAAkD;AAClD,mCAA0C;AAE1C,MAAa,gBAAiB,SAAQ,uBAAU;IAC9C,MAAM,CAAU,EAAE,GAAG,QAAQ,CAAC;IAErB,qBAAqB,GAAG,IAAI,CAAC;IAEtC;QACE,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,WAAW,CACf,iBAAoC;QAEpC,MAAM,MAAM,GAAG,IAAA,uBAAe,EAAC,iBAAiB,CAAC,CAAC;QAClD,IAAI,YAAE,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;YAC/B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,EAAE,0BAA0B,EAAE,kBAAkB,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;QAE1E,MAAM,OAAO,GAAG,kBAAQ,CAAC,MAAM,CAAC,CAAC;QACjC,MAAM,eAAe,GAAG,0BAA0B,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAEzE,IAAI,IAAa,CAAC;QAClB,IAAI,CAAC;YACH,IAAI,eAAe,EAAE,CAAC;gBACpB,IAAI,GAAG,MAAM,OAAO,CAAC,QAAQ,CAC3B,0BAA0B,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAClD,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,IAAI,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,EAAE,CAAC;YACnD,MAAM,UAAU,GAAG,IAAA,iBAAO,EAAC,iBAAiB,CAAC,CAAC;YAC9C,IAAI,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;QAED,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,+BAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAClD,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,gCAAgC,CAAC,CAAC;YACxD,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,qCAAqC,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAEQ,SAAS,CAChB,EAAE,WAAW,EAAgB,EAC7B,QAAiB;QAEjB,4FAA4F;QAC5F,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;;AAzDH,4CA0DC","sourcesContent":["import is from '@sindresorhus/is';\nimport jsonata from 'jsonata';\nimport { logger } from '../../../logger';\nimport { Datasource } from '../datasource';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport { fetchers } from './formats';\nimport { ReleaseResultZodSchema } from './schema';\nimport { getCustomConfig } from './utils';\n\nexport class CustomDatasource extends Datasource {\n  static readonly id = 'custom';\n\n  override customRegistrySupport = true;\n\n  constructor() {\n    super(CustomDatasource.id);\n  }\n\n  async getReleases(\n    getReleasesConfig: GetReleasesConfig,\n  ): Promise<ReleaseResult | null> {\n    const config = getCustomConfig(getReleasesConfig);\n    if (is.nullOrUndefined(config)) {\n      return null;\n    }\n\n    const { defaultRegistryUrlTemplate, transformTemplates, format } = config;\n\n    const fetcher = fetchers[format];\n    const isLocalRegistry = defaultRegistryUrlTemplate.startsWith('file://');\n\n    let data: unknown;\n    try {\n      if (isLocalRegistry) {\n        data = await fetcher.readFile(\n          defaultRegistryUrlTemplate.replace('file://', ''),\n        );\n      } else {\n        data = await fetcher.fetch(this.http, defaultRegistryUrlTemplate);\n      }\n    } catch (e) {\n      this.handleHttpErrors(e);\n      return null;\n    }\n\n    for (const transformTemplate of transformTemplates) {\n      const expression = jsonata(transformTemplate);\n      data = await expression.evaluate(data);\n    }\n\n    try {\n      const parsed = ReleaseResultZodSchema.parse(data);\n      return structuredClone(parsed);\n    } catch (err) {\n      logger.debug({ err }, `Response has failed validation`);\n      logger.trace({ data }, 'Response that has failed validation');\n      return null;\n    }\n  }\n\n  override getDigest(\n    { packageName }: DigestConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    // Return null here to support setting a digest: value can be provided digest in getReleases\n    return Promise.resolve(null);\n  }\n}\n"]}