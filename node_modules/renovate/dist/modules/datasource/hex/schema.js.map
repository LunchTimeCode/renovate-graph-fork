{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/hex/schema.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,6BAAwB;AACxB,6DAAwD;AAG3C,QAAA,UAAU,GAAG,OAAC;KACxB,MAAM,CAAC;IACN,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,IAAI,EAAE,OAAC;SACJ,MAAM,CAAC;QACN,KAAK,EAAE,OAAC,CAAC,MAAM,CAAC;YACd,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE;SACnB,CAAC;KACH,CAAC;SACD,QAAQ,EAAE;SACV,KAAK,CAAC,IAAI,CAAC;IACd,QAAQ,EAAE,IAAA,yBAAU,EAClB,OAAC,CAAC,MAAM,CAAC;QACP,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;QACnB,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KACnC,CAAC,CACH,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,mBAAmB,CAAC;IAChE,WAAW,EAAE,OAAC;SACX,MAAM,CACL,OAAC,CAAC,MAAM,EAAE,EACV,OAAC,CAAC,MAAM,CAAC;QACP,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC9B,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE;KACnB,CAAC,CACH;SACA,QAAQ,EAAE;CACd,CAAC;KACD,SAAS,CAAC,CAAC,WAAW,EAAiB,EAAE;IACxC,MAAM,QAAQ,GAAc,WAAW,CAAC,QAAQ,CAAC,GAAG,CAClD,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,EAAW,EAAE;QACtD,MAAM,OAAO,GAAY,EAAE,OAAO,EAAE,CAAC;QAErC,IAAI,gBAAgB,EAAE,CAAC;YACrB,OAAO,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAC9C,CAAC;QAED,IAAI,YAAE,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;YACvD,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;QAC9B,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC,CACF,CAAC;IAEF,MAAM,aAAa,GAAkB,EAAE,QAAQ,EAAE,CAAC;IAElD,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC;QACzB,aAAa,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;IAChD,CAAC;IAED,IAAI,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QACpC,aAAa,CAAC,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC1D,CAAC;IAED,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { z } from 'zod';\nimport { LooseArray } from '../../../util/schema-utils';\nimport type { Release, ReleaseResult } from '../types';\n\nexport const HexRelease = z\n  .object({\n    html_url: z.string().optional(),\n    meta: z\n      .object({\n        links: z.object({\n          Github: z.string(),\n        }),\n      })\n      .nullable()\n      .catch(null),\n    releases: LooseArray(\n      z.object({\n        version: z.string(),\n        inserted_at: z.string().optional(),\n      }),\n    ).refine((releases) => releases.length > 0, 'No releases found'),\n    retirements: z\n      .record(\n        z.string(),\n        z.object({\n          message: z.string().nullable(),\n          reason: z.string(),\n        }),\n      )\n      .optional(),\n  })\n  .transform((hexResponse): ReleaseResult => {\n    const releases: Release[] = hexResponse.releases.map(\n      ({ version, inserted_at: releaseTimestamp }): Release => {\n        const release: Release = { version };\n\n        if (releaseTimestamp) {\n          release.releaseTimestamp = releaseTimestamp;\n        }\n\n        if (is.plainObject(hexResponse.retirements?.[version])) {\n          release.isDeprecated = true;\n        }\n\n        return release;\n      },\n    );\n\n    const releaseResult: ReleaseResult = { releases };\n\n    if (hexResponse.html_url) {\n      releaseResult.homepage = hexResponse.html_url;\n    }\n\n    if (hexResponse.meta?.links?.Github) {\n      releaseResult.sourceUrl = hexResponse.meta.links.Github;\n    }\n\n    return releaseResult;\n  });\n"]}