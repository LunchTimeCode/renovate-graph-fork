{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/galaxy/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport * as pep440Versioning from '../../versioning/pep440';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { GalaxyV1 } from './schema';\n\nexport class GalaxyDatasource extends Datasource {\n  static readonly id = 'galaxy';\n\n  constructor() {\n    super(GalaxyDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://galaxy.ansible.com/'];\n\n  override readonly defaultVersioning = pep440Versioning.id;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `created` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `github_user` and `github_repo` fields in the results.';\n\n  @cache({\n    namespace: 'datasource-galaxy',\n    key: (getReleasesConfig: GetReleasesConfig) =>\n      getReleasesConfig.packageName,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const lookUp = packageName.split('.');\n    const userName = lookUp[0];\n    const projectName = lookUp[1];\n\n    const galaxyAPIUrl = `${registryUrl}api/v1/roles/?owner__username=${userName}&name=${projectName}`;\n    const galaxyProjectUrl = `${registryUrl}${userName}/${projectName}`;\n\n    let body: GalaxyV1 | null = null;\n    try {\n      const raw = await this.http.getJson(galaxyAPIUrl, GalaxyV1);\n      body = raw.body;\n    } catch (err) {\n      throw this.handleGenericErrors(err);\n    }\n\n    // istanbul ignore if\n    if (body.results.length > 1) {\n      logger.warn(\n        { dependency: packageName },\n        `Received multiple results from ${galaxyAPIUrl}`,\n      );\n      return null;\n    }\n    if (body.results.length === 0) {\n      logger.info(\n        { dependency: packageName },\n        `Received no results from ${galaxyAPIUrl}`,\n      );\n      return null;\n    }\n\n    const resultObject = body.results[0];\n    const versions = resultObject.summary_fields.versions;\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n\n    result.dependencyUrl = galaxyProjectUrl;\n    const { github_user: user, github_repo: repo } = resultObject;\n    if (is.nonEmptyString(user) && is.nonEmptyString(repo)) {\n      result.sourceUrl = `https://github.com/${user}/${repo}`;\n    }\n\n    result.releases = versions.map(\n      (version: { name: string; created?: string }) => {\n        const release: Release = {\n          version: version.name,\n        };\n\n        if (is.nonEmptyString(version.created)) {\n          release.releaseTimestamp = version.created;\n        }\n        return release;\n      },\n    );\n\n    return result;\n  }\n}\n"]}