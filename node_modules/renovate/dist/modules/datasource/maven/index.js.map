{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/maven/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { DateTime } from 'luxon';\nimport type { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport * as packageCache from '../../../util/cache/package';\nimport { filterMap } from '../../../util/filter-map';\nimport * as p from '../../../util/promises';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport mavenVersion from '../../versioning/maven';\nimport * as mavenVersioning from '../../versioning/maven';\nimport { compare } from '../../versioning/maven/compare';\nimport { Datasource } from '../datasource';\nimport type {\n  GetReleasesConfig,\n  RegistryStrategy,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport { MAVEN_REPO } from './common';\nimport type { MavenDependency, ReleaseMap } from './types';\nimport {\n  checkResource,\n  createUrlForDependencyPom,\n  downloadHttpProtocol,\n  downloadMavenXml,\n  getDependencyInfo,\n  getDependencyParts,\n  getMavenUrl,\n} from './util';\n\nfunction getLatestSuitableVersion(releases: Release[]): string | null {\n  // istanbul ignore if\n  if (!releases?.length) {\n    return null;\n  }\n  const allVersions = releases.map(({ version }) => version);\n  const stableVersions = allVersions.filter((x) => mavenVersion.isStable(x));\n  const versions = stableVersions.length ? stableVersions : allVersions;\n  return versions.reduce((latestVersion, version) =>\n    compare(version, latestVersion) === 1\n      ? version\n      : /* istanbul ignore next: hard to test */ latestVersion,\n  );\n}\n\nfunction extractVersions(metadata: XmlDocument): string[] {\n  const versions = metadata.descendantWithPath('versioning.versions');\n  const elements = versions?.childrenNamed('version');\n  if (!elements) {\n    return [];\n  }\n  return elements.map((el) => el.val);\n}\n\nconst mavenCentralHtmlVersionRegex = regEx(\n  '^<a href=\"(?<version>[^\"]+)/\" title=\"(?:[^\"]+)/\">(?:[^\"]+)/</a>\\\\s+(?<releaseTimestamp>\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d \\\\d\\\\d:\\\\d\\\\d)\\\\s+-$',\n  'i',\n);\n\nexport const defaultRegistryUrls = [MAVEN_REPO];\n\nexport class MavenDatasource extends Datasource {\n  static id = 'maven';\n\n  override readonly defaultRegistryUrls = defaultRegistryUrls;\n\n  override readonly defaultVersioning: string = mavenVersioning.id;\n\n  override readonly registryStrategy: RegistryStrategy = 'merge';\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `Last-Modified` header or the `lastModified` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `scm` tags in the results.';\n\n  constructor(id = MavenDatasource.id) {\n    super(id);\n  }\n\n  async fetchReleasesFromMetadata(\n    dependency: MavenDependency,\n    repoUrl: string,\n  ): Promise<ReleaseMap> {\n    const metadataUrl = getMavenUrl(dependency, repoUrl, 'maven-metadata.xml');\n\n    const cacheNamespace = 'datasource-maven:metadata-xml';\n    const cacheKey = metadataUrl.toString();\n    const cachedVersions = await packageCache.get<ReleaseMap>(\n      cacheNamespace,\n      cacheKey,\n    );\n    /* istanbul ignore if */\n    if (cachedVersions) {\n      return cachedVersions;\n    }\n\n    const { isCacheable, xml: mavenMetadata } = await downloadMavenXml(\n      this.http,\n      metadataUrl,\n    );\n    if (!mavenMetadata) {\n      return {};\n    }\n\n    const versions = extractVersions(mavenMetadata);\n    const releaseMap = versions.reduce(\n      (acc, version) => ({ ...acc, [version]: null }),\n      {},\n    );\n    if (isCacheable) {\n      await packageCache.set(cacheNamespace, cacheKey, releaseMap, 30);\n    }\n    return releaseMap;\n  }\n\n  async addReleasesFromIndexPage(\n    inputReleaseMap: ReleaseMap,\n    dependency: MavenDependency,\n    repoUrl: string,\n  ): Promise<ReleaseMap> {\n    if (!repoUrl.startsWith(MAVEN_REPO)) {\n      return inputReleaseMap;\n    }\n\n    const cacheNs = 'datasource-maven:index-html-releases';\n    const cacheKey = `${repoUrl}${dependency.dependencyUrl}`;\n    let workingReleaseMap = await packageCache.get<ReleaseMap>(\n      cacheNs,\n      cacheKey,\n    );\n    if (!workingReleaseMap) {\n      workingReleaseMap = {};\n      let retryEarlier = false;\n      try {\n        const indexUrl = getMavenUrl(dependency, repoUrl, 'index.html');\n        const res = await downloadHttpProtocol(this.http, indexUrl);\n        const { body = '' } = res;\n        for (const line of body.split(newlineRegex)) {\n          const match = line.trim().match(mavenCentralHtmlVersionRegex);\n          if (match) {\n            const { version, releaseTimestamp: timestamp } =\n              match?.groups ?? /* istanbul ignore next: hard to test */ {};\n            if (version && timestamp) {\n              const date = DateTime.fromFormat(timestamp, 'yyyy-MM-dd HH:mm', {\n                zone: 'UTC',\n              });\n              if (date.isValid) {\n                const releaseTimestamp = date.toISO();\n                workingReleaseMap[version] = { version, releaseTimestamp };\n              }\n            }\n          }\n        }\n      } catch (err) /* istanbul ignore next */ {\n        retryEarlier = true;\n        logger.debug(\n          { dependency, err },\n          'Failed to get releases from index.html',\n        );\n      }\n      const cacheTTL = retryEarlier\n        ? /* istanbul ignore next: hard to test */ 60\n        : 24 * 60;\n      await packageCache.set(cacheNs, cacheKey, workingReleaseMap, cacheTTL);\n    }\n\n    const releaseMap = { ...inputReleaseMap };\n    for (const version of Object.keys(releaseMap)) {\n      releaseMap[version] ||= workingReleaseMap[version] ?? null;\n    }\n\n    return releaseMap;\n  }\n\n  /**\n   *\n   * Double-check releases using HEAD request and\n   * attach timestamps obtained from `Last-Modified` header.\n   *\n   * Example input:\n   *\n   * {\n   *   '1.0.0': {\n   *     version: '1.0.0',\n   *     releaseTimestamp: '2020-01-01T01:00:00.000Z',\n   *   },\n   *   '1.0.1': null,\n   * }\n   *\n   * Example output:\n   *\n   * {\n   *   '1.0.0': {\n   *     version: '1.0.0',\n   *     releaseTimestamp: '2020-01-01T01:00:00.000Z',\n   *   },\n   *   '1.0.1': {\n   *     version: '1.0.1',\n   *     releaseTimestamp: '2021-01-01T01:00:00.000Z',\n   *   }\n   * }\n   *\n   * It should validate `1.0.0` with HEAD request, but leave `1.0.1` intact.\n   *\n   */\n  async addReleasesUsingHeadRequests(\n    inputReleaseMap: ReleaseMap,\n    dependency: MavenDependency,\n    repoUrl: string,\n  ): Promise<ReleaseMap> {\n    const releaseMap = { ...inputReleaseMap };\n\n    if (process.env.RENOVATE_EXPERIMENTAL_NO_MAVEN_POM_CHECK) {\n      return releaseMap;\n    }\n\n    const cacheNs = 'datasource-maven:head-requests';\n    const cacheTimeoutNs = 'datasource-maven:head-requests-timeout';\n    const cacheKey = `${repoUrl}${dependency.dependencyUrl}`;\n\n    // Store cache validity as the separate flag.\n    // This allows both cache updating and resetting.\n    //\n    // Even if new version is being released each 10 minutes,\n    // we still want to reset the whole cache after 24 hours.\n    const cacheValid = await packageCache.get<'valid'>(\n      cacheTimeoutNs,\n      cacheKey,\n    );\n\n    let cachedReleaseMap: ReleaseMap = {};\n    // istanbul ignore if\n    if (cacheValid) {\n      const cache = await packageCache.get<ReleaseMap>(cacheNs, cacheKey);\n      if (cache) {\n        cachedReleaseMap = cache;\n      }\n    }\n\n    // List versions to check with HEAD request\n    const freshVersions = filterMap(\n      Object.entries(releaseMap),\n      ([version, release]) => {\n        // Release is present in maven-metadata.xml,\n        // but haven't been validated yet\n        const isValidatedAtPreviousSteps = release !== null;\n\n        // Release was validated and cached with HEAD request during previous run\n        const isValidatedHere = !is.undefined(cachedReleaseMap[version]);\n\n        // istanbul ignore if: not easily testable\n        if (isValidatedAtPreviousSteps || isValidatedHere) {\n          return null;\n        }\n\n        // Select only valid releases not yet verified with HEAD request\n        return version;\n      },\n    );\n\n    // Update cached data with freshly discovered versions\n    if (freshVersions.length) {\n      const queue = freshVersions.map((version) => async (): Promise<void> => {\n        const pomUrl = await createUrlForDependencyPom(\n          this.http,\n          version,\n          dependency,\n          repoUrl,\n        );\n        const artifactUrl = getMavenUrl(dependency, repoUrl, pomUrl);\n        const release: Release = { version };\n\n        const res = await checkResource(this.http, artifactUrl);\n\n        if (is.date(res)) {\n          release.releaseTimestamp = res.toISOString();\n        }\n\n        cachedReleaseMap[version] =\n          res !== 'not-found' && res !== 'error' ? release : null;\n      });\n\n      await p.all(queue);\n\n      if (!cacheValid) {\n        // Store new TTL flag for 24 hours if the previous one is invalidated\n        await packageCache.set(cacheTimeoutNs, cacheKey, 'valid', 24 * 60);\n      }\n\n      // Store updated cache object\n      await packageCache.set(cacheNs, cacheKey, cachedReleaseMap, 24 * 60);\n    }\n\n    // Filter releases with the versions validated via HEAD request\n    for (const version of Object.keys(releaseMap)) {\n      releaseMap[version] = cachedReleaseMap[version] ?? null;\n    }\n    return releaseMap;\n  }\n\n  getReleasesFromMap(releaseMap: ReleaseMap): Release[] {\n    const releases = Object.values(releaseMap).filter(is.truthy);\n    if (releases.length) {\n      return releases;\n    }\n    return Object.keys(releaseMap).map((version) => ({ version }));\n  }\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    const dependency = getDependencyParts(packageName);\n    const repoUrl = ensureTrailingSlash(registryUrl);\n\n    logger.debug(`Looking up ${dependency.display} in repository ${repoUrl}`);\n\n    let releaseMap = await this.fetchReleasesFromMetadata(dependency, repoUrl);\n    releaseMap = await this.addReleasesFromIndexPage(\n      releaseMap,\n      dependency,\n      repoUrl,\n    );\n    releaseMap = await this.addReleasesUsingHeadRequests(\n      releaseMap,\n      dependency,\n      repoUrl,\n    );\n    const releases = this.getReleasesFromMap(releaseMap);\n    if (!releases?.length) {\n      return null;\n    }\n\n    logger.debug(\n      `Found ${releases.length} new releases for ${dependency.display} in repository ${repoUrl}`,\n    );\n\n    const latestSuitableVersion = getLatestSuitableVersion(releases);\n    const dependencyInfo =\n      latestSuitableVersion &&\n      (await getDependencyInfo(\n        this.http,\n        dependency,\n        repoUrl,\n        latestSuitableVersion,\n      ));\n\n    return { ...dependency, ...dependencyInfo, releases };\n  }\n}\n"]}