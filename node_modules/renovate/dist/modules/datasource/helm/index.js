"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelmDatasource = void 0;
const tslib_1 = require("tslib");
const is_1 = tslib_1.__importDefault(require("@sindresorhus/is"));
const logger_1 = require("../../../logger");
const decorator_1 = require("../../../util/cache/package/decorator");
const url_1 = require("../../../util/url");
const yaml_1 = require("../../../util/yaml");
const helmVersioning = tslib_1.__importStar(require("../../versioning/helm"));
const datasource_1 = require("../datasource");
const common_1 = require("./common");
class HelmDatasource extends datasource_1.Datasource {
    static id = 'helm';
    constructor() {
        super(HelmDatasource.id);
    }
    defaultRegistryUrls = ['https://charts.helm.sh/stable'];
    defaultConfig = {
        commitMessageTopic: 'Helm release {{depName}}',
    };
    defaultVersioning = helmVersioning.id;
    releaseTimestampSupport = true;
    releaseTimestampNote = 'The release timstamp is determined from the `created` field in the results.';
    sourceUrlSupport = 'package';
    sourceUrlNote = 'The source URL is determined from the `home` field or the `sources` field in the results.';
    async getRepositoryData(helmRepository) {
        let res;
        try {
            res = await this.http.get('index.yaml', {
                baseUrl: (0, url_1.ensureTrailingSlash)(helmRepository),
            });
            if (!res?.body) {
                logger_1.logger.warn({ helmRepository }, `Received invalid response from helm repository`);
                return null;
            }
        }
        catch (err) {
            this.handleGenericErrors(err);
        }
        try {
            // TODO: use schema (#9610)
            const doc = (0, yaml_1.parseSingleYaml)(res.body, {
                json: true,
            });
            if (!is_1.default.plainObject(doc)) {
                logger_1.logger.warn({ helmRepository }, `Failed to parse index.yaml from helm repository`);
                return null;
            }
            const result = {};
            for (const [name, releases] of Object.entries(doc.entries)) {
                if (releases.length === 0) {
                    continue;
                }
                const latestRelease = releases[0];
                const sourceUrl = (0, common_1.findSourceUrl)(latestRelease);
                result[name] = {
                    homepage: latestRelease.home,
                    sourceUrl,
                    releases: releases.map((release) => ({
                        version: release.version,
                        releaseTimestamp: release.created ?? null,
                        // The Helm repository at Gitlab does not include a digest (#24280)
                        newDigest: release.digest ?? undefined,
                    })),
                };
            }
            return result;
        }
        catch (err) {
            logger_1.logger.debug({ helmRepository, err }, `Failed to parse index.yaml from helm repository`);
            return null;
        }
    }
    async getReleases({ packageName, registryUrl: helmRepository, }) {
        // istanbul ignore if
        if (!helmRepository) {
            return null;
        }
        const repositoryData = await this.getRepositoryData(helmRepository);
        if (!repositoryData) {
            logger_1.logger.debug(`Missing repo data from ${helmRepository}`);
            return null;
        }
        const releases = repositoryData[packageName];
        if (!releases) {
            logger_1.logger.debug({ dependency: packageName }, `Entry ${packageName} doesn't exist in index.yaml from ${helmRepository}`);
            return null;
        }
        return releases;
    }
}
exports.HelmDatasource = HelmDatasource;
tslib_1.__decorate([
    (0, decorator_1.cache)({
        namespace: `datasource-${HelmDatasource.id}`,
        key: (helmRepository) => helmRepository,
    })
], HelmDatasource.prototype, "getRepositoryData", null);
//# sourceMappingURL=index.js.map