{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/conan/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,qEAA8D;AAC9D,sDAAuD;AACvD,2CAAsE;AACtE,6CAAqD;AACrD,wEAAkD;AAClD,8CAA2C;AAO3C,kCAA8C;AAC9C,qCAKkB;AASlB,MAAa,eAAgB,SAAQ,uBAAU;IAC7C,MAAM,CAAU,EAAE,GAAG,mBAAU,CAAC;IAEd,mBAAmB,GAAG,CAAC,2BAAkB,CAAC,CAAC;IAE3C,OAAO,GAAG,IAAI,CAAC;IAEf,gBAAgB,GAAG,OAAO,CAAC;IAE7C,UAAU,CAAa;IAEL,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,sLAAsL,CAAC;IAEzL,YAAY,EAAE,GAAG,eAAe,CAAC,EAAE;QACjC,KAAK,CAAC,EAAE,CAAC,CAAC;QACV,IAAI,CAAC,UAAU,GAAG,IAAI,mBAAU,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,sBAAsB,CAC1B,SAAiB,EACjB,cAAsB;QAEtB,IAAI,cAAc,IAAI,cAAc,KAAK,MAAM,EAAE,CAAC;YAChD,eAAM,CAAC,KAAK,CACV,EAAE,SAAS,EAAE,cAAc,EAAE,EAC7B,qDAAqD,CACtD,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,GAAG,GAAG,6EAA6E,SAAS,aAAa,CAAC;QAChH,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE;YACzC,OAAO,EAAE,EAAE,MAAM,EAAE,+BAA+B,EAAE;SACrD,CAAC,CAAC;QACH,2BAA2B;QAC3B,MAAM,GAAG,GAAG,IAAA,sBAAe,EAAY,GAAG,CAAC,IAAI,EAAE;YAC/C,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,OAAO;YACL,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBAC3D,OAAO;aACR,CAAC,CAAC;SACJ,CAAC;IACJ,CAAC;IAQc,AAAN,KAAK,CAAC,SAAS,CACtB,EAAE,WAAW,EAAE,WAAW,EAAgB,EAC1C,QAAiB;QAEjB,IAAI,YAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,YAAE,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC;YACxD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,GAAG,GAAG,IAAA,yBAAmB,EAAC,WAAW,CAAC,CAAC;QAC7C,MAAM,YAAY,GAAG,IAAA,wBAAe,EAAC,WAAW,CAAC,CAAC;QAClD,MAAM,cAAc,GAAG,IAAA,kBAAY,EACjC,GAAG,EACH,YAAY,EACZ,YAAY,CAAC,SAAS,EACtB,QAAQ,EACR,YAAY,CAAC,cAAc,EAC3B,YAAY,CACb,CAAC;QACF,MAAM,WAAW,GACf,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAqB,cAAc,CAAC,CAAC;QAC9D,MAAM,SAAS,GAAG,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC;QAC9C,OAAO,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;IACzC,CAAC;IAQK,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,MAAM,YAAY,GAAG,IAAA,wBAAe,EAAC,WAAW,CAAC,CAAC;QAClD,MAAM,cAAc,GAAG,GAAG,GAAG,YAAY,CAAC,cAAc,CAAC;QACzD,IACE,YAAE,CAAC,MAAM,CAAC,WAAW,CAAC;YACtB,IAAA,yBAAmB,EAAC,WAAW,CAAC,KAAK,2BAAkB,EACvD,CAAC;YACD,OAAO,IAAI,CAAC,sBAAsB,CAChC,YAAY,CAAC,SAAS,EACtB,cAAc,CACf,CAAC;QACJ,CAAC;QAED,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,WAAW,EAAE,EAC5B,iCAAiC,CAClC,CAAC;QAEF,IAAI,WAAW,EAAE,CAAC;YAChB,MAAM,GAAG,GAAG,IAAA,yBAAmB,EAAC,WAAW,CAAC,CAAC;YAC7C,MAAM,SAAS,GAAG,IAAA,kBAAY,EAC5B,GAAG,EACH,sBAAsB,YAAY,CAAC,SAAS,EAAE,CAC/C,CAAC;YAEF,IAAI,CAAC;gBACH,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAY,SAAS,CAAC,CAAC;gBAC1D,MAAM,QAAQ,GAAG,GAAG,EAAE,IAAI,CAAC;gBAC3B,IAAI,QAAQ,EAAE,CAAC;oBACb,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,EAAE,sBAAsB,CAAC,CAAC;oBACpD,MAAM,GAAG,GAAkB,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;oBAE5C,KAAK,MAAM,YAAY,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,CAAC;wBACjE,6BAAoB,CAAC,SAAS,GAAG,CAAC,CAAC;wBACnC,MAAM,SAAS,GAAG,6BAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAC1D,IAAI,SAAS,EAAE,MAAM,EAAE,OAAO,IAAI,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;4BACjE,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC;4BACzC,IAAI,SAAS,CAAC,MAAM,CAAC,WAAW,KAAK,cAAc,EAAE,CAAC;gCACpD,MAAM,MAAM,GAAY;oCACtB,OAAO;iCACR,CAAC;gCACF,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;4BAC5B,CAAC;wBACH,CAAC;oBACH,CAAC;oBAED,IAAI,CAAC;wBACH,IAAI,IAAA,0BAAmB,EAAC,GAAG,CAAC,EAAE,CAAC;4BAC7B,MAAM,cAAc,GAClB,sDAAsD,CAAC;4BACzD,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC;4BACjD,IAAI,CAAC,MAAM,EAAE,CAAC;gCACZ,OAAO,GAAG,CAAC;4BACb,CAAC;4BACD,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;4BAE3C,MAAM,cAAc,GAAG,GAAG,CAAC,QAAQ;iCAChC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iCACtD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;4BAE7D,MAAM,aAAa,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;4BAErD,IAAI,CAAC,aAAa,EAAE,CAAC;gCACnB,OAAO,GAAG,CAAC;4BACb,CAAC;4BACD,eAAM,CAAC,KAAK,CACV,iBAAiB,WAAW,uBAAuB,aAAa,EAAE,CACnE,CAAC;4BAEF,MAAM,iBAAiB,GAAG,IAAA,kBAAY,EACpC,GAAG,EACH,aAAa,YAAY,CAAC,SAAS,IAAI,aAAa,IAAI,YAAY,CAAC,cAAc,SAAS,CAC7F,CAAC;4BACF,MAAM,OAAO,GACX,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAoB,iBAAiB,CAAC,CAAC;4BAChE,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;4BAEzC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BAC/D,MAAM,UAAU,GAAG,IAAA,kBAAY,EAC7B,GAAG,MAAM,CAAC,IAAI,4BAA4B,MAAM,CAAC,IAAI,EAAE,EACvD,GAAG,IAAI,IAAI,YAAY,CAAC,SAAS,IAAI,aAAa,IAAI,OAAO,IAAI,UAAU,mDAAmD,CAC/H,CAAC;4BACF,MAAM,cAAc,GAClB,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAkB,UAAU,CAAC,CAAC;4BAEvD,IACE,cAAc,CAAC,IAAI,CAAC,UAAU;gCAC9B,mBAAmB,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,EACrD,CAAC;gCACD,MAAM,eAAe,GACnB,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;gCACzD,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC;4BAClC,CAAC;wBACH,CAAC;oBACH,CAAC;oBAAC,OAAO,GAAG,EAAE,CAAC;wBACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,sCAAsC,CAAC,CAAC;oBAChE,CAAC;oBACD,OAAO,GAAG,CAAC;gBACb,CAAC;YACH,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAChC,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;;AA7LH,0CA8LC;AA1IgB;IANd,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,YAAY;QAC/C,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAgB,EAAE,QAAiB,EAAE,EAAE;QACrE,uBAAuB;QACvB,GAAG,WAAY,IAAI,WAAW,IAAI,QAAS,EAAE;KAChD,CAAC;gDAsBD;AAQK;IANL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,EAAE;QACrC,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE;QACvD,uBAAuB;QACvB,GAAG,WAAW,IAAI,WAAW,EAAE;KAClC,CAAC;kDA6GD","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { GithubHttp } from '../../../util/http/github';\nimport { ensureTrailingSlash, joinUrlParts } from '../../../util/url';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport * as allVersioning from '../../versioning';\nimport { Datasource } from '../datasource';\nimport type {\n  DigestConfig,\n  GetReleasesConfig,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport { isArtifactoryServer } from '../util';\nimport {\n  conanDatasourceRegex,\n  datasource,\n  defaultRegistryUrl,\n  getConanPackage,\n} from './common';\nimport type {\n  ConanJSON,\n  ConanProperties,\n  ConanRevisionJSON,\n  ConanRevisionsJSON,\n  ConanYAML,\n} from './types';\n\nexport class ConanDatasource extends Datasource {\n  static readonly id = datasource;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly caching = true;\n\n  override readonly registryStrategy = 'merge';\n\n  githubHttp: GithubHttp;\n\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is supported only if the package is served from the Artifactory servers. In which case we determine it from the `properties[conan.package.url]` field in the results.';\n\n  constructor(id = ConanDatasource.id) {\n    super(id);\n    this.githubHttp = new GithubHttp(id);\n  }\n\n  async getConanCenterReleases(\n    conanName: string,\n    userAndChannel: string,\n  ): Promise<ReleaseResult | null> {\n    if (userAndChannel && userAndChannel !== '@_/_') {\n      logger.debug(\n        { conanName, userAndChannel },\n        'User/channel not supported for Conan Center lookups',\n      );\n      return null;\n    }\n    const url = `https://api.github.com/repos/conan-io/conan-center-index/contents/recipes/${conanName}/config.yml`;\n    const res = await this.githubHttp.get(url, {\n      headers: { accept: 'application/vnd.github.v3.raw' },\n    });\n    // TODO: use schema (#9610)\n    const doc = parseSingleYaml<ConanYAML>(res.body, {\n      json: true,\n    });\n    return {\n      releases: Object.keys(doc?.versions ?? {}).map((version) => ({\n        version,\n      })),\n    };\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}-revisions`,\n    key: ({ registryUrl, packageName }: DigestConfig, newValue?: string) =>\n      // TODO: types (#22198)\n      `${registryUrl!}:${packageName}:${newValue!}`,\n  })\n  override async getDigest(\n    { registryUrl, packageName }: DigestConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    if (is.undefined(newValue) || is.undefined(registryUrl)) {\n      return null;\n    }\n    const url = ensureTrailingSlash(registryUrl);\n    const conanPackage = getConanPackage(packageName);\n    const revisionLookUp = joinUrlParts(\n      url,\n      'v2/conans/',\n      conanPackage.conanName,\n      newValue,\n      conanPackage.userAndChannel,\n      '/revisions',\n    );\n    const revisionRep =\n      await this.http.getJson<ConanRevisionsJSON>(revisionLookUp);\n    const revisions = revisionRep?.body.revisions;\n    return revisions?.[0].revision ?? null;\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `${registryUrl}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const conanPackage = getConanPackage(packageName);\n    const userAndChannel = '@' + conanPackage.userAndChannel;\n    if (\n      is.string(registryUrl) &&\n      ensureTrailingSlash(registryUrl) === defaultRegistryUrl\n    ) {\n      return this.getConanCenterReleases(\n        conanPackage.conanName,\n        userAndChannel,\n      );\n    }\n\n    logger.trace(\n      { packageName, registryUrl },\n      'Looking up conan api dependency',\n    );\n\n    if (registryUrl) {\n      const url = ensureTrailingSlash(registryUrl);\n      const lookupUrl = joinUrlParts(\n        url,\n        `v2/conans/search?q=${conanPackage.conanName}`,\n      );\n\n      try {\n        const rep = await this.http.getJson<ConanJSON>(lookupUrl);\n        const versions = rep?.body;\n        if (versions) {\n          logger.trace({ lookupUrl }, 'Got conan api result');\n          const dep: ReleaseResult = { releases: [] };\n\n          for (const resultString of Object.values(versions.results ?? {})) {\n            conanDatasourceRegex.lastIndex = 0;\n            const fromMatch = conanDatasourceRegex.exec(resultString);\n            if (fromMatch?.groups?.version && fromMatch?.groups?.userChannel) {\n              const version = fromMatch.groups.version;\n              if (fromMatch.groups.userChannel === userAndChannel) {\n                const result: Release = {\n                  version,\n                };\n                dep.releases.push(result);\n              }\n            }\n          }\n\n          try {\n            if (isArtifactoryServer(rep)) {\n              const conanApiRegexp =\n                /(?<host>.*)\\/artifactory\\/api\\/conan\\/(?<repo>[^/]+)/;\n              const groups = url.match(conanApiRegexp)?.groups;\n              if (!groups) {\n                return dep;\n              }\n              const semver = allVersioning.get('semver');\n\n              const sortedReleases = dep.releases\n                .filter((release) => semver.isVersion(release.version))\n                .sort((a, b) => semver.sortVersions(a.version, b.version));\n\n              const latestVersion = sortedReleases.at(-1)?.version;\n\n              if (!latestVersion) {\n                return dep;\n              }\n              logger.debug(\n                `Conan package ${packageName} has latest version ${latestVersion}`,\n              );\n\n              const latestRevisionUrl = joinUrlParts(\n                url,\n                `v2/conans/${conanPackage.conanName}/${latestVersion}/${conanPackage.userAndChannel}/latest`,\n              );\n              const revResp =\n                await this.http.getJson<ConanRevisionJSON>(latestRevisionUrl);\n              const packageRev = revResp.body.revision;\n\n              const [user, channel] = conanPackage.userAndChannel.split('/');\n              const packageUrl = joinUrlParts(\n                `${groups.host}/artifactory/api/storage/${groups.repo}`,\n                `${user}/${conanPackage.conanName}/${latestVersion}/${channel}/${packageRev}/export/conanfile.py?properties=conan.package.url`,\n              );\n              const packageUrlResp =\n                await this.http.getJson<ConanProperties>(packageUrl);\n\n              if (\n                packageUrlResp.body.properties &&\n                'conan.package.url' in packageUrlResp.body.properties\n              ) {\n                const conanPackageUrl =\n                  packageUrlResp.body.properties['conan.package.url'][0];\n                dep.sourceUrl = conanPackageUrl;\n              }\n            }\n          } catch (err) {\n            logger.debug({ err }, \"Couldn't determine Conan package url\");\n          }\n          return dep;\n        }\n      } catch (err) {\n        this.handleGenericErrors(err);\n      }\n    }\n\n    return null;\n  }\n}\n"]}