{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gerrit/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { REPOSITORY_ARCHIVED } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { GerritHttp } from '../../../util/http/gerrit';\nimport { regEx } from '../../../util/regex';\nimport type {\n  GerritAccountInfo,\n  GerritBranchInfo,\n  GerritChange,\n  GerritChangeMessageInfo,\n  GerritFindPRConfig,\n  GerritMergeableInfo,\n  GerritProjectInfo,\n} from './types';\nimport { mapPrStateToGerritFilter } from './utils';\n\nconst QUOTES_REGEX = regEx('\"', 'g');\n\nclass GerritClient {\n  private requestDetails = [\n    'SUBMITTABLE', //include the submittable field in ChangeInfo, which can be used to tell if the change is reviewed and ready for submit.\n    'CHECK', // include potential problems with the change.\n    'MESSAGES',\n    'DETAILED_ACCOUNTS',\n    'LABELS',\n    'CURRENT_ACTIONS', //to check if current_revision can be \"rebased\"\n    'CURRENT_REVISION', //get RevisionInfo::ref to fetch\n    'CURRENT_COMMIT', // to get the commit message\n  ] as const;\n\n  private gerritHttp = new GerritHttp();\n\n  async getRepos(): Promise<string[]> {\n    const res = await this.gerritHttp.getJson<string[]>(\n      'a/projects/?type=CODE&state=ACTIVE',\n      {},\n    );\n    return Object.keys(res.body);\n  }\n\n  async getProjectInfo(repository: string): Promise<GerritProjectInfo> {\n    const projectInfo = await this.gerritHttp.getJson<GerritProjectInfo>(\n      `a/projects/${encodeURIComponent(repository)}`,\n    );\n    if (projectInfo.body.state !== 'ACTIVE') {\n      throw new Error(REPOSITORY_ARCHIVED);\n    }\n    return projectInfo.body;\n  }\n\n  async getBranchInfo(repository: string): Promise<GerritBranchInfo> {\n    const branchInfo = await this.gerritHttp.getJson<GerritBranchInfo>(\n      `a/projects/${encodeURIComponent(repository)}/branches/HEAD`,\n    );\n    return branchInfo.body;\n  }\n\n  async findChanges(\n    repository: string,\n    findPRConfig: GerritFindPRConfig,\n    refreshCache?: boolean,\n  ): Promise<GerritChange[]> {\n    const filters = GerritClient.buildSearchFilters(repository, findPRConfig);\n    const changes = await this.gerritHttp.getJson<GerritChange[]>(\n      `a/changes/?q=` +\n        filters.join('+') +\n        this.requestDetails.map((det) => `&o=${det}`).join(''),\n      { memCache: !refreshCache },\n    );\n    logger.trace(\n      `findChanges(${filters.join(', ')}) => ${changes.body.length}`,\n    );\n    return changes.body;\n  }\n\n  async getChange(changeNumber: number): Promise<GerritChange> {\n    const changes = await this.gerritHttp.getJson<GerritChange>(\n      `a/changes/${changeNumber}?` +\n        this.requestDetails.map((det) => `o=${det}`).join('&'),\n    );\n    return changes.body;\n  }\n\n  async getMergeableInfo(change: GerritChange): Promise<GerritMergeableInfo> {\n    const mergeable = await this.gerritHttp.getJson<GerritMergeableInfo>(\n      `a/changes/${change._number}/revisions/current/mergeable`,\n    );\n    return mergeable.body;\n  }\n\n  async abandonChange(changeNumber: number): Promise<void> {\n    await this.gerritHttp.postJson(`a/changes/${changeNumber}/abandon`);\n  }\n\n  async submitChange(changeNumber: number): Promise<GerritChange> {\n    const change = await this.gerritHttp.postJson<GerritChange>(\n      `a/changes/${changeNumber}/submit`,\n    );\n    return change.body;\n  }\n\n  async setCommitMessage(changeNumber: number, message: string): Promise<void> {\n    await this.gerritHttp.putJson(`a/changes/${changeNumber}/message`, {\n      body: { message },\n    });\n  }\n\n  async updateChangeSubject(\n    number: number,\n    currentMessage: string,\n    newSubject: string,\n  ): Promise<void> {\n    // Replace first line of the commit message with the new subject\n    const newMessage = currentMessage.replace(\n      new RegExp(`^.*$`, 'm'),\n      newSubject,\n    );\n    await this.setCommitMessage(number, newMessage);\n  }\n\n  async getMessages(changeNumber: number): Promise<GerritChangeMessageInfo[]> {\n    const messages = await this.gerritHttp.getJson<GerritChangeMessageInfo[]>(\n      `a/changes/${changeNumber}/messages`,\n      { memCache: false },\n    );\n    return messages.body;\n  }\n\n  async addMessage(\n    changeNumber: number,\n    fullMessage: string,\n    tag?: string,\n  ): Promise<void> {\n    const message = this.normalizeMessage(fullMessage);\n    await this.gerritHttp.postJson(\n      `a/changes/${changeNumber}/revisions/current/review`,\n      { body: { message, tag } },\n    );\n  }\n\n  async checkForExistingMessage(\n    changeNumber: number,\n    newMessage: string,\n    msgType?: string,\n  ): Promise<boolean> {\n    const messages = await this.getMessages(changeNumber);\n    return messages.some(\n      (existingMsg) =>\n        (msgType === undefined || msgType === existingMsg.tag) &&\n        existingMsg.message.includes(newMessage),\n    );\n  }\n\n  async addMessageIfNotAlreadyExists(\n    changeNumber: number,\n    message: string,\n    tag?: string,\n  ): Promise<void> {\n    const newMsg = this.normalizeMessage(message);\n    if (!(await this.checkForExistingMessage(changeNumber, newMsg, tag))) {\n      await this.addMessage(changeNumber, newMsg, tag);\n    }\n  }\n\n  async setLabel(\n    changeNumber: number,\n    label: string,\n    value: number,\n  ): Promise<void> {\n    await this.gerritHttp.postJson(\n      `a/changes/${changeNumber}/revisions/current/review`,\n      { body: { labels: { [label]: value } } },\n    );\n  }\n\n  async addReviewer(changeNumber: number, reviewer: string): Promise<void> {\n    await this.gerritHttp.postJson(`a/changes/${changeNumber}/reviewers`, {\n      body: { reviewer },\n    });\n  }\n\n  async addAssignee(changeNumber: number, assignee: string): Promise<void> {\n    await this.gerritHttp.putJson<GerritAccountInfo>(\n      `a/changes/${changeNumber}/assignee`,\n      {\n        body: { assignee },\n      },\n    );\n  }\n\n  async getFile(\n    repo: string,\n    branch: string,\n    fileName: string,\n  ): Promise<string> {\n    const base64Content = await this.gerritHttp.get(\n      `a/projects/${encodeURIComponent(\n        repo,\n      )}/branches/${branch}/files/${encodeURIComponent(fileName)}/content`,\n    );\n    return Buffer.from(base64Content.body, 'base64').toString();\n  }\n\n  async approveChange(changeId: number): Promise<void> {\n    const isApproved = await this.checkIfApproved(changeId);\n    if (!isApproved) {\n      await this.setLabel(changeId, 'Code-Review', +2);\n    }\n  }\n\n  async checkIfApproved(changeId: number): Promise<boolean> {\n    const change = await client.getChange(changeId);\n    const reviewLabels = change?.labels?.['Code-Review'];\n    return reviewLabels === undefined || reviewLabels.approved !== undefined;\n  }\n\n  wasApprovedBy(change: GerritChange, username: string): boolean | undefined {\n    return (\n      change.labels?.['Code-Review'].approved &&\n      change.labels['Code-Review'].approved.username === username\n    );\n  }\n\n  normalizeMessage(message: string): string {\n    //the last \\n was removed from gerrit after the comment was added...\n    return message.substring(0, 0x4000).trim();\n  }\n\n  private static buildSearchFilters(\n    repository: string,\n    searchConfig: GerritFindPRConfig,\n  ): string[] {\n    const filterState = mapPrStateToGerritFilter(searchConfig.state);\n    const filters = ['owner:self', 'project:' + repository, filterState];\n    if (searchConfig.branchName !== '') {\n      filters.push(`hashtag:sourceBranch-${searchConfig.branchName}`);\n    }\n    if (searchConfig.targetBranch) {\n      filters.push(`branch:${searchConfig.targetBranch}`);\n    }\n    if (searchConfig.label) {\n      filters.push(`label:Code-Review=${searchConfig.label}`);\n    }\n    if (searchConfig.prTitle) {\n      // escaping support in Gerrit is not great, so we need to remove quotes\n      // special characters are ignored anyway in the search so it does not create any issues\n      filters.push(\n        `message:${encodeURIComponent('\"' + searchConfig.prTitle.replace(QUOTES_REGEX, '') + '\"')}`,\n      );\n    }\n    return filters;\n  }\n}\n\nexport const client = new GerritClient();\n"]}