"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapBranchStatusToLabel = exports.findPullRequestBody = exports.extractSourceBranch = exports.mapGerritChangeStateToPrState = exports.mapGerritChangeToPr = exports.mapPrStateToGerritFilter = exports.getGerritRepoUrl = exports.TAG_PULL_REQUEST_BODY = void 0;
const tslib_1 = require("tslib");
const error_messages_1 = require("../../../constants/error-messages");
const logger_1 = require("../../../logger");
const hostRules = tslib_1.__importStar(require("../../../util/host-rules"));
const url_1 = require("../../../util/url");
const pr_body_1 = require("../pr-body");
exports.TAG_PULL_REQUEST_BODY = 'pull-request';
function getGerritRepoUrl(repository, endpoint) {
    // Find options for current host and determine Git endpoint
    const opts = hostRules.find({
        hostType: 'gerrit',
        url: endpoint,
    });
    const url = (0, url_1.parseUrl)(endpoint);
    if (!url) {
        throw new Error(error_messages_1.CONFIG_GIT_URL_UNAVAILABLE);
    }
    if (!(opts.username && opts.password)) {
        throw new Error('Init: You must configure a Gerrit Server username/password');
    }
    url.username = opts.username;
    url.password = opts.password;
    url.pathname = (0, url_1.joinUrlParts)(url.pathname, 'a', encodeURIComponent(repository));
    logger_1.logger.trace({ url: url.toString() }, 'using URL based on configured endpoint');
    return url.toString();
}
exports.getGerritRepoUrl = getGerritRepoUrl;
function mapPrStateToGerritFilter(state) {
    switch (state) {
        case 'closed':
            return 'status:closed';
        case 'merged':
            return 'status:merged';
        case '!open':
            return '-status:open';
        case 'open':
            return 'status:open';
        case 'all':
        default:
            return '-is:wip';
    }
}
exports.mapPrStateToGerritFilter = mapPrStateToGerritFilter;
function mapGerritChangeToPr(change) {
    return {
        number: change._number,
        state: mapGerritChangeStateToPrState(change.status),
        sourceBranch: extractSourceBranch(change) ?? change.branch,
        targetBranch: change.branch,
        title: change.subject,
        reviewers: change.reviewers?.REVIEWER?.filter((reviewer) => typeof reviewer.username === 'string').map((reviewer) => reviewer.username) ?? [],
        bodyStruct: {
            hash: (0, pr_body_1.hashBody)(findPullRequestBody(change)),
        },
    };
}
exports.mapGerritChangeToPr = mapGerritChangeToPr;
function mapGerritChangeStateToPrState(state) {
    switch (state) {
        case 'NEW':
            return 'open';
        case 'MERGED':
            return 'merged';
        case 'ABANDONED':
            return 'closed';
    }
    return 'all';
}
exports.mapGerritChangeStateToPrState = mapGerritChangeStateToPrState;
function extractSourceBranch(change) {
    return change.hashtags
        ?.find((tag) => tag.startsWith('sourceBranch-'))
        ?.replace('sourceBranch-', '');
}
exports.extractSourceBranch = extractSourceBranch;
function findPullRequestBody(change) {
    const msg = Array.from(change.messages ?? [])
        .reverse()
        .find((msg) => msg.tag === exports.TAG_PULL_REQUEST_BODY);
    if (msg) {
        return msg.message.replace(/^Patch Set \d+:\n\n/, ''); //TODO: check how to get rid of the auto-added prefix?
    }
    return undefined;
}
exports.findPullRequestBody = findPullRequestBody;
function mapBranchStatusToLabel(state, label) {
    const numbers = Object.keys(label.values).map((x) => parseInt(x, 10));
    switch (state) {
        case 'green':
            return Math.max(...numbers);
        case 'yellow':
        case 'red':
            return Math.min(...numbers);
    }
    // istanbul ignore next
    return label.default_value;
}
exports.mapBranchStatusToLabel = mapBranchStatusToLabel;
//# sourceMappingURL=utils.js.map