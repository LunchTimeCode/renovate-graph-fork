{"version":3,"file":"scm.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gerrit/scm.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomUUID } from 'crypto';\nimport { logger } from '../../../logger';\nimport * as git from '../../../util/git';\nimport type { CommitFilesConfig, LongCommitSha } from '../../../util/git/types';\nimport { hash } from '../../../util/hash';\nimport { DefaultGitScm } from '../default-scm';\nimport { client } from './client';\nimport type { GerritFindPRConfig } from './types';\n\nlet repository: string;\nlet username: string;\nexport function configureScm(repo: string, login: string): void {\n  repository = repo;\n  username = login;\n}\n\nexport class GerritScm extends DefaultGitScm {\n  override async branchExists(branchName: string): Promise<boolean> {\n    const searchConfig: GerritFindPRConfig = { state: 'open', branchName };\n    const change = await client\n      .findChanges(repository, searchConfig, true)\n      .then((res) => res.pop());\n    if (change) {\n      return true;\n    }\n    return git.branchExists(branchName);\n  }\n\n  override async getBranchCommit(\n    branchName: string,\n  ): Promise<LongCommitSha | null> {\n    const searchConfig: GerritFindPRConfig = { state: 'open', branchName };\n    const change = await client\n      .findChanges(repository, searchConfig, true)\n      .then((res) => res.pop());\n    if (change) {\n      return change.current_revision as LongCommitSha;\n    }\n    return git.getBranchCommit(branchName);\n  }\n\n  override async isBranchBehindBase(\n    branchName: string,\n    baseBranch: string,\n  ): Promise<boolean> {\n    const searchConfig: GerritFindPRConfig = {\n      state: 'open',\n      branchName,\n      targetBranch: baseBranch,\n    };\n    const change = await client\n      .findChanges(repository, searchConfig, true)\n      .then((res) => res.pop());\n    if (change) {\n      const currentGerritPatchset = change.revisions[change.current_revision];\n      return currentGerritPatchset.actions?.['rebase'].enabled === true;\n    }\n    return true;\n  }\n\n  override async isBranchConflicted(\n    baseBranch: string,\n    branch: string,\n  ): Promise<boolean> {\n    const searchConfig: GerritFindPRConfig = {\n      state: 'open',\n      branchName: branch,\n      targetBranch: baseBranch,\n    };\n    const change = (await client.findChanges(repository, searchConfig)).pop();\n    if (change) {\n      const mergeInfo = await client.getMergeableInfo(change);\n      return !mergeInfo.mergeable;\n    } else {\n      logger.warn(\n        `There is no open change with branch=${branch} and baseBranch=${baseBranch}`,\n      );\n      return true;\n    }\n  }\n\n  override async isBranchModified(branchName: string): Promise<boolean> {\n    const searchConfig: GerritFindPRConfig = { state: 'open', branchName };\n    const change = await client\n      .findChanges(repository, searchConfig, true)\n      .then((res) => res.pop());\n    if (change) {\n      const currentGerritPatchset = change.revisions[change.current_revision];\n      return currentGerritPatchset.uploader.username !== username;\n    }\n    return false;\n  }\n\n  override async commitAndPush(\n    commit: CommitFilesConfig,\n  ): Promise<LongCommitSha | null> {\n    logger.debug(`commitAndPush(${commit.branchName})`);\n    const searchConfig: GerritFindPRConfig = {\n      state: 'open',\n      branchName: commit.branchName,\n      targetBranch: commit.baseBranch,\n    };\n    const existingChange = await client\n      .findChanges(repository, searchConfig, true)\n      .then((res) => res.pop());\n\n    let hasChanges = true;\n    const origMsg =\n      typeof commit.message === 'string' ? [commit.message] : commit.message;\n    commit.message = [\n      ...origMsg,\n      `Change-Id: ${existingChange?.change_id ?? generateChangeId()}`,\n    ];\n    const commitResult = await git.prepareCommit({ ...commit, force: true });\n    if (commitResult) {\n      const { commitSha } = commitResult;\n      if (existingChange?.revisions && existingChange.current_revision) {\n        const fetchRefSpec =\n          existingChange.revisions[existingChange.current_revision].ref;\n        await git.fetchRevSpec(fetchRefSpec); //fetch current ChangeSet for git diff\n        hasChanges = await git.hasDiff('HEAD', 'FETCH_HEAD'); //avoid empty patchsets\n      }\n      if (hasChanges || commit.force) {\n        const pushResult = await git.pushCommit({\n          sourceRef: commit.branchName,\n          targetRef: `refs/for/${commit.baseBranch!}%t=sourceBranch-${\n            commit.branchName\n          }`,\n          files: commit.files,\n        });\n        if (pushResult) {\n          //existingChange was the old change before commit/push. we need to approve again, if it was previously approved from renovate\n          if (\n            existingChange &&\n            client.wasApprovedBy(existingChange, username)\n          ) {\n            await client.approveChange(existingChange._number);\n          }\n          return commitSha;\n        }\n      }\n    }\n    return null; //empty commit, no changes in this Gerrit-Change\n  }\n\n  override deleteBranch(branchName: string): Promise<void> {\n    return Promise.resolve();\n  }\n\n  override async mergeToLocal(branchName: string): Promise<void> {\n    const searchConfig: GerritFindPRConfig = { state: 'open', branchName };\n    const change = await client\n      .findChanges(repository, searchConfig, true)\n      .then((res) => res.pop());\n    if (change) {\n      return super.mergeToLocal(change.revisions[change.current_revision].ref);\n    }\n    return super.mergeToLocal(branchName);\n  }\n}\n\n/**\n * This function should generate a Gerrit Change-ID analogous to the commit hook. We avoid the commit hook cause of security concerns.\n * random=$( (whoami ; hostname ; date; cat $1 ; echo $RANDOM) | git hash-object --stdin) prefixed with an 'I'.\n * TODO: Gerrit don't accept longer Change-IDs (sha256), but what happens with this https://git-scm.com/docs/hash-function-transition/ ?\n */\nfunction generateChangeId(): string {\n  return 'I' + hash(randomUUID(), 'sha1');\n}\n"]}