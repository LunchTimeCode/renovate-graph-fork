{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitlab/http.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,sDAAuD;AAG1C,QAAA,SAAS,GAAG,IAAI,mBAAU,EAAE,CAAC;AAEnC,KAAK,UAAU,SAAS,CAAC,QAAgB;IAC9C,MAAM,QAAQ,GAAG,CACf,MAAM,iBAAS,CAAC,OAAO,CAAmB,kBAAkB,QAAQ,EAAE,CAAC,CACxE,CAAC,IAAI,CAAC;IAEP,IAAI,YAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC5B,MAAM,IAAI,KAAK,CACb,6BAA6B,QAAQ,sBAAsB,CAC5D,CAAC;IACJ,CAAC;IAED,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACxB,CAAC;AAZD,8BAYC;AAED,KAAK,UAAU,UAAU,CAAC,KAAa;IACrC,MAAM,YAAY,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC/C,OAAO,CACL,MAAM,iBAAS,CAAC,OAAO,CAAe,UAAU,YAAY,UAAU,CAAC,CACxE,CAAC,IAAI,CAAC;AACT,CAAC;AAEM,KAAK,UAAU,gBAAgB,CAAC,KAAa;IAClD,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,CAAC;IACxC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAClC,CAAC;AAHD,4CAGC;AAEM,KAAK,UAAU,kBAAkB,CAAC,KAAa;IACpD,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,CAAC;IACxC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC;AAHD,gDAGC;AAEM,KAAK,UAAU,UAAU,CAAC,IAAY;IAC3C,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,UAAU,IAAI,SAAS,CAAC;QACpC,MAAM,UAAU,GAAG,CAAC,MAAM,iBAAS,CAAC,OAAO,CAAmB,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;QACzE,OAAO,UAAU,CAAC,YAAY,KAAK,MAAM,CAAC;IAC5C,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAClD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AATD,gCASC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport type { GitLabUser, GitlabUserStatus } from './types';\n\nexport const gitlabApi = new GitlabHttp();\n\nexport async function getUserID(username: string): Promise<number> {\n  const userInfo = (\n    await gitlabApi.getJson<{ id: number }[]>(`users?username=${username}`)\n  ).body;\n\n  if (is.emptyArray(userInfo)) {\n    throw new Error(\n      `User ID for the username: ${username} could not be found.`,\n    );\n  }\n\n  return userInfo[0].id;\n}\n\nasync function getMembers(group: string): Promise<GitLabUser[]> {\n  const groupEncoded = encodeURIComponent(group);\n  return (\n    await gitlabApi.getJson<GitLabUser[]>(`groups/${groupEncoded}/members`)\n  ).body;\n}\n\nexport async function getMemberUserIDs(group: string): Promise<number[]> {\n  const members = await getMembers(group);\n  return members.map((u) => u.id);\n}\n\nexport async function getMemberUsernames(group: string): Promise<string[]> {\n  const members = await getMembers(group);\n  return members.map((u) => u.username);\n}\n\nexport async function isUserBusy(user: string): Promise<boolean> {\n  try {\n    const url = `/users/${user}/status`;\n    const userStatus = (await gitlabApi.getJson<GitlabUserStatus>(url)).body;\n    return userStatus.availability === 'busy';\n  } catch (err) {\n    logger.warn({ err }, 'Failed to get user status');\n    return false;\n  }\n}\n"]}