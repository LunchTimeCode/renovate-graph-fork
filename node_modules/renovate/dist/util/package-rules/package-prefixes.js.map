{"version":3,"file":"package-prefixes.js","sourceRoot":"","sources":["../../../lib/util/package-rules/package-prefixes.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,yCAAsC;AACtC,iCAAiC;AAEjC,MAAa,sBAAuB,SAAQ,cAAO;IACxC,OAAO,CACd,EAAE,OAAO,EAAE,WAAW,EAA0B,EAChD,WAAwB;QAExB,MAAM,EAAE,oBAAoB,EAAE,GAAG,WAAW,CAAC;QAC7C,IAAI,YAAE,CAAC,SAAS,CAAC,oBAAoB,CAAC,EAAE,CAAC;YACvC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,YAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;YAC1B,OAAO,KAAK,CAAC;QACf,CAAC;QAED,IACE,YAAE,CAAC,MAAM,CAAC,WAAW,CAAC;YACtB,oBAAoB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EACrE,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YACtE,eAAM,CAAC,IAAI,CAAC,IAAI,CACd,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,EACrC,sDAAsD,CACvD,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEQ,QAAQ,CACf,EAAE,OAAO,EAAE,WAAW,EAA0B,EAChD,WAAwB;QAExB,MAAM,EAAE,sBAAsB,EAAE,GAAG,WAAW,CAAC;QAC/C,IAAI,YAAE,CAAC,SAAS,CAAC,sBAAsB,CAAC,EAAE,CAAC;YACzC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,YAAE,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;YAC1B,OAAO,KAAK,CAAC;QACf,CAAC;QAED,IACE,YAAE,CAAC,MAAM,CAAC,WAAW,CAAC;YACtB,sBAAsB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EACvE,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YACxE,eAAM,CAAC,IAAI,CAAC,IAAI,CACd,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,EACrC,0DAA0D,CAC3D,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA3DD,wDA2DC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport { Matcher } from './base';\n\nexport class PackagePrefixesMatcher extends Matcher {\n  override matches(\n    { depName, packageName }: PackageRuleInputConfig,\n    packageRule: PackageRule,\n  ): boolean | null {\n    const { matchPackagePrefixes } = packageRule;\n    if (is.undefined(matchPackagePrefixes)) {\n      return null;\n    }\n\n    if (is.undefined(depName)) {\n      return false;\n    }\n\n    if (\n      is.string(packageName) &&\n      matchPackagePrefixes.some((prefix) => packageName.startsWith(prefix))\n    ) {\n      return true;\n    }\n    if (matchPackagePrefixes.some((prefix) => depName.startsWith(prefix))) {\n      logger.once.warn(\n        { packageRule, packageName, depName },\n        'Use matchDepPrefixes instead of matchPackagePrefixes',\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  override excludes(\n    { depName, packageName }: PackageRuleInputConfig,\n    packageRule: PackageRule,\n  ): boolean | null {\n    const { excludePackagePrefixes } = packageRule;\n    if (is.undefined(excludePackagePrefixes)) {\n      return null;\n    }\n    if (is.undefined(depName)) {\n      return false;\n    }\n\n    if (\n      is.string(packageName) &&\n      excludePackagePrefixes.some((prefix) => packageName.startsWith(prefix))\n    ) {\n      return true;\n    }\n    if (excludePackagePrefixes.some((prefix) => depName.startsWith(prefix))) {\n      logger.once.warn(\n        { packageRule, packageName, depName },\n        'Use excludeDepPrefixes instead of excludePackagePrefixes',\n      );\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}