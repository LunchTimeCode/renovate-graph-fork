{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/package-rules/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport slugify from 'slugify';\nimport { mergeChildConfig } from '../../config';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport matchers from './matchers';\nimport { matcherOR } from './utils';\n\nfunction matchesRule(\n  inputConfig: PackageRuleInputConfig,\n  packageRule: PackageRule,\n): boolean {\n  let positiveMatch = true;\n  let matchApplied = false;\n  // matches\n  for (const groupMatchers of matchers) {\n    const isMatch = matcherOR(\n      'matches',\n      groupMatchers,\n      inputConfig,\n      packageRule,\n    );\n\n    // no rules are defined\n    if (is.nullOrUndefined(isMatch)) {\n      continue;\n    }\n\n    matchApplied = true;\n\n    if (!is.truthy(isMatch)) {\n      return false;\n    }\n  }\n\n  // not a single match rule is defined --> assume to match everything\n  if (!matchApplied) {\n    positiveMatch = true;\n  }\n\n  // excludes\n  for (const groupExcludes of matchers) {\n    const isExclude = matcherOR(\n      'excludes',\n      groupExcludes,\n      inputConfig,\n      packageRule,\n    );\n\n    // no rules are defined\n    if (is.nullOrUndefined(isExclude)) {\n      continue;\n    }\n\n    if (isExclude) {\n      return false;\n    }\n  }\n\n  return positiveMatch;\n}\n\nexport function applyPackageRules<T extends PackageRuleInputConfig>(\n  inputConfig: T,\n): T {\n  let config = { ...inputConfig };\n  const packageRules = config.packageRules ?? [];\n  logger.trace(\n    { dependency: config.depName, packageRules },\n    `Checking against ${packageRules.length} packageRules`,\n  );\n  for (const packageRule of packageRules) {\n    // This rule is considered matched if there was at least one positive match and no negative matches\n    if (matchesRule(config, packageRule)) {\n      // Package rule config overrides any existing config\n      const toApply = removeMatchers({ ...packageRule });\n      if (config.groupSlug && packageRule.groupName && !packageRule.groupSlug) {\n        // Need to apply groupSlug otherwise the existing one will take precedence\n        toApply.groupSlug = slugify(packageRule.groupName, {\n          lower: true,\n        });\n      }\n      if (toApply.enabled === false && config.enabled !== false) {\n        config.skipReason = 'package-rules';\n      }\n      config = mergeChildConfig(config, toApply);\n    }\n  }\n  return config;\n}\n\nfunction removeMatchers(\n  packageRule: PackageRule & PackageRuleInputConfig,\n): Record<string, unknown> {\n  for (const key of Object.keys(packageRule)) {\n    if (key.startsWith('match') || key.startsWith('exclude')) {\n      delete packageRule[key];\n    }\n  }\n\n  return packageRule;\n}\n"]}