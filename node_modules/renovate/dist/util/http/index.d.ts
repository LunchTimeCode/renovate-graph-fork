/// <reference types="node" />
/// <reference types="node" />
import { RequestError, RetryObject } from 'got';
import { infer as Infer, type ZodError, ZodType } from 'zod';
import { type AsyncResult } from '../result';
import { Throttle } from './throttle';
import type { HttpOptions, HttpResponse, InternalHttpOptions } from './types';
import './legacy';
export { RequestError as HttpError };
export declare class EmptyResultError extends Error {
}
export type SafeJsonError = RequestError | ZodError | EmptyResultError;
export declare class Http<Opts extends HttpOptions = HttpOptions> {
    protected hostType: string;
    private options?;
    constructor(hostType: string, options?: HttpOptions);
    protected getThrottle(url: string): Throttle | null;
    protected request<T>(requestUrl: string | URL, httpOptions: InternalHttpOptions): Promise<HttpResponse<T>>;
    protected calculateRetryDelay({ computedValue }: RetryObject): number;
    get(url: string, options?: HttpOptions): Promise<HttpResponse>;
    head(url: string, options?: HttpOptions): Promise<HttpResponse>;
    getBuffer(url: string, options?: HttpOptions): Promise<HttpResponse<Buffer>>;
    private requestJson;
    private resolveArgs;
    getPlain(url: string, options?: Opts): Promise<HttpResponse>;
    getJson<ResT>(url: string, options?: Opts): Promise<HttpResponse<ResT>>;
    getJson<ResT, Schema extends ZodType<ResT> = ZodType<ResT>>(url: string, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    getJson<ResT, Schema extends ZodType<ResT> = ZodType<ResT>>(url: string, options: Opts, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    getJsonSafe<ResT extends NonNullable<unknown>, Schema extends ZodType<ResT> = ZodType<ResT>>(url: string, schema: Schema): AsyncResult<Infer<Schema>, SafeJsonError>;
    getJsonSafe<ResT extends NonNullable<unknown>, Schema extends ZodType<ResT> = ZodType<ResT>>(url: string, options: Opts, schema: Schema): AsyncResult<Infer<Schema>, SafeJsonError>;
    headJson(url: string, httpOptions?: Opts): Promise<HttpResponse<never>>;
    postJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;
    postJson<T, Schema extends ZodType<T> = ZodType<T>>(url: string, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    postJson<T, Schema extends ZodType<T> = ZodType<T>>(url: string, options: Opts, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    putJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;
    putJson<T, Schema extends ZodType<T> = ZodType<T>>(url: string, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    putJson<T, Schema extends ZodType<T> = ZodType<T>>(url: string, options: Opts, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    patchJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;
    patchJson<T, Schema extends ZodType<T> = ZodType<T>>(url: string, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    patchJson<T, Schema extends ZodType<T> = ZodType<T>>(url: string, options: Opts, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    deleteJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;
    deleteJson<T, Schema extends ZodType<T> = ZodType<T>>(url: string, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    deleteJson<T, Schema extends ZodType<T> = ZodType<T>>(url: string, options: Opts, schema: Schema): Promise<HttpResponse<Infer<Schema>>>;
    stream(url: string, options?: HttpOptions): NodeJS.ReadableStream;
}
