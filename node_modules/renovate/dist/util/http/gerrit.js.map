{"version":3,"file":"gerrit.js","sourceRoot":"","sources":["../../../lib/util/http/gerrit.ts"],"names":[],"mappings":";;;AAAA,sCAAsC;AACtC,oCAAiC;AACjC,gCAAmC;AAEnC,mCAA+B;AAE/B,IAAI,OAAe,CAAC;AACpB,SAAgB,UAAU,CAAC,GAAW;IACpC,OAAO,GAAG,GAAG,CAAC;AAChB,CAAC;AAFD,gCAEC;AAED;;;GAGG;AACH,MAAa,UAAW,SAAQ,YAAI;IAC1B,MAAM,CAAC,WAAW,GAAG,IAAA,aAAK,EAAC,WAAW,CAAC,CAAC;IAEhD,YAAY,OAAqB;QAC/B,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC3B,CAAC;IAEkB,KAAK,CAAC,OAAO,CAC9B,IAAY,EACZ,OAA6B;QAE7B,MAAM,GAAG,GAAG,IAAA,eAAS,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;QACpD,MAAM,IAAI,GAAwB;YAChC,SAAS,EAAE,CAAC,IAAY,EAAE,EAAE,CAC1B,IAAA,kBAAS,EAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;YAC3D,GAAG,OAAO;SACX,CAAC;QACF,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,IAAI,CAAC,OAAO;SAChB,CAAC;QACF,OAAO,MAAM,KAAK,CAAC,OAAO,CAAI,GAAG,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;;AArBH,gCAsBC","sourcesContent":["import { parseJson } from '../common';\nimport { regEx } from '../regex';\nimport { isHttpUrl } from '../url';\nimport type { HttpOptions, HttpResponse, InternalHttpOptions } from './types';\nimport { Http } from './index';\n\nlet baseUrl: string;\nexport function setBaseUrl(url: string): void {\n  baseUrl = url;\n}\n\n/**\n * Access Gerrit REST-API and strip-of the \"magic prefix\" from responses.\n * @see https://gerrit-review.googlesource.com/Documentation/rest-api.html\n */\nexport class GerritHttp extends Http {\n  private static magicPrefix = regEx(/^\\)]}'\\n/g);\n\n  constructor(options?: HttpOptions) {\n    super('gerrit', options);\n  }\n\n  protected override async request<T>(\n    path: string,\n    options?: InternalHttpOptions,\n  ): Promise<HttpResponse<T>> {\n    const url = isHttpUrl(path) ? path : baseUrl + path;\n    const opts: InternalHttpOptions = {\n      parseJson: (text: string) =>\n        parseJson(text.replace(GerritHttp.magicPrefix, ''), path),\n      ...options,\n    };\n    opts.headers = {\n      ...opts.headers,\n    };\n    return await super.request<T>(url, opts);\n  }\n}\n"]}