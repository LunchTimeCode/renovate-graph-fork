{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/http/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport merge from 'deepmerge';\nimport got, { Options, RequestError, RetryObject } from 'got';\nimport type { SetRequired } from 'type-fest';\nimport { infer as Infer, type ZodError, ZodType } from 'zod';\nimport { GlobalConfig } from '../../config/global';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { pkg } from '../../expose.cjs';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../cache/memory';\nimport { hash } from '../hash';\nimport { type AsyncResult, Result } from '../result';\nimport { type HttpRequestStatsDataPoint, HttpStats } from '../stats';\nimport { resolveBaseUrl } from '../url';\nimport { applyAuthorization, removeAuthorization } from './auth';\nimport { hooks } from './hooks';\nimport { applyHostRule, findMatchingRule } from './host-rules';\nimport { getQueue } from './queue';\nimport { getRetryAfter, wrapWithRetry } from './retry-after';\nimport { Throttle, getThrottle } from './throttle';\nimport type {\n  GotJSONOptions,\n  GotOptions,\n  GotTask,\n  HttpOptions,\n  HttpResponse,\n  InternalHttpOptions,\n} from './types';\n// TODO: refactor code to remove this (#9651)\nimport './legacy';\nimport { copyResponse } from './util';\n\nexport { RequestError as HttpError };\n\nexport class EmptyResultError extends Error {}\nexport type SafeJsonError = RequestError | ZodError | EmptyResultError;\n\ntype JsonArgs<\n  Opts extends HttpOptions,\n  ResT = unknown,\n  Schema extends ZodType<ResT> = ZodType<ResT>,\n> = {\n  url: string;\n  httpOptions?: Opts;\n  schema?: Schema;\n};\n\nfunction applyDefaultHeaders(options: Options): void {\n  const renovateVersion = pkg.version;\n  options.headers = {\n    ...options.headers,\n    'user-agent':\n      GlobalConfig.get('userAgent') ??\n      `RenovateBot/${renovateVersion} (https://github.com/renovatebot/renovate)`,\n  };\n}\n\ntype QueueStatsData = Pick<HttpRequestStatsDataPoint, 'queueMs'>;\n\n// Note on types:\n// options.requestType can be either 'json' or 'buffer', but `T` should be\n// `Buffer` in the latter case.\n// We don't declare overload signatures because it's immediately wrapped by\n// `request`.\nasync function gotTask<T>(\n  url: string,\n  options: SetRequired<GotOptions, 'method'>,\n  queueStats: QueueStatsData,\n): Promise<HttpResponse<T>> {\n  logger.trace({ url, options }, 'got request');\n\n  let duration = 0;\n  let statusCode = 0;\n\n  try {\n    // Cheat the TS compiler using `as` to pick a specific overload.\n    // Otherwise it doesn't typecheck.\n    const resp = await got<T>(url, { ...options, hooks } as GotJSONOptions);\n    statusCode = resp.statusCode;\n    duration =\n      resp.timings.phases.total ??\n      /* istanbul ignore next: can't be tested */ 0;\n    return resp;\n  } catch (error) {\n    if (error instanceof RequestError) {\n      statusCode =\n        error.response?.statusCode ??\n        /* istanbul ignore next: can't be tested */ -1;\n      duration =\n        error.timings?.phases.total ??\n        /* istanbul ignore next: can't be tested */ -1;\n      const method = options.method.toUpperCase();\n      const code = error.code ?? /* istanbul ignore next */ 'UNKNOWN';\n      const retryCount =\n        error.request?.retryCount ?? /* istanbul ignore next */ -1;\n      logger.debug(\n        `${method} ${url} = (code=${code}, statusCode=${statusCode} retryCount=${retryCount}, duration=${duration})`,\n      );\n    }\n\n    throw error;\n  } finally {\n    HttpStats.write({\n      method: options.method,\n      url,\n      reqMs: duration,\n      queueMs: queueStats.queueMs,\n      status: statusCode,\n    });\n  }\n}\n\nexport class Http<Opts extends HttpOptions = HttpOptions> {\n  private options?: GotOptions;\n\n  constructor(\n    protected hostType: string,\n    options: HttpOptions = {},\n  ) {\n    const retryLimit = process.env.NODE_ENV === 'test' ? 0 : 2;\n    this.options = merge<GotOptions>(\n      options,\n      {\n        context: { hostType },\n        retry: {\n          calculateDelay: (retryObject) =>\n            this.calculateRetryDelay(retryObject),\n          limit: retryLimit,\n          maxRetryAfter: 0, // Don't rely on `got` retry-after handling, just let it fail and then we'll handle it\n        },\n      },\n      { isMergeableObject: is.plainObject },\n    );\n  }\n\n  protected getThrottle(url: string): Throttle | null {\n    return getThrottle(url);\n  }\n\n  protected async request<T>(\n    requestUrl: string | URL,\n    httpOptions: InternalHttpOptions,\n  ): Promise<HttpResponse<T>> {\n    let url = requestUrl.toString();\n    if (httpOptions?.baseUrl) {\n      url = resolveBaseUrl(httpOptions.baseUrl, url);\n    }\n\n    let options = merge<SetRequired<GotOptions, 'method'>, InternalHttpOptions>(\n      {\n        method: 'get',\n        ...this.options,\n        hostType: this.hostType,\n      },\n      httpOptions,\n      { isMergeableObject: is.plainObject },\n    );\n\n    logger.trace(`HTTP request: ${options.method.toUpperCase()} ${url}`);\n\n    options.hooks = {\n      beforeRedirect: [removeAuthorization],\n    };\n\n    applyDefaultHeaders(options);\n\n    if (\n      is.undefined(options.readOnly) &&\n      ['head', 'get'].includes(options.method)\n    ) {\n      options.readOnly = true;\n    }\n\n    const hostRule = findMatchingRule(url, options);\n    options = applyHostRule(url, options, hostRule);\n    if (options.enabled === false) {\n      logger.debug(`Host is disabled - rejecting request. HostUrl: ${url}`);\n      throw new Error(HOST_DISABLED);\n    }\n    options = applyAuthorization(options);\n    options.timeout ??= 60000;\n\n    const memCacheKey =\n      options.memCache !== false &&\n      (options.method === 'get' || options.method === 'head')\n        ? hash(\n            `got-${JSON.stringify({\n              url,\n              headers: options.headers,\n              method: options.method,\n            })}`,\n          )\n        : null;\n\n    let resPromise: Promise<HttpResponse<T>> | null = null;\n\n    // Cache GET requests unless memCache=false\n    if (memCacheKey) {\n      resPromise = memCache.get(memCacheKey);\n    }\n\n    // istanbul ignore else: no cache tests\n    if (!resPromise) {\n      if (options.cacheProvider) {\n        await options.cacheProvider.setCacheHeaders(url, options);\n      }\n\n      const startTime = Date.now();\n      const httpTask: GotTask<T> = () => {\n        const queueMs = Date.now() - startTime;\n        return gotTask(url, options, { queueMs });\n      };\n\n      const throttle = this.getThrottle(url);\n      const throttledTask: GotTask<T> = throttle\n        ? () => throttle.add<HttpResponse<T>>(httpTask)\n        : httpTask;\n\n      const queue = getQueue(url);\n      const queuedTask: GotTask<T> = queue\n        ? () => queue.add<HttpResponse<T>>(throttledTask)\n        : throttledTask;\n\n      const { maxRetryAfter = 60 } = hostRule;\n      resPromise = wrapWithRetry(queuedTask, url, getRetryAfter, maxRetryAfter);\n\n      if (memCacheKey) {\n        memCache.set(memCacheKey, resPromise);\n      }\n    }\n\n    try {\n      const res = await resPromise;\n      const deepCopyNeeded = !!memCacheKey && res.statusCode !== 304;\n      const resCopy = copyResponse(res, deepCopyNeeded);\n      resCopy.authorization = !!options?.headers?.authorization;\n\n      if (options.cacheProvider) {\n        return await options.cacheProvider.wrapResponse(url, resCopy);\n      }\n\n      return resCopy;\n    } catch (err) {\n      const { abortOnError, abortIgnoreStatusCodes } = options;\n      if (abortOnError && !abortIgnoreStatusCodes?.includes(err.statusCode)) {\n        throw new ExternalHostError(err);\n      }\n      throw err;\n    }\n  }\n\n  protected calculateRetryDelay({ computedValue }: RetryObject): number {\n    return computedValue;\n  }\n\n  get(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, options);\n  }\n\n  head(url: string, options: HttpOptions = {}): Promise<HttpResponse> {\n    return this.request<string>(url, { ...options, method: 'head' });\n  }\n\n  getBuffer(\n    url: string,\n    options: HttpOptions = {},\n  ): Promise<HttpResponse<Buffer>> {\n    return this.request<Buffer>(url, {\n      ...options,\n      responseType: 'buffer',\n    });\n  }\n\n  private async requestJson<ResT = unknown>(\n    method: InternalHttpOptions['method'],\n    { url, httpOptions: requestOptions, schema }: JsonArgs<Opts, ResT>,\n  ): Promise<HttpResponse<ResT>> {\n    const { body, ...httpOptions } = { ...requestOptions };\n    const opts: InternalHttpOptions = {\n      ...httpOptions,\n      method,\n      responseType: 'json',\n    };\n    // signal that we expect a json response\n    opts.headers = {\n      accept: 'application/json',\n      ...opts.headers,\n    };\n    if (body) {\n      opts.json = body;\n    }\n    const res = await this.request<ResT>(url, opts);\n\n    if (!schema) {\n      return res;\n    }\n\n    res.body = await schema.parseAsync(res.body);\n    return res;\n  }\n\n  private resolveArgs<ResT = unknown>(\n    arg1: string,\n    arg2: Opts | ZodType<ResT> | undefined,\n    arg3: ZodType<ResT> | undefined,\n  ): JsonArgs<Opts, ResT> {\n    const res: JsonArgs<Opts, ResT> = { url: arg1 };\n\n    if (arg2 instanceof ZodType) {\n      res.schema = arg2;\n    } else if (arg2) {\n      res.httpOptions = arg2;\n    }\n\n    if (arg3) {\n      res.schema = arg3;\n    }\n\n    return res;\n  }\n\n  async getPlain(url: string, options?: Opts): Promise<HttpResponse> {\n    const opt = options ?? {};\n    return await this.get(url, {\n      headers: {\n        Accept: 'text/plain',\n      },\n      ...opt,\n    });\n  }\n\n  getJson<ResT>(url: string, options?: Opts): Promise<HttpResponse<ResT>>;\n  getJson<ResT, Schema extends ZodType<ResT> = ZodType<ResT>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  getJson<ResT, Schema extends ZodType<ResT> = ZodType<ResT>>(\n    url: string,\n    options: Opts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  getJson<ResT = unknown, Schema extends ZodType<ResT> = ZodType<ResT>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<ResT>> {\n    const args = this.resolveArgs<ResT>(arg1, arg2, arg3);\n    return this.requestJson<ResT>('get', args);\n  }\n\n  getJsonSafe<\n    ResT extends NonNullable<unknown>,\n    Schema extends ZodType<ResT> = ZodType<ResT>,\n  >(url: string, schema: Schema): AsyncResult<Infer<Schema>, SafeJsonError>;\n  getJsonSafe<\n    ResT extends NonNullable<unknown>,\n    Schema extends ZodType<ResT> = ZodType<ResT>,\n  >(\n    url: string,\n    options: Opts,\n    schema: Schema,\n  ): AsyncResult<Infer<Schema>, SafeJsonError>;\n  getJsonSafe<\n    ResT extends NonNullable<unknown>,\n    Schema extends ZodType<ResT> = ZodType<ResT>,\n  >(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema,\n  ): AsyncResult<ResT, SafeJsonError> {\n    const args = this.resolveArgs<ResT>(arg1, arg2, arg3);\n    return Result.wrap(this.requestJson<ResT>('get', args)).transform(\n      (response) => Result.ok(response.body),\n    );\n  }\n\n  headJson(url: string, httpOptions?: Opts): Promise<HttpResponse<never>> {\n    return this.requestJson<never>('head', { url, httpOptions });\n  }\n\n  postJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;\n  postJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  postJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: Opts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  postJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('post', args);\n  }\n\n  putJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;\n  putJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  putJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: Opts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  putJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: ZodType,\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('put', args);\n  }\n\n  patchJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;\n  patchJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  patchJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: Opts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  patchJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('patch', args);\n  }\n\n  deleteJson<T>(url: string, options?: Opts): Promise<HttpResponse<T>>;\n  deleteJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  deleteJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: Opts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  deleteJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('delete', args);\n  }\n\n  stream(url: string, options?: HttpOptions): NodeJS.ReadableStream {\n    // TODO: fix types (#22198)\n    let combinedOptions: any = {\n      method: 'get',\n      ...this.options,\n      hostType: this.hostType,\n      ...options,\n    };\n\n    let resolvedUrl = url;\n    // istanbul ignore else: needs test\n    if (options?.baseUrl) {\n      resolvedUrl = resolveBaseUrl(options.baseUrl, url);\n    }\n\n    applyDefaultHeaders(combinedOptions);\n\n    if (\n      is.undefined(combinedOptions.readOnly) &&\n      ['head', 'get'].includes(combinedOptions.method)\n    ) {\n      combinedOptions.readOnly = true;\n    }\n\n    const hostRule = findMatchingRule(url, combinedOptions);\n    combinedOptions = applyHostRule(resolvedUrl, combinedOptions, hostRule);\n    if (combinedOptions.enabled === false) {\n      throw new Error(HOST_DISABLED);\n    }\n    combinedOptions = applyAuthorization(combinedOptions);\n\n    return got.stream(resolvedUrl, combinedOptions);\n  }\n}\n"]}