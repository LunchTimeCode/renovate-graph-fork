{"version":3,"file":"yaml.js","sourceRoot":"","sources":["../../lib/util/yaml.ts"],"names":[],"mappings":";;;AAAA,qCAMiB;AAEjB,sCAAmC;AACnC,mCAAgC;AAiBhC,SAAgB,SAAS,CACvB,OAAe,EACf,QAA2B,EAC3B,OAAmC;IAEnC,MAAM,eAAe,GAAG,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAEzD,MAAM,YAAY,GAAG,IAAA,iBAAQ,EAAC,eAAe,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAElE,MAAM,MAAM,GAAG,OAAO,EAAE,YAAY,CAAC;IACrC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,YAAsB,CAAC;IAChC,CAAC;IAED,MAAM,MAAM,GAAW,EAAE,CAAC;IAC1B,KAAK,MAAM,OAAO,IAAI,YAAY,EAAE,CAAC;QACnC,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACzB,SAAS;QACX,CAAC;QAED,IAAI,OAAO,EAAE,gBAAgB,KAAK,QAAQ,EAAE,CAAC;YAC3C,MAAM,IAAI,KAAK,CAAC,2BAA2B,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QACxE,CAAC;QACD,eAAM,CAAC,KAAK,CACV,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,EAC1C,iCAAiC,CAClC,CAAC;IACJ,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AA/BD,8BA+BC;AAED,SAAgB,eAAe,CAC7B,OAAe,EACf,OAA2B;IAE3B,MAAM,eAAe,GAAG,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACzD,MAAM,WAAW,GAAG,IAAA,cAAM,EAAC,eAAe,EAAE,OAAO,CAAC,CAAC;IAErD,MAAM,MAAM,GAAG,OAAO,EAAE,YAAY,CAAC;IACrC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,WAAmB,CAAC;IAC7B,CAAC;IAED,OAAO,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AACnC,CAAC;AAbD,0CAaC;AAED,SAAgB,IAAI,CAAC,GAAQ,EAAE,IAA8B;IAC3D,OAAO,IAAA,cAAY,EAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACjC,CAAC;AAFD,oBAEC;AAED,SAAS,cAAc,CAAC,OAAe,EAAE,OAAqB;IAC5D,IAAI,OAAO,EAAE,eAAe,EAAE,CAAC;QAC7B,OAAO,OAAO;aACX,OAAO,CAAC,IAAA,aAAK,EAAC,iBAAiB,CAAC,EAAE,EAAE,CAAC;aACrC,OAAO,CAAC,IAAA,aAAK,EAAC,aAAa,CAAC,EAAE,EAAE,CAAC;aACjC,OAAO,CAAC,IAAA,aAAK,EAAC,WAAW,CAAC,EAAE,EAAE,CAAC;aAC/B,OAAO,CAAC,IAAA,aAAK,EAAC,aAAa,CAAC,EAAE,EAAE,CAAC;aACjC,OAAO,CAAC,IAAA,aAAK,EAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;IACpC,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import {\n  DumpOptions,\n  LoadOptions,\n  loadAll as multiple,\n  load as single,\n  dump as upstreamDump,\n} from 'js-yaml';\nimport type { ZodType } from 'zod';\nimport { logger } from '../logger';\nimport { regEx } from './regex';\n\ninterface YamlOptions<\n  ResT = unknown,\n  Schema extends ZodType<ResT> = ZodType<ResT>,\n> extends LoadOptions {\n  customSchema?: Schema;\n  removeTemplates?: boolean;\n}\n\ninterface YamlOptionsMultiple<\n  ResT = unknown,\n  Schema extends ZodType<ResT> = ZodType<ResT>,\n> extends YamlOptions<ResT, Schema> {\n  failureBehaviour?: 'throw' | 'filter';\n}\n\nexport function parseYaml<ResT = unknown>(\n  content: string,\n  iterator?: null | undefined,\n  options?: YamlOptionsMultiple<ResT>,\n): ResT[] {\n  const massagedContent = massageContent(content, options);\n\n  const rawDocuments = multiple(massagedContent, iterator, options);\n\n  const schema = options?.customSchema;\n  if (!schema) {\n    return rawDocuments as ResT[];\n  }\n\n  const parsed: ResT[] = [];\n  for (const element of rawDocuments) {\n    const result = schema.safeParse(element);\n    if (result.success) {\n      parsed.push(result.data);\n      continue;\n    }\n\n    if (options?.failureBehaviour !== 'filter') {\n      throw new Error('Failed to parse YAML file', { cause: result.error });\n    }\n    logger.trace(\n      { error: result.error, document: element },\n      'Failed to parse schema for YAML',\n    );\n  }\n  return parsed;\n}\n\nexport function parseSingleYaml<ResT = unknown>(\n  content: string,\n  options?: YamlOptions<ResT>,\n): ResT {\n  const massagedContent = massageContent(content, options);\n  const rawDocument = single(massagedContent, options);\n\n  const schema = options?.customSchema;\n  if (!schema) {\n    return rawDocument as ResT;\n  }\n\n  return schema.parse(rawDocument);\n}\n\nexport function dump(obj: any, opts?: DumpOptions | undefined): string {\n  return upstreamDump(obj, opts);\n}\n\nfunction massageContent(content: string, options?: YamlOptions): string {\n  if (options?.removeTemplates) {\n    return content\n      .replace(regEx(/\\s+{{.+?}}:.+/gs), '')\n      .replace(regEx(/{{`.+?`}}/gs), '')\n      .replace(regEx(/{{.+?}}/gs), '')\n      .replace(regEx(/{%`.+?`%}/gs), '')\n      .replace(regEx(/{%.+?%}/g), '');\n  }\n\n  return content;\n}\n"]}