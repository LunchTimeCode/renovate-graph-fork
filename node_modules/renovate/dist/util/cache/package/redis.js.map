{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/redis.ts"],"names":[],"mappings":"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","sourcesContent":["/* istanbul ignore file */\nimport { DateTime } from 'luxon';\nimport { createClient } from 'redis';\nimport { logger } from '../../../logger';\nimport { compressToBase64, decompressFromBase64 } from '../../compress';\nimport type { PackageCacheNamespace } from './types';\n\nlet client: ReturnType<typeof createClient> | undefined;\nlet rprefix: string | undefined;\n\nfunction getKey(namespace: PackageCacheNamespace, key: string): string {\n  return `${rprefix}${namespace}-${key}`;\n}\n\nexport async function end(): Promise<void> {\n  try {\n    // https://github.com/redis/node-redis#disconnecting\n    await client?.disconnect();\n  } catch (err) {\n    logger.warn({ err }, 'Redis cache end failed');\n  }\n}\n\nasync function rm(\n  namespace: PackageCacheNamespace,\n  key: string,\n): Promise<void> {\n  logger.trace({ rprefix, namespace, key }, 'Removing cache entry');\n  await client?.del(getKey(namespace, key));\n}\n\nexport async function get<T = never>(\n  namespace: PackageCacheNamespace,\n  key: string,\n): Promise<T | undefined> {\n  if (!client) {\n    return undefined;\n  }\n  logger.trace(`cache.get(${namespace}, ${key})`);\n  try {\n    const res = await client?.get(getKey(namespace, key));\n    const cachedValue = res && JSON.parse(res);\n    if (cachedValue) {\n      if (DateTime.local() < DateTime.fromISO(cachedValue.expiry)) {\n        logger.trace({ rprefix, namespace, key }, 'Returning cached value');\n        // istanbul ignore if\n        if (!cachedValue.compress) {\n          return cachedValue.value;\n        }\n        const res = await decompressFromBase64(cachedValue.value);\n        return JSON.parse(res);\n      }\n      // istanbul ignore next\n      await rm(namespace, key);\n    }\n  } catch (err) {\n    logger.trace({ rprefix, namespace, key }, 'Cache miss');\n  }\n  return undefined;\n}\n\nexport async function set(\n  namespace: PackageCacheNamespace,\n  key: string,\n  value: unknown,\n  ttlMinutes = 5,\n): Promise<void> {\n  logger.trace({ rprefix, namespace, key, ttlMinutes }, 'Saving cached value');\n\n  // Redis requires TTL to be integer, not float\n  const redisTTL = Math.floor(ttlMinutes * 60);\n\n  try {\n    await client?.set(\n      getKey(namespace, key),\n      JSON.stringify({\n        compress: true,\n        value: await compressToBase64(JSON.stringify(value)),\n        expiry: DateTime.local().plus({ minutes: ttlMinutes }),\n      }),\n      { EX: redisTTL },\n    );\n  } catch (err) {\n    logger.once.debug({ err }, 'Error while setting cache value');\n  }\n}\n\nexport async function init(\n  url: string,\n  prefix: string | undefined,\n): Promise<void> {\n  if (!url) {\n    return;\n  }\n  rprefix = prefix ?? '';\n  logger.debug('Redis cache init');\n  client = createClient({\n    url,\n    socket: {\n      reconnectStrategy: (retries) => {\n        // Reconnect after this time\n        return Math.min(retries * 100, 3000);\n      },\n    },\n    pingInterval: 30000, // 30s\n  });\n  await client.connect();\n}\n"]}