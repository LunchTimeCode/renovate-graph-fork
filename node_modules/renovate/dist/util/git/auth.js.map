{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../lib/util/git/auth.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PlatformId } from '../../constants/platforms';\nimport { logger } from '../../logger';\nimport type { HostRule } from '../../types';\nimport { detectPlatform } from '../common';\nimport { find, getAll } from '../host-rules';\nimport { regEx } from '../regex';\nimport { createURLFromHostOrURL, isHttpUrl } from '../url';\nimport type { AuthenticationRule } from './types';\nimport { parseGitUrl } from './url';\n\nconst githubApiUrls = new Set([\n  'github.com',\n  'api.github.com',\n  'https://api.github.com',\n  'https://api.github.com/',\n]);\n\nconst standardGitAllowedHostTypes = [\n  // All known git platforms\n  'azure',\n  'bitbucket',\n  'bitbucket-server',\n  'gitea',\n  'github',\n  'gitlab',\n] satisfies PlatformId[];\n\n/**\n * Add authorization to a Git Url and returns a new environment variables object\n * @returns a new NodeJS.ProcessEnv object without modifying any input parameters\n */\nexport function getGitAuthenticatedEnvironmentVariables(\n  originalGitUrl: string,\n  { token, username, password, hostType, matchHost }: HostRule,\n  environmentVariables?: NodeJS.ProcessEnv,\n): NodeJS.ProcessEnv {\n  if (!token && !(username && password)) {\n    logger.warn(\n      // TODO: types (#22198)\n      `Could not create environment variable for ${matchHost!} as neither token or username and password was set`,\n    );\n    return { ...environmentVariables };\n  }\n\n  // check if the environmentVariables already contain a GIT_CONFIG_COUNT or if the process has one\n  const gitConfigCountEnvVariable =\n    environmentVariables?.GIT_CONFIG_COUNT ?? process.env.GIT_CONFIG_COUNT;\n  let gitConfigCount = 0;\n  if (gitConfigCountEnvVariable) {\n    // passthrough the gitConfigCountEnvVariable environment variable as start value of the index count\n    gitConfigCount = parseInt(gitConfigCountEnvVariable, 10);\n    if (Number.isNaN(gitConfigCount)) {\n      logger.warn(\n        `Found GIT_CONFIG_COUNT env variable, but couldn't parse the value to an integer: ${String(\n          process.env.GIT_CONFIG_COUNT,\n        )}. Ignoring it.`,\n      );\n      gitConfigCount = 0;\n    }\n  }\n  let authenticationRules: AuthenticationRule[];\n  if (token) {\n    authenticationRules = getAuthenticationRulesWithToken(\n      originalGitUrl,\n      hostType,\n      token,\n    );\n  } else {\n    const encodedUsername = encodeURIComponent(username!);\n    const encodedPassword = encodeURIComponent(password!);\n\n    authenticationRules = getAuthenticationRules(\n      originalGitUrl,\n      `${encodedUsername}:${encodedPassword}`,\n    );\n  }\n\n  // create a shallow copy of the environmentVariables as base so we don't modify the input parameter object\n  // add the two new config key and value to the returnEnvironmentVariables object\n  // increase the CONFIG_COUNT by one for each rule and add it to the object\n  const newEnvironmentVariables = {\n    ...environmentVariables,\n  };\n  for (const rule of authenticationRules) {\n    newEnvironmentVariables[`GIT_CONFIG_KEY_${gitConfigCount}`] =\n      `url.${rule.url}.insteadOf`;\n    newEnvironmentVariables[`GIT_CONFIG_VALUE_${gitConfigCount}`] =\n      rule.insteadOf;\n    gitConfigCount++;\n  }\n  newEnvironmentVariables['GIT_CONFIG_COUNT'] = gitConfigCount.toString();\n\n  return newEnvironmentVariables;\n}\n\nfunction getAuthenticationRulesWithToken(\n  url: string,\n  hostType: string | undefined | null,\n  authToken: string,\n): AuthenticationRule[] {\n  let token = authToken;\n  let type = hostType;\n  if (!type) {\n    type = detectPlatform(url);\n  }\n  if (type === 'gitlab') {\n    token = `gitlab-ci-token:${authToken}`;\n  }\n  return getAuthenticationRules(url, token);\n}\n\n/**\n * Generates the authentication rules for later git usage for the given host\n * @link https://coolaj86.com/articles/vanilla-devops-git-credentials-cheatsheet/\n */\nexport function getAuthenticationRules(\n  gitUrl: string,\n  token: string,\n): AuthenticationRule[] {\n  const authenticationRules = [];\n  const hasUser = token.split(':').length > 1;\n  const insteadUrl = parseGitUrl(gitUrl);\n\n  const url = { ...insteadUrl };\n  const protocol = regEx(/^https?$/).test(url.protocol)\n    ? url.protocol\n    : 'https';\n\n  // ssh protocol with user if empty\n  url.token = hasUser ? token : `ssh:${token}`;\n  authenticationRules.push({\n    url: url.toString(protocol),\n    // only edge case, need to stringify ourself because the exact syntax is not supported by the library\n    // https://github.com/IonicaBizau/git-url-parse/blob/246c9119fb42c2ea1c280028fe77c53eb34c190c/lib/index.js#L246\n    insteadOf: `ssh://git@${insteadUrl.resource}${\n      insteadUrl.port ? `:${insteadUrl.port}` : ''\n    }/${insteadUrl.full_name}${insteadUrl.git_suffix ? '.git' : ''}`,\n  });\n\n  // alternative ssh protocol with user if empty\n  url.token = hasUser ? token : `git:${token}`;\n  authenticationRules.push({\n    url: url.toString(protocol),\n    insteadOf: insteadUrl.toString('ssh'),\n  });\n\n  // https protocol with no user as default fallback\n  url.token = token;\n  authenticationRules.push({\n    url: url.toString(protocol),\n    insteadOf: insteadUrl.toString(protocol),\n  });\n\n  return authenticationRules;\n}\n\nexport function getGitEnvironmentVariables(\n  additionalHostTypes: string[] = [],\n): NodeJS.ProcessEnv {\n  let environmentVariables: NodeJS.ProcessEnv = {};\n\n  // hard-coded logic to use authentication for github.com based on the githubToken for api.github.com\n  const gitHubHostRule = find({\n    hostType: 'github',\n    url: 'https://api.github.com/',\n  });\n\n  if (gitHubHostRule?.token) {\n    environmentVariables = getGitAuthenticatedEnvironmentVariables(\n      'https://github.com/',\n      gitHubHostRule,\n    );\n  }\n\n  // construct the Set of allowed hostTypes consisting of the standard Git provides\n  // plus additionalHostTypes, which are provided as parameter\n  const gitAllowedHostTypes = new Set<string>([\n    ...standardGitAllowedHostTypes,\n    ...additionalHostTypes,\n  ]);\n\n  // filter rules without `matchHost` and `token` or username and password and github api github rules\n  const hostRules = getAll()\n    .filter((r) => r.matchHost && (r.token ?? (r.username && r.password)))\n    .filter((r) => !gitHubHostRule || !githubApiUrls.has(r.matchHost!));\n\n  // for each hostRule without hostType we add additional authentication variables to the environmentVariables\n  // for each hostRule with hostType we add additional authentication variables to the environmentVariables\n  for (const hostRule of hostRules) {\n    if (!hostRule.hostType || gitAllowedHostTypes.has(hostRule.hostType)) {\n      environmentVariables = addAuthFromHostRule(\n        hostRule,\n        environmentVariables,\n      );\n    }\n  }\n  return environmentVariables;\n}\n\nfunction addAuthFromHostRule(\n  hostRule: HostRule,\n  env: NodeJS.ProcessEnv,\n): NodeJS.ProcessEnv {\n  let environmentVariables = env;\n  const httpUrl = createURLFromHostOrURL(hostRule.matchHost!)?.toString();\n  if (isHttpUrl(httpUrl)) {\n    logger.trace(`Adding Git authentication for ${httpUrl} using token auth.`);\n    environmentVariables = getGitAuthenticatedEnvironmentVariables(\n      httpUrl!,\n      hostRule,\n      environmentVariables,\n    );\n  } else {\n    logger.debug(\n      `Could not parse registryUrl ${hostRule.matchHost!} or not using http(s). Ignoring`,\n    );\n  }\n  return environmentVariables;\n}\n"]}