{"version":3,"file":"url.js","sourceRoot":"","sources":["../../lib/util/url.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\n// eslint-disable-next-line no-restricted-imports\nimport _parseLinkHeader from 'parse-link-header';\nimport urlJoin from 'url-join';\nimport { logger } from '../logger';\nimport { regEx } from './regex';\n\nexport function joinUrlParts(...parts: string[]): string {\n  return urlJoin(...parts);\n}\n\nexport function ensurePathPrefix(url: string, prefix: string): string {\n  const parsed = new URL(url);\n  const fullPath = parsed.pathname + parsed.search;\n  if (fullPath.startsWith(prefix)) {\n    return url;\n  }\n  return parsed.origin + prefix + fullPath;\n}\n\nexport function ensureTrailingSlash(url: string): string {\n  return url.replace(/\\/?$/, '/'); // TODO #12875 adds slash at the front when re2 is used\n}\n\nexport function trimTrailingSlash(url: string): string {\n  return url.replace(regEx(/\\/+$/), '');\n}\n\nexport function trimLeadingSlash(path: string): string {\n  return path.replace(/^\\/+/, '');\n}\n\nexport function trimSlashes(path: string): string {\n  return trimLeadingSlash(trimTrailingSlash(path));\n}\n\n/**\n * Resolves an input path against a base URL\n *\n * @param baseUrl - base URL to resolve against\n * @param input - input path (if this is a full URL, it will be returned)\n */\nexport function resolveBaseUrl(baseUrl: string, input: string | URL): string {\n  const inputString = input.toString();\n\n  let host;\n  let pathname;\n  try {\n    ({ host, pathname } = new URL(inputString));\n  } catch (e) {\n    pathname = inputString;\n  }\n\n  return host ? inputString : urlJoin(baseUrl, pathname || '');\n}\n\n/**\n * Replaces the path of a URL with a new path\n *\n * @param baseUrl - source URL\n * @param path - replacement path (if this is a full URL, it will be returned)\n */\nexport function replaceUrlPath(baseUrl: string | URL, path: string): string {\n  if (parseUrl(path)) {\n    return path;\n  }\n\n  const { origin } = is.string(baseUrl) ? new URL(baseUrl) : baseUrl;\n  return urlJoin(origin, path);\n}\n\nexport function getQueryString(params: Record<string, any>): string {\n  const usp = new URLSearchParams();\n  for (const [k, v] of Object.entries(params)) {\n    if (is.array<object>(v)) {\n      for (const item of v) {\n        // TODO: fix me?\n        // eslint-disable-next-line @typescript-eslint/no-base-to-string\n        usp.append(k, item.toString());\n      }\n    } else {\n      usp.append(k, v.toString());\n    }\n  }\n  return usp.toString();\n}\n\nexport function isHttpUrl(url: unknown): boolean {\n  if (!is.nonEmptyString(url)) {\n    return false;\n  }\n  try {\n    const { protocol } = new URL(url);\n    return protocol === 'https:' || protocol === 'http:';\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function parseUrl(url: string | undefined | null): URL | null {\n  if (!url) {\n    return null;\n  }\n\n  try {\n    return new URL(url);\n  } catch (err) {\n    return null;\n  }\n}\n\n/**\n * Tries to create an URL object from either a full URL string or a hostname\n * @param url either the full url or a hostname\n * @returns an URL object or null\n */\nexport function createURLFromHostOrURL(url: string): URL | null {\n  return parseUrl(url) ?? parseUrl(`https://${url}`);\n}\n\nexport type LinkHeaderLinks = _parseLinkHeader.Links;\n\nexport function parseLinkHeader(\n  linkHeader: string | null | undefined,\n): LinkHeaderLinks | null {\n  if (!is.nonEmptyString(linkHeader)) {\n    return null;\n  }\n  if (linkHeader.length > 2000) {\n    logger.warn({ linkHeader }, 'Link header too long.');\n    return null;\n  }\n  return _parseLinkHeader(linkHeader);\n}\n"]}